#include "ultra64.h"
#include "z64.h"
#include "macros.h"
#include "object_jya_obj.h"

Vtx object_jya_objVtx_000000[] = {
    VTX(-400, 0, -400, 0, 4096, 52, 49, 38, 255),
    VTX(400, 0, -400, 4096, 4096, 52, 49, 38, 255),
    VTX(400, 0, 400, 4096, 0, 52, 49, 38, 255),
    VTX(-400, 0, 400, 0, 0, 52, 49, 38, 255),
    VTX(-400, 200, 400, 0, 0, 69, 62, 48, 255),
    VTX(-400, 0, 400, 0, 1024, 52, 49, 38, 255),
    VTX(400, 0, 400, 4096, 1024, 52, 49, 38, 255),
    VTX(400, 200, 400, 4096, 0, 69, 62, 48, 255),
    VTX(400, 200, 400, 0, 0, 69, 62, 48, 255),
    VTX(400, 0, 400, 0, 1024, 52, 49, 38, 255),
    VTX(400, 0, -400, 4096, 1024, 52, 49, 38, 255),
    VTX(400, 200, -400, 4096, 0, 69, 62, 48, 255),
    VTX(400, 0, -400, 4096, 1024, 52, 49, 38, 255),
    VTX(-400, 0, -400, 0, 1024, 52, 49, 38, 255),
    VTX(-400, 200, -400, 0, 0, 69, 62, 48, 255),
    VTX(-400, 200, -400, 4096, 0, 69, 62, 48, 255),
    VTX(-400, 0, -400, 4096, 1024, 52, 49, 38, 255),
    VTX(-400, 0, 400, 0, 1024, 52, 49, 38, 255),
    VTX(-400, 200, 400, 0, 0, 69, 62, 48, 255),
    VTX(-400, 200, 400, 0, -3072, 100, 89, 67, 255),
    VTX(-200, 200, 200, 1024, -2048, 115, 102, 78, 255),
    VTX(-200, 200, -200, 3072, -2048, 115, 102, 78, 255),
    VTX(-400, 200, -400, 4096, -3072, 100, 89, 67, 255),
    VTX(200, 200, -200, 3072, 0, 115, 102, 78, 255),
    VTX(400, 200, -400, 4096, 1024, 100, 89, 67, 255),
    VTX(400, 200, 400, 0, 1024, 100, 89, 67, 255),
    VTX(200, 200, 200, 1024, 0, 115, 102, 78, 255),
}; 

Vtx object_jya_objVtx_0001B0[] = {
    VTX(-200, 200, 200, 0, 0, 115, 102, 78, 255),
    VTX(200, 200, 200, 0, 1024, 115, 102, 78, 255),
    VTX(200, 200, -200, 1024, 1024, 115, 102, 78, 255),
    VTX(-200, 200, -200, 1024, 0, 115, 102, 78, 255),
}; 

Gfx g1fliftDlist[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(g1fLiftBottomTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 0, 0, 5, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_000000, 27, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(11, 12, 13, 0, 11, 13, 14, 0),
    gsSP2Triangles(15, 16, 17, 0, 15, 17, 18, 0),
    gsSP2Triangles(19, 20, 21, 0, 19, 21, 22, 0),
    gsSP2Triangles(23, 24, 22, 0, 23, 22, 21, 0),
    gsSP2Triangles(19, 25, 26, 0, 19, 26, 20, 0),
    gsSP2Triangles(25, 24, 23, 0, 25, 23, 26, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(g1f1fiftTopTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 2, 2, 5, 5, 0, 0),
    gsSPVertex(object_jya_objVtx_0001B0, 4, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSPEndDisplayList(),
}; 

CamData g1fliftCol_camDataList_00000310[1] = {
	{ 0x0000, 0, 0x00000000 }, // 0x00000310

}; 

u32 g1fliftCol_polygonTypes_00000318[] = {
	 0x0000C000, 0x000007C2, 

}; 

RoomPoly g1fliftCol_polygons_00000320[] = {
	{ 0x0000, 0x0000, 0x0001, 0x0002, 0x0000, 0x8001, 0x0000, 0x0000 }, // 0x00000320
	{ 0x0000, 0x0000, 0x0002, 0x0003, 0x0000, 0x8001, 0x0000, 0x0000 }, // 0x00000330
	{ 0x0000, 0x0004, 0x0003, 0x0002, 0x0000, 0x0000, 0x7FFF, 0xFE70 }, // 0x00000340
	{ 0x0000, 0x0004, 0x0002, 0x0005, 0x0000, 0x0000, 0x7FFF, 0xFE70 }, // 0x00000350
	{ 0x0000, 0x0005, 0x0002, 0x0001, 0x7FFF, 0x0000, 0x0000, 0xFE70 }, // 0x00000360
	{ 0x0000, 0x0005, 0x0001, 0x0006, 0x7FFF, 0x0000, 0x0000, 0xFE70 }, // 0x00000370
	{ 0x0000, 0x0006, 0x0001, 0x0000, 0x0000, 0x0000, 0x8001, 0xFE70 }, // 0x00000380
	{ 0x0000, 0x0006, 0x0000, 0x0007, 0x0000, 0x0000, 0x8001, 0xFE70 }, // 0x00000390
	{ 0x0000, 0x0007, 0x0000, 0x0003, 0x8001, 0x0000, 0x0000, 0xFE70 }, // 0x000003A0
	{ 0x0000, 0x0007, 0x0003, 0x0004, 0x8001, 0x0000, 0x0000, 0xFE70 }, // 0x000003B0
	{ 0x0000, 0x0004, 0x0008, 0x0009, 0x0000, 0x7FFF, 0x0000, 0xFF38 }, // 0x000003C0
	{ 0x0000, 0x0004, 0x0009, 0x0007, 0x0000, 0x7FFF, 0x0000, 0xFF38 }, // 0x000003D0
	{ 0x0000, 0x000A, 0x0006, 0x0007, 0x0000, 0x7FFF, 0x0000, 0xFF38 }, // 0x000003E0
	{ 0x0000, 0x000A, 0x0007, 0x0009, 0x0000, 0x7FFF, 0x0000, 0xFF38 }, // 0x000003F0
	{ 0x0000, 0x0004, 0x0005, 0x000B, 0x0000, 0x7FFF, 0x0000, 0xFF38 }, // 0x00000400
	{ 0x0000, 0x0004, 0x000B, 0x0008, 0x0000, 0x7FFF, 0x0000, 0xFF38 }, // 0x00000410
	{ 0x0000, 0x0005, 0x0006, 0x000A, 0x0000, 0x7FFF, 0x0000, 0xFF38 }, // 0x00000420
	{ 0x0000, 0x0005, 0x000A, 0x000B, 0x0000, 0x7FFF, 0x0000, 0xFF38 }, // 0x00000430
	{ 0x0000, 0x0008, 0x000B, 0x000A, 0x0000, 0x7FFF, 0x0000, 0xFF38 }, // 0x00000440
	{ 0x0000, 0x0008, 0x000A, 0x0009, 0x0000, 0x7FFF, 0x0000, 0xFF38 }, // 0x00000450

}; 

Vec3s g1fliftCol_vtx_00000460[] = {
{ -400, 0, -400 }, // 0x00000460
{ 400, 0, -400 }, // 0x00000466
{ 400, 0, 400 }, // 0x0000046C
{ -400, 0, 400 }, // 0x00000472
{ -400, 200, 400 }, // 0x00000478
{ 400, 200, 400 }, // 0x0000047E
{ 400, 200, -400 }, // 0x00000484
{ -400, 200, -400 }, // 0x0000048A
{ -200, 200, 200 }, // 0x00000490
{ -200, 200, -200 }, // 0x00000496
{ 200, 200, -200 }, // 0x0000049C
{ 200, 200, 200 }, // 0x000004A2

}; 

CollisionHeader g1fliftCol = { -400, 0, -400, 400, 200, 400, 12, g1fliftCol_vtx_00000460, 20, g1fliftCol_polygons_00000320, g1fliftCol_polygonTypes_00000318, &g1fliftCol_camDataList_00000310, 0, 0 }; 

static u32 pad4D4 = 0;
static u32 pad4D8 = 0;
static u32 pad4DC = 0;

u64 object_jya_objTex_0004E0[] = {
#include "assets/objects/object_jya_obj/object_jya_objTex_0004E0.rgb5a1.inc.c"
};

u64 gMeagmiLeftCrumbleTex5[] = {
#include "assets/objects/object_jya_obj/gMeagmiLeftCrumbleTex5.ci4.inc.c"
};

u64 gMeagmiRightCrumbleTex1[] = {
#include "assets/objects/object_jya_obj/gMeagmiRightCrumbleTex1.ci4.inc.c"
};

u64 gMeagmiLeftCrumbleTex1[] = {
#include "assets/objects/object_jya_obj/gMeagmiLeftCrumbleTex1.ci4.inc.c"
};

u64 gMeagmiRightCrumbleTex2[] = {
#include "assets/objects/object_jya_obj/gMeagmiRightCrumbleTex2.ci4.inc.c"
};

u64 gMeagmiRightCrumbleTex3[] = {
#include "assets/objects/object_jya_obj/gMeagmiRightCrumbleTex3.ci4.inc.c"
};

u64 gMeagmiRightCrumbleTex4[] = {
#include "assets/objects/object_jya_obj/gMeagmiRightCrumbleTex4.ci4.inc.c"
};

u64 gMeagmiLeftCrumbleTex2[] = {
#include "assets/objects/object_jya_obj/gMeagmiLeftCrumbleTex2.ci4.inc.c"
};

u64 gMeagmiLeftCrumbleTex3[] = {
#include "assets/objects/object_jya_obj/gMeagmiLeftCrumbleTex3.ci4.inc.c"
};

u64 gMeagmiLeftCrumbleTex4[] = {
#include "assets/objects/object_jya_obj/gMeagmiLeftCrumbleTex4.ci4.inc.c"
};

u64 gMeagmiRightCrumbleTex5[] = {
#include "assets/objects/object_jya_obj/gMeagmiRightCrumbleTex5.ci4.inc.c"
};

Vtx object_jya_objVtx_005500[] = {
    VTX(-48, -877, 252, 1916, 1252, 81, 72, 55, 255),
    VTX(0, -947, -81, 1638, 1338, 81, 72, 55, 255),
    VTX(48, -877, 252, 2048, 1252, 81, 72, 55, 255),
    VTX(-396, -1059, -392, 770, 1478, 213, 206, 192, 255),
    VTX(-660, -853, -758, 30, 1222, 115, 102, 78, 255),
    VTX(-193, -1483, -509, 929, 2004, 100, 89, 67, 255),
    VTX(-199, -1253, -252, 1187, 1718, 177, 164, 138, 255),
    VTX(0, -1518, -488, 1217, 2048, 100, 89, 67, 255),
    VTX(0, -1238, -182, 1533, 1700, 213, 206, 192, 255),
    VTX(-145, -845, -119, 1398, 1212, 134, 119, 89, 255),
    VTX(-48, -877, 252, 1916, 1252, 100, 89, 67, 255),
    VTX(60, -212, 61, 1866, 426, 100, 89, 67, 255),
    VTX(0, 0, 0, 1721, 163, 52, 49, 38, 255),
    VTX(-60, -212, 61, 1701, 426, 100, 89, 67, 255),
    VTX(-48, -877, 252, 1916, 1252, 213, 206, 192, 255),
    VTX(48, -877, 252, 2048, 1252, 213, 206, 192, 255),
    VTX(-163, -594, -105, 1388, 901, 134, 119, 89, 255),
    VTX(0, -947, -81, 1638, 1338, 134, 119, 89, 255),
    VTX(-551, -129, -215, 741, 323, 134, 119, 89, 255),
    VTX(-767, -154, -659, -16, 354, 69, 62, 48, 255),
    VTX(-457, 131, -366, 714, 0, 69, 62, 48, 255),
    VTX(-767, -154, -659, -16, 354, 69, 62, 48, 255),
}; 

Vtx object_jya_objVtx_005660[] = {
    VTX(193, -1483, -509, 929, 2004, 100, 89, 67, 255),
    VTX(660, -853, -758, 30, 1222, 115, 102, 78, 255),
    VTX(396, -1059, -392, 770, 1478, 213, 206, 192, 255),
    VTX(0, -1238, -182, 1533, 1700, 213, 206, 192, 255),
    VTX(0, -1518, -488, 1217, 2048, 100, 89, 67, 255),
    VTX(199, -1253, -252, 1187, 1718, 177, 164, 138, 255),
    VTX(145, -845, -119, 1398, 1212, 134, 119, 89, 255),
    VTX(48, -877, 252, 1916, 1252, 100, 89, 67, 255),
    VTX(0, -947, -81, 1638, 1338, 81, 72, 55, 255),
    VTX(163, -594, -105, 1388, 901, 134, 119, 89, 255),
    VTX(60, -212, 61, 1701, 426, 100, 89, 67, 255),
    VTX(48, -877, 252, 1916, 1252, 213, 206, 192, 255),
    VTX(0, -947, -81, 1638, 1338, 134, 119, 89, 255),
    VTX(551, -129, -215, 741, 323, 134, 119, 89, 255),
    VTX(767, -154, -659, -16, 354, 81, 72, 55, 255),
    VTX(767, -154, -659, -16, 354, 81, 72, 55, 255),
    VTX(457, 131, -366, 714, 0, 69, 62, 48, 255),
    VTX(0, 0, 0, 1721, 163, 52, 49, 38, 255),
}; 

Gfx gMegamiDlist1[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_RGBA16),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadTextureBlock_4b(0x8000000, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, object_jya_objTex_0004E0),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_005500, 22, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 3, 5, 6, 0),
    gsSP2Triangles(5, 7, 6, 0, 9, 3, 6, 0),
    gsSP2Triangles(9, 1, 10, 0, 11, 12, 13, 0),
    gsSP2Triangles(14, 15, 11, 0, 14, 11, 13, 0),
    gsSP2Triangles(14, 13, 16, 0, 9, 14, 16, 0),
    gsSP2Triangles(8, 17, 9, 0, 6, 8, 9, 0),
    gsSP2Triangles(18, 4, 3, 0, 18, 19, 4, 0),
    gsSP2Triangles(18, 3, 9, 0, 16, 13, 18, 0),
    gsSP2Triangles(9, 16, 18, 0, 20, 21, 18, 0),
    gsSP2Triangles(12, 20, 18, 0, 12, 18, 13, 0),
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(0x9000000, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsSPVertex(object_jya_objVtx_005660, 18, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(5, 0, 2, 0, 5, 4, 0, 0),
    gsSP2Triangles(5, 2, 6, 0, 7, 8, 6, 0),
    gsSP2Triangles(9, 10, 11, 0, 9, 11, 6, 0),
    gsSP2Triangles(6, 12, 3, 0, 6, 3, 5, 0),
    gsSP2Triangles(2, 1, 13, 0, 1, 14, 13, 0),
    gsSP2Triangles(6, 2, 13, 0, 13, 10, 9, 0),
    gsSP2Triangles(13, 9, 6, 0, 13, 15, 16, 0),
    gsSP2Triangles(10, 13, 16, 0, 10, 16, 17, 0),
    gsSPEndDisplayList(),
}; 

CamData GMegamiCol_camDataList_00005920[1] = {
	{ 0x0000, 0, 0x00000000 }, // 0x00005920

}; 

u32 GMegamiCol_polygonTypes_00005928[] = {
	 0x00000000, 0x000007C0, 

}; 

RoomPoly GMegamiCol_polygons_00005930[] = {
	{ 0x0000, 0x0000, 0x0001, 0x0002, 0x0000, 0x82BE, 0x1A55, 0xFC72 }, // 0x00005930
	{ 0x0000, 0x0003, 0x0004, 0x0005, 0x9765, 0xC2A1, 0x28E9, 0xFD3E }, // 0x00005940
	{ 0x0000, 0x0006, 0x0007, 0x0008, 0xE919, 0xA318, 0x5503, 0xFCF6 }, // 0x00005950
	{ 0x0000, 0x0003, 0x0005, 0x0006, 0x9D55, 0xC21D, 0x3515, 0xFD71 }, // 0x00005960
	{ 0x0000, 0x0005, 0x0007, 0x0006, 0xE5F4, 0xA251, 0x533C, 0xFCE6 }, // 0x00005970
	{ 0x0000, 0x0009, 0x0003, 0x0006, 0xAAB0, 0xECD2, 0x5D79, 0xFF78 }, // 0x00005980
	{ 0x0000, 0x0009, 0x0001, 0x0000, 0xB4BD, 0x9908, 0x0ACC, 0xFD0D }, // 0x00005990
	{ 0x0000, 0x000A, 0x000B, 0x000C, 0x0000, 0x2365, 0x7B01, 0x0000 }, // 0x000059A0
	{ 0x0000, 0x0000, 0x0002, 0x000A, 0x0000, 0x2356, 0x7B06, 0x0000 }, // 0x000059B0
	{ 0x0000, 0x0000, 0x000A, 0x000C, 0x0000, 0x2356, 0x7B06, 0x0000 }, // 0x000059C0
	{ 0x0000, 0x0000, 0x000C, 0x000D, 0x8993, 0x0B6C, 0x2F33, 0xFFC5 }, // 0x000059D0
	{ 0x0000, 0x0009, 0x0000, 0x000D, 0x845F, 0xF562, 0x1F68, 0xFF4B }, // 0x000059E0
	{ 0x0000, 0x0008, 0x0001, 0x0009, 0xC8C7, 0xDA23, 0x6D16, 0xFF2D }, // 0x000059F0
	{ 0x0000, 0x0006, 0x0008, 0x0009, 0xD934, 0xDEDE, 0x7564, 0xFF66 }, // 0x00005A00
	{ 0x0000, 0x000E, 0x0004, 0x0003, 0x93B1, 0xE244, 0x3D63, 0xFE77 }, // 0x00005A10
	{ 0x0000, 0x000E, 0x000F, 0x0004, 0x8FB4, 0xE6DF, 0x380C, 0xFE61 }, // 0x00005A20
	{ 0x0000, 0x000E, 0x0003, 0x0009, 0xB1E1, 0xE0A1, 0x606A, 0xFF32 }, // 0x00005A30
	{ 0x0000, 0x000D, 0x000C, 0x000E, 0xBF39, 0xE329, 0x6A90, 0xFF7F }, // 0x00005A40
	{ 0x0000, 0x0009, 0x000D, 0x000E, 0xD254, 0xF614, 0x7728, 0xFFFA }, // 0x00005A50
	{ 0x0000, 0x0010, 0x000F, 0x000E, 0x9A94, 0x3F41, 0x2DC7, 0xFED8 }, // 0x00005A60
	{ 0x0000, 0x000B, 0x0010, 0x000E, 0xCB58, 0x483D, 0x5B9B, 0x0000 }, // 0x00005A70
	{ 0x0000, 0x000B, 0x000E, 0x000C, 0xCB67, 0x2DC5, 0x6B56, 0x0000 }, // 0x00005A80
	{ 0x0000, 0x0011, 0x0012, 0x0013, 0x689B, 0xC2A1, 0x28E9, 0xFD3E }, // 0x00005A90
	{ 0x0000, 0x0008, 0x0007, 0x0014, 0x16E7, 0xA318, 0x5503, 0xFCF6 }, // 0x00005AA0
	{ 0x0000, 0x0014, 0x0011, 0x0013, 0x62AB, 0xC21D, 0x3515, 0xFD71 }, // 0x00005AB0
	{ 0x0000, 0x0014, 0x0007, 0x0011, 0x1A0C, 0xA251, 0x533C, 0xFCE6 }, // 0x00005AC0
	{ 0x0000, 0x0014, 0x0013, 0x0015, 0x5550, 0xECD2, 0x5D79, 0xFF78 }, // 0x00005AD0
	{ 0x0000, 0x0002, 0x0001, 0x0015, 0x4B43, 0x9908, 0x0ACC, 0xFD0D }, // 0x00005AE0
	{ 0x0000, 0x0016, 0x000A, 0x0002, 0x766D, 0x0B6C, 0x2F33, 0xFFC5 }, // 0x00005AF0
	{ 0x0000, 0x0016, 0x0002, 0x0015, 0x7BA1, 0xF562, 0x1F68, 0xFF4B }, // 0x00005B00
	{ 0x0000, 0x0015, 0x0001, 0x0008, 0x3739, 0xDA23, 0x6D16, 0xFF2D }, // 0x00005B10
	{ 0x0000, 0x0015, 0x0008, 0x0014, 0x26CC, 0xDEDE, 0x7564, 0xFF66 }, // 0x00005B20
	{ 0x0000, 0x0013, 0x0012, 0x0017, 0x6C4F, 0xE244, 0x3D63, 0xFE77 }, // 0x00005B30
	{ 0x0000, 0x0012, 0x0018, 0x0017, 0x704C, 0xE6DF, 0x380C, 0xFE61 }, // 0x00005B40
	{ 0x0000, 0x0015, 0x0013, 0x0017, 0x4E1F, 0xE0A1, 0x606A, 0xFF32 }, // 0x00005B50
	{ 0x0000, 0x0017, 0x000A, 0x0016, 0x40C7, 0xE329, 0x6A90, 0xFF7F }, // 0x00005B60
	{ 0x0000, 0x0017, 0x0016, 0x0015, 0x2DAC, 0xF614, 0x7728, 0xFFFA }, // 0x00005B70
	{ 0x0000, 0x0017, 0x0018, 0x0019, 0x656C, 0x3F41, 0x2DC7, 0xFED8 }, // 0x00005B80
	{ 0x0000, 0x000A, 0x0017, 0x0019, 0x2A76, 0x47C1, 0x611E, 0x0035 }, // 0x00005B90
	{ 0x0000, 0x000A, 0x0019, 0x000B, 0x41DB, 0x2F28, 0x631C, 0x0000 }, // 0x00005BA0

}; 

Vec3s GMegamiCol_vtx_00005BB0[] = {
{ -48, -877, 252 }, // 0x00005BB0
{ 0, -947, -81 }, // 0x00005BB6
{ 48, -877, 252 }, // 0x00005BBC
{ -396, -1059, -392 }, // 0x00005BC2
{ -660, -853, -758 }, // 0x00005BC8
{ -193, -1483, -509 }, // 0x00005BCE
{ -199, -1253, -252 }, // 0x00005BD4
{ 0, -1518, -488 }, // 0x00005BDA
{ 0, -1238, -182 }, // 0x00005BE0
{ -145, -845, -119 }, // 0x00005BE6
{ 60, -212, 61 }, // 0x00005BEC
{ 0, 0, 0 }, // 0x00005BF2
{ -60, -212, 61 }, // 0x00005BF8
{ -163, -594, -105 }, // 0x00005BFE
{ -551, -129, -215 }, // 0x00005C04
{ -767, -154, -659 }, // 0x00005C0A
{ -457, 131, -366 }, // 0x00005C10
{ 193, -1483, -509 }, // 0x00005C16
{ 660, -853, -758 }, // 0x00005C1C
{ 396, -1059, -392 }, // 0x00005C22
{ 199, -1253, -252 }, // 0x00005C28
{ 145, -845, -119 }, // 0x00005C2E
{ 163, -594, -105 }, // 0x00005C34
{ 551, -129, -215 }, // 0x00005C3A
{ 767, -154, -659 }, // 0x00005C40
{ 457, 131, -366 }, // 0x00005C46

}; 

CollisionHeader GMegamiCol = { -767, -1518, -758, 767, 131, 252, 26, GMegamiCol_vtx_00005BB0, 40, GMegamiCol_polygons_00005930, GMegamiCol_polygonTypes_00005928, &GMegamiCol_camDataList_00005920, 0, 0 }; 

static u32 pad5C78 = 0;
static u32 pad5C7C = 0;

u64 gMegamiPalette1[] = {
#include "assets/objects/object_jya_obj/gMegamiPalette1.rgb5a1.inc.c"
};

u64 gMegamiPalette4[] = {
#include "assets/objects/object_jya_obj/gMegamiPalette4.rgb5a1.inc.c"
};

static u8 unaccounted_005CC0[40] = {
    0x92, 0x8D, 0x59, 0x47, 0x51, 0x87, 0x59, 0x49, 0x51, 0x85, 0x49, 0x45, 0x8A, 0x4B, 0x7A, 0x49, 
    0x59, 0x07, 0x50, 0xC5, 0x7A, 0x89, 0x49, 0x47, 0x69, 0x87, 0x8A, 0x89, 0x41, 0x05, 0x49, 0x07, 
    0x82, 0x49, 0x38, 0x81, 0x92, 0x8F, 0x00, 0x01, 
}; 

u64 gMegamiTex1[] = {
#include "assets/objects/object_jya_obj/gMegamiTex1.ci4.inc.c"
};

u64 gMegamiTex3[] = {
#include "assets/objects/object_jya_obj/gMegamiTex3.ci4.inc.c"
};

u64 gMegamiPalette3[] = {
#include "assets/objects/object_jya_obj/gMegamiPalette3.rgb5a1.inc.c"
};

static u8 unaccounted_006EE8[512] = {
    0x01, 0x01, 0x00, 0x00, 0x01, 0x02, 0x05, 0x07, 0x0B, 0x0B, 0x03, 0x02, 0x00, 0x09, 0x01, 0x07, 
    0x18, 0x00, 0x06, 0x01, 0x00, 0x0F, 0x01, 0x03, 0x0B, 0x0E, 0x03, 0x00, 0x07, 0x0A, 0x03, 0x00, 
    0x05, 0x02, 0x01, 0x00, 0x00, 0x02, 0x06, 0x02, 0x09, 0x00, 0x00, 0x05, 0x02, 0x06, 0x04, 0x05, 
    0x01, 0x15, 0x06, 0x04, 0x0D, 0x02, 0x00, 0x01, 0x06, 0x0B, 0x0A, 0x00, 0x07, 0x00, 0x03, 0x01, 
    0x01, 0x00, 0x02, 0x02, 0x04, 0x04, 0x02, 0x08, 0x02, 0x09, 0x00, 0x01, 0x0C, 0x08, 0x06, 0x00, 
    0x06, 0x08, 0x15, 0x02, 0x13, 0x04, 0x00, 0x02, 0x02, 0x09, 0x09, 0x01, 0x05, 0x02, 0x00, 0x0F, 
    0x01, 0x01, 0x00, 0x04, 0x02, 0x02, 0x00, 0x01, 0x03, 0x01, 0x04, 0x04, 0x01, 0x01, 0x00, 0x00, 
    0x0D, 0x04, 0x05, 0x0D, 0x04, 0x01, 0x05, 0x01, 0x05, 0x00, 0x04, 0x02, 0x03, 0x00, 0x00, 0x06, 
    0x11, 0x00, 0x02, 0x01, 0x01, 0x04, 0x07, 0x00, 0x03, 0x0E, 0x03, 0x03, 0x07, 0x05, 0x01, 0x06, 
    0x06, 0x07, 0x01, 0x06, 0x05, 0x00, 0x03, 0x01, 0x01, 0x01, 0x05, 0x04, 0x00, 0x01, 0x05, 0x09, 
    0x0F, 0x08, 0x06, 0x01, 0x06, 0x00, 0x05, 0x03, 0x05, 0x05, 0x0A, 0x00, 0x01, 0x0C, 0x07, 0x14, 
    0x05, 0x06, 0x00, 0x00, 0x04, 0x00, 0x0B, 0x03, 0x01, 0x03, 0x13, 0x01, 0x06, 0x0F, 0x08, 0x01, 
    0x01, 0x01, 0x0C, 0x00, 0x04, 0x00, 0x01, 0x01, 0x07, 0x06, 0x00, 0x00, 0x02, 0x08, 0x12, 0x06, 
    0x01, 0x02, 0x06, 0x02, 0x00, 0x01, 0x00, 0x07, 0x0F, 0x06, 0x01, 0x01, 0x00, 0x01, 0x02, 0x00, 
    0x0C, 0x0B, 0x01, 0x04, 0x02, 0x03, 0x07, 0x0A, 0x05, 0x08, 0x04, 0x04, 0x06, 0x02, 0x04, 0x08, 
    0x00, 0x00, 0x04, 0x06, 0x0D, 0x07, 0x00, 0x03, 0x05, 0x08, 0x07, 0x06, 0x00, 0x05, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x03, 0x03, 0x1D, 0x0B, 0x01, 0x07, 0x01, 0x07, 0x0C, 0x0B, 0x02, 0x0B, 0x01, 
    0x03, 0x0A, 0x01, 0x04, 0x02, 0x02, 0x00, 0x05, 0x01, 0x09, 0x02, 0x01, 0x05, 0x00, 0x05, 0x01, 
    0x0E, 0x00, 0x00, 0x0E, 0x0B, 0x00, 0x0E, 0x03, 0x0E, 0x01, 0x00, 0x10, 0x0E, 0x03, 0x02, 0x0F, 
    0x22, 0x0B, 0x0A, 0x03, 0x04, 0x04, 0x0F, 0x01, 0x05, 0x09, 0x04, 0x0C, 0x04, 0x02, 0x09, 0x01, 
    0x03, 0x03, 0x01, 0x0A, 0x03, 0x07, 0x00, 0x01, 0x0A, 0x1A, 0x01, 0x1A, 0x0A, 0x10, 0x0C, 0x0D, 
    0x01, 0x10, 0x0E, 0x0A, 0x03, 0x03, 0x02, 0x00, 0x16, 0x10, 0x09, 0x01, 0x03, 0x04, 0x0C, 0x05, 
    0x12, 0x00, 0x07, 0x01, 0x03, 0x0B, 0x0B, 0x07, 0x03, 0x01, 0x05, 0x02, 0x03, 0x0E, 0x08, 0x13, 
    0x0F, 0x03, 0x00, 0x07, 0x03, 0x0A, 0x03, 0x0C, 0x01, 0x01, 0x1D, 0x01, 0x01, 0x0A, 0x16, 0x0C, 
    0x0A, 0x00, 0x06, 0x02, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x02, 0x01, 0x06, 0x1B, 0x0F, 
    0x04, 0x06, 0x00, 0x05, 0x05, 0x00, 0x00, 0x04, 0x04, 0x05, 0x00, 0x02, 0x09, 0x00, 0x0F, 0x01, 
    0x02, 0x03, 0x12, 0x02, 0x08, 0x07, 0x01, 0x00, 0x04, 0x09, 0x01, 0x00, 0x04, 0x12, 0x08, 0x08, 
    0x02, 0x02, 0x02, 0x09, 0x05, 0x00, 0x02, 0x04, 0x0C, 0x04, 0x04, 0x01, 0x08, 0x08, 0x05, 0x00, 
    0x0C, 0x01, 0x0A, 0x0B, 0x11, 0x06, 0x04, 0x03, 0x01, 0x0C, 0x04, 0x00, 0x01, 0x08, 0x02, 0x00, 
    0x00, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x00, 0x05, 0x07, 0x05, 0x02, 0x07, 0x00, 0x04, 0x05, 
    0x03, 0x01, 0x01, 0x03, 0x07, 0x02, 0x12, 0x10, 0x01, 0x01, 0x0B, 0x00, 0x02, 0x0C, 0x00, 0x00, 
    0x01, 0x05, 0x0F, 0x00, 0x05, 0x00, 0x01, 0x01, 0x00, 0x01, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 
}; 

Vtx object_jya_objVtx_0070E8[] = {
    VTX(-366, 105, -292, 916, 33, 52, 49, 38, 255),
    VTX(-457, 131, -366, 714, 0, 52, 49, 38, 255),
    VTX(-551, -129, -215, 741, 323, 115, 102, 78, 255),
    VTX(-354, -162, -105, 1125, 364, 115, 102, 78, 255),
    VTX(-767, -154, -659, -16, 354, 52, 49, 38, 255),
    VTX(-454, -245, -188, 903, 468, 134, 119, 89, 255),
    VTX(-470, -272, -196, 872, 501, 134, 119, 89, 255),
    VTX(-489, -501, -286, 753, 785, 158, 142, 111, 255),
    VTX(-767, -154, -659, -16, 354, 52, 49, 38, 255),
    VTX(-724, -433, -699, 2, 701, 134, 119, 89, 255),
    VTX(-616, -563, -541, 314, 862, 158, 142, 111, 255),
}; 

Vtx object_jya_objVtx_007198[] = {
    VTX(-457, 131, -366, -2551, 1024, 81, 72, 55, 255),
    VTX(-366, -177, -510, -1563, 2467, 81, 72, 55, 255),
    VTX(-767, -154, -659, 0, 1024, 81, 72, 55, 255),
    VTX(-457, 131, -366, -1749, 1024, 81, 72, 55, 255),
    VTX(-384, 131, -366, -1655, 1374, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 81, 72, 55, 255),
    VTX(-366, -177, -510, -2128, 1024, 81, 72, 55, 255),
    VTX(-501, -496, -639, -1361, 2695, 81, 72, 55, 255),
    VTX(-767, -154, -659, 0, 1024, 81, 72, 55, 255),
    VTX(-501, -496, -639, 431, 2132, 81, 72, 55, 255),
    VTX(-724, -433, -699, 0, 1024, 81, 72, 55, 255),
    VTX(-767, -154, -659, -1418, 1024, 81, 72, 55, 255),
    VTX(-384, 131, -366, -1692, 1024, 81, 72, 55, 255),
    VTX(-366, 105, -292, -1723, 1419, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 134, 119, 89, 255),
    VTX(-724, -433, -699, -904, 1875, 81, 72, 55, 255),
    VTX(-501, -496, -639, 284, 1875, 81, 72, 55, 255),
    VTX(-616, -563, -541, -41, 1119, 81, 72, 55, 255),
    VTX(-616, -563, -541, -474, 1697, 81, 72, 55, 255),
    VTX(-501, -496, -639, 0, 1024, 81, 72, 55, 255),
    VTX(-489, -501, -286, -1756, 1024, 81, 72, 55, 255),
    VTX(-501, -496, -639, 0, 1024, 81, 72, 55, 255),
    VTX(-366, -177, -510, -1838, 1024, 134, 119, 89, 255),
    VTX(-489, -501, -286, -615, 2669, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 134, 119, 89, 255),
    VTX(-470, -272, -196, -1709, 1024, 81, 72, 55, 255),
    VTX(-489, -501, -286, -1645, 2247, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 134, 119, 89, 255),
    VTX(-454, -245, -188, -1693, 1024, 81, 72, 55, 255),
    VTX(-470, -272, -196, -1702, 1185, 81, 72, 55, 255),
    VTX(-454, -245, -188, -1574, 1648, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 134, 119, 89, 255),
    VTX(-354, -162, -105, -2014, 1024, 81, 72, 55, 255),
    VTX(-354, -162, -105, -1287, 2573, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 134, 119, 89, 255),
    VTX(-366, 105, -292, -1768, 1024, 81, 72, 55, 255),
    VTX(-366, 105, -292, 92, 1410, 81, 72, 55, 255),
    VTX(-384, 131, -366, 0, 1024, 81, 72, 55, 255),
    VTX(-457, 131, -366, -362, 1024, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_007408[] = {
    VTX(60, -212, 61, 1866, 426, 115, 102, 78, 255),
    VTX(0, 0, 0, 1721, 163, 52, 49, 38, 255),
    VTX(-60, -212, 61, 1701, 426, 115, 102, 78, 255),
    VTX(-58, -315, 91, 1735, 554, 147, 131, 97, 255),
    VTX(-85, -304, 20, 1625, 541, 115, 102, 78, 255),
    VTX(57, -378, 109, 1912, 632, 147, 131, 97, 255),
    VTX(-354, -162, -105, 1125, 364, 115, 102, 78, 255),
    VTX(-366, 105, -292, 916, 33, 52, 49, 38, 255),
}; 

Vtx object_jya_objVtx_007488[] = {
    VTX(158, -195, 6, 1509, 405, 115, 102, 78, 255),
    VTX(183, 53, -146, 1318, 98, 52, 49, 38, 255),
    VTX(0, 0, 0, 1721, 163, 52, 49, 38, 255),
    VTX(60, -212, 61, 1701, 426, 115, 102, 78, 255),
    VTX(86, -307, 19, 1623, 544, 134, 119, 89, 255),
    VTX(57, -378, 109, 1755, 632, 147, 131, 97, 255),
}; 

Vtx object_jya_objVtx_0074E8[] = {
    VTX(57, -378, 109, -377, 456, 81, 72, 55, 255),
    VTX(-58, -315, 91, -47, 1024, 147, 131, 97, 255),
    VTX(-85, -304, 20, 330, 1024, 115, 102, 78, 255),
    VTX(76, -219, -404, 0, 1024, 134, 119, 89, 255),
    VTX(57, -378, 109, -2666, 1024, 81, 72, 55, 255),
    VTX(-85, -304, 20, -2166, 1780, 81, 72, 55, 255),
    VTX(-85, -304, 20, -3048, 1024, 81, 72, 55, 255),
    VTX(-354, -162, -105, -1750, 2021, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 81, 72, 55, 255),
    VTX(76, -219, -404, -2270, 1024, 134, 119, 89, 255),
    VTX(-85, -304, 20, -2022, 3304, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 81, 72, 55, 255),
    VTX(-384, 131, -366, -1692, 1024, 81, 72, 55, 255),
    VTX(176, -93, -382, -505, 3776, 81, 72, 55, 255),
    VTX(-384, 131, -366, -2997, 1024, 81, 72, 55, 255),
    VTX(188, 131, -366, -359, 2081, 81, 72, 55, 255),
    VTX(176, -93, -382, 0, 1024, 81, 72, 55, 255),
    VTX(176, -93, -382, -301, 2099, 134, 119, 89, 255),
    VTX(188, 131, -366, 0, 1024, 81, 72, 55, 255),
    VTX(183, 53, -146, -1158, 1024, 81, 72, 55, 255),
    VTX(158, -195, 6, -1369, 2471, 81, 72, 55, 255),
    VTX(176, -93, -382, 0, 1024, 134, 119, 89, 255),
    VTX(183, 53, -146, -1375, 1024, 81, 72, 55, 255),
    VTX(0, 0, 0, -937, 134, 81, 72, 55, 255),
    VTX(183, 53, -146, -145, 1024, 81, 72, 55, 255),
    VTX(188, 131, -366, 1013, 1024, 81, 72, 55, 255),
    VTX(188, 131, -366, 0, 1024, 81, 72, 55, 255),
    VTX(-366, 105, -292, -2777, 1024, 81, 72, 55, 255),
    VTX(0, 0, 0, -1193, 2805, 81, 72, 55, 255),
    VTX(188, 131, -366, -657, 3789, 81, 72, 55, 255),
    VTX(-384, 131, -366, 0, 1024, 81, 72, 55, 255),
    VTX(-366, 105, -292, -397, 1024, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 134, 119, 89, 255),
    VTX(-366, 105, -292, -1768, 1024, 81, 72, 55, 255),
    VTX(-384, 131, -366, -1649, 1402, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 134, 119, 89, 255),
    VTX(-354, -162, -105, -2014, 1024, 81, 72, 55, 255),
    VTX(-366, 105, -292, -1130, 2384, 81, 72, 55, 255),
    VTX(76, -219, -404, 0, 1024, 134, 119, 89, 255),
    VTX(158, -195, 6, -2077, 1024, 81, 72, 55, 255),
    VTX(86, -307, 19, -2041, 1690, 81, 72, 55, 255),
    VTX(76, -219, -404, 0, 1024, 134, 119, 89, 255),
    VTX(176, -93, -382, -808, 1024, 134, 119, 89, 255),
    VTX(158, -195, 6, -619, 3007, 81, 72, 55, 255),
    VTX(76, -219, -404, 0, 1024, 134, 119, 89, 255),
    VTX(86, -307, 19, -2147, 1024, 81, 72, 55, 255),
    VTX(57, -378, 109, -2650, 1320, 81, 72, 55, 255),
    VTX(-366, -177, -510, -2270, 1024, 81, 72, 55, 255),
    VTX(176, -93, -382, 446, 1698, 81, 72, 55, 255),
    VTX(76, -219, -404, 0, 1024, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_007818[] = {
    VTX(499, -439, -274, 751, 708, 158, 142, 111, 255),
    VTX(551, -129, -215, 741, 323, 134, 119, 89, 255),
    VTX(389, -415, -177, 1004, 679, 134, 119, 89, 255),
    VTX(158, -195, 6, 1509, 405, 115, 102, 78, 255),
    VTX(86, -307, 19, 1623, 544, 134, 119, 89, 255),
    VTX(318, -408, -149, 1129, 670, 134, 119, 89, 255),
    VTX(612, -11, -512, 349, 177, 69, 62, 48, 255),
    VTX(457, 131, -366, 714, 0, 52, 49, 38, 255),
    VTX(183, 53, -146, 1318, 98, 52, 49, 38, 255),
}; 

Vtx object_jya_objVtx_0078A8[] = {
    VTX(499, -439, -274, -1481, 1859, 81, 72, 55, 255),
    VTX(440, -538, -596, 0, 1024, 81, 72, 55, 255),
    VTX(551, -129, -215, -2831, 1024, 81, 72, 55, 255),
    VTX(457, 131, -366, 30, 2360, 81, 72, 55, 255),
    VTX(176, -93, -382, 1113, 939, 81, 72, 55, 255),
    VTX(188, 131, -366, 0, 1024, 81, 72, 55, 255),
    VTX(457, 131, -366, -3040, 2792, 81, 72, 55, 255),
    VTX(440, -538, -596, 0, 1024, 81, 72, 55, 255),
    VTX(176, -93, -382, -2782, 1024, 81, 72, 55, 255),
    VTX(440, -538, -596, 0, 1024, 81, 72, 55, 255),
    VTX(197, -429, -476, -1450, 1024, 81, 72, 55, 255),
    VTX(176, -93, -382, -2354, 2506, 81, 72, 55, 255),
    VTX(197, -429, -476, 0, 1024, 81, 72, 55, 255),
    VTX(76, -219, -404, -1253, 1024, 81, 72, 55, 255),
    VTX(176, -93, -382, -1569, 1768, 81, 72, 55, 255),
    VTX(457, 131, -366, -3516, 1024, 81, 72, 55, 255),
    VTX(612, -11, -512, -2628, 1939, 69, 62, 48, 255),
    VTX(440, -538, -596, 0, 1024, 81, 72, 55, 255),
    VTX(551, -129, -215, -1266, 2030, 81, 72, 55, 255),
    VTX(440, -538, -596, 1103, 3579, 81, 72, 55, 255),
    VTX(612, -11, -512, 0, 1024, 81, 72, 55, 255),
    VTX(197, -429, -476, -511, 2380, 134, 119, 89, 255),
    VTX(440, -538, -596, 0, 1024, 81, 72, 55, 255),
    VTX(499, -439, -274, -1700, 1024, 81, 72, 55, 255),
    VTX(197, -429, -476, 0, 1024, 134, 119, 89, 255),
    VTX(499, -439, -274, -1804, 1024, 81, 72, 55, 255),
    VTX(389, -415, -177, -1612, 1741, 81, 72, 55, 255),
    VTX(197, -429, -476, 0, 1024, 134, 119, 89, 255),
    VTX(389, -415, -177, -1764, 1024, 81, 72, 55, 255),
    VTX(318, -408, -149, -1691, 1395, 81, 72, 55, 255),
    VTX(197, -429, -476, -1253, 1024, 134, 119, 89, 255),
    VTX(318, -408, -149, -993, 2736, 81, 72, 55, 255),
    VTX(76, -219, -404, 0, 1024, 81, 72, 55, 255),
    VTX(318, -408, -149, -1979, 1024, 81, 72, 55, 255),
    VTX(86, -307, 19, -1578, 2480, 81, 72, 55, 255),
    VTX(76, -219, -404, 0, 1024, 81, 72, 55, 255),
    VTX(86, -307, 19, -2147, 1024, 81, 72, 55, 255),
    VTX(176, -93, -382, 10, 1832, 134, 119, 89, 255),
    VTX(76, -219, -404, 0, 1024, 81, 72, 55, 255),
    VTX(86, -307, 19, -2303, 1024, 81, 72, 55, 255),
    VTX(158, -195, 6, -1916, 1567, 81, 72, 55, 255),
    VTX(176, -93, -382, 0, 1024, 134, 119, 89, 255),
    VTX(176, -93, -382, -1375, 1024, 134, 119, 89, 255),
    VTX(158, -195, 6, -6, 2471, 81, 72, 55, 255),
    VTX(183, 53, -146, 0, 1024, 81, 72, 55, 255),
    VTX(183, 53, -146, -145, 1024, 81, 72, 55, 255),
    VTX(188, 131, -366, 1013, 1024, 81, 72, 55, 255),
    VTX(176, -93, -382, 712, -51, 134, 119, 89, 255),
    VTX(457, 131, -366, 4, 1191, 81, 72, 55, 255),
    VTX(188, 131, -366, -26, 2527, 81, 72, 55, 255),
    VTX(183, 53, -146, 1130, 2579, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_007BD8[] = {
    VTX(-163, -594, -105, 1388, 901, 134, 119, 89, 255),
    VTX(-354, -162, -105, 1125, 364, 115, 102, 78, 255),
    VTX(-454, -245, -188, 903, 468, 134, 119, 89, 255),
    VTX(-470, -272, -196, 872, 501, 134, 119, 89, 255),
    VTX(-275, -616, -150, 1188, 928, 134, 119, 89, 255),
    VTX(-352, -639, -219, 1011, 956, 158, 142, 111, 255),
    VTX(-489, -501, -286, 753, 785, 158, 142, 111, 255),
    VTX(57, -378, 109, 1912, 632, 147, 131, 97, 255),
    VTX(-58, -315, 91, 1735, 554, 147, 131, 97, 255),
    VTX(-54, -544, 157, 1809, 839, 169, 154, 126, 255),
    VTX(-85, -304, 20, 1625, 541, 115, 102, 78, 255),
}; 

Vtx object_jya_objVtx_007C88[] = {
    VTX(-366, -177, -510, -2270, 1024, 69, 62, 48, 255),
    VTX(-85, -304, 20, -247, 3304, 115, 102, 78, 255),
    VTX(76, -219, -404, 0, 1024, 134, 119, 89, 255),
    VTX(-366, -177, -510, 0, 1024, 69, 62, 48, 255),
    VTX(-354, -162, -105, -2014, 1024, 69, 62, 48, 255),
    VTX(-85, -304, 20, -2648, 2532, 115, 102, 78, 255),
    VTX(-85, -304, 20, -2294, 1024, 115, 102, 78, 255),
    VTX(57, -378, 109, -2517, 1903, 81, 72, 55, 255),
    VTX(76, -219, -404, 0, 1024, 134, 119, 89, 255),
    VTX(-85, -304, 20, 0, 1024, 115, 102, 78, 255),
    VTX(-58, -315, 91, -377, 1024, 147, 131, 97, 255),
    VTX(57, -378, 109, -707, 1592, 81, 72, 55, 255),
    VTX(-366, -177, -510, -1838, 1024, 81, 72, 55, 255),
    VTX(-318, -573, -560, -139, 2078, 81, 72, 55, 255),
    VTX(-501, -496, -639, 0, 1024, 81, 72, 55, 255),
    VTX(-366, -177, -510, -2000, 1024, 81, 72, 55, 255),
    VTX(-46, -518, -433, -186, 2530, 81, 72, 55, 255),
    VTX(-318, -573, -560, 0, 1024, 81, 72, 55, 255),
    VTX(-489, -501, -286, -1601, 1745, 81, 72, 55, 255),
    VTX(-352, -639, -219, -2325, 1024, 81, 72, 55, 255),
    VTX(-501, -496, -639, 0, 1024, 81, 72, 55, 255),
    VTX(-318, -573, -560, -1063, 1024, 81, 72, 55, 255),
    VTX(-352, -639, -219, -1665, 2647, 81, 72, 55, 255),
    VTX(-318, -573, -560, 0, 1024, 81, 72, 55, 255),
    VTX(-46, -518, -433, -1517, 1024, 134, 119, 89, 255),
    VTX(-352, -639, -219, -498, 2682, 81, 72, 55, 255),
    VTX(-352, -639, -219, -1874, 1549, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(-275, -616, -150, -1873, 1024, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(-163, -594, -105, -1766, 1024, 81, 72, 55, 255),
    VTX(-275, -616, -150, -1770, 1634, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_007E88[] = {
    VTX(-54, -544, 157, -2929, 1024, 81, 72, 55, 255),
    VTX(-163, -594, -105, -1648, 1659, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(57, -378, 109, -2824, 1024, 81, 72, 55, 255),
    VTX(-54, -544, 157, -2747, 2042, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 134, 119, 89, 255),
    VTX(-454, -245, -188, -1693, 1024, 81, 72, 55, 255),
    VTX(-354, -162, -105, -1872, 1766, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 134, 119, 89, 255),
    VTX(-470, -272, -196, -1709, 1024, 81, 72, 55, 255),
    VTX(-454, -245, -188, -1686, 1183, 81, 72, 55, 255),
    VTX(-489, -501, -286, -2050, 1024, 81, 72, 55, 255),
    VTX(-470, -272, -196, -1372, 2044, 81, 72, 55, 255),
    VTX(-366, -177, -510, 0, 1024, 134, 119, 89, 255),
    VTX(-366, -177, -510, -644, 2746, 134, 119, 89, 255),
    VTX(-501, -496, -639, 0, 1024, 81, 72, 55, 255),
    VTX(-489, -501, -286, -1756, 1024, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(76, -219, -404, -1611, 1024, 134, 119, 89, 255),
    VTX(57, -378, 109, -1073, 3636, 81, 72, 55, 255),
    VTX(-366, -177, -510, -2357, 1024, 81, 72, 55, 255),
    VTX(76, -219, -404, -636, 2504, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_007FF8[] = {
    VTX(-489, -501, -286, 753, 785, 158, 142, 111, 255),
    VTX(-396, -1059, -392, 770, 1478, 203, 195, 178, 255),
    VTX(-352, -639, -219, 1011, 956, 158, 142, 111, 255),
    VTX(-271, -952, -256, 1084, 1345, 189, 178, 157, 255),
    VTX(-724, -433, -699, 2, 701, 134, 119, 89, 255),
    VTX(-660, -853, -758, 30, 1222, 115, 102, 78, 255),
    VTX(-616, -563, -541, 314, 862, 158, 142, 111, 255),
    VTX(-426, -1168, -634, 479, 1613, 115, 102, 78, 255),
}; 

Vtx object_jya_objVtx_008078[] = {
    VTX(-426, -1168, -634, -2712, 2999, 81, 72, 55, 255),
    VTX(-501, -496, -639, 0, 1024, 81, 72, 55, 255),
    VTX(-176, -893, -490, -2652, 1024, 81, 72, 55, 255),
    VTX(-426, -1168, -634, 1620, 2268, 81, 72, 55, 255),
    VTX(-660, -853, -758, 0, 1024, 81, 72, 55, 255),
    VTX(-724, -433, -699, -2126, 1024, 81, 72, 55, 255),
    VTX(-426, -1168, -634, -2415, 4147, 81, 72, 55, 255),
    VTX(-724, -433, -699, 0, 1024, 81, 72, 55, 255),
    VTX(-501, -496, -639, -1189, 1024, 81, 72, 55, 255),
    VTX(-176, -893, -490, -1976, 1024, 134, 119, 89, 255),
    VTX(-396, -1059, -392, -899, 1996, 81, 72, 55, 255),
    VTX(-426, -1168, -634, 0, 1024, 81, 72, 55, 255),
    VTX(-176, -893, -490, 0, 1024, 134, 119, 89, 255),
    VTX(-271, -952, -256, -1290, 1024, 81, 72, 55, 255),
    VTX(-396, -1059, -392, -1023, 2053, 81, 72, 55, 255),
    VTX(-176, -893, -490, 0, 1024, 134, 119, 89, 255),
    VTX(-352, -639, -219, -2042, 1024, 81, 72, 55, 255),
    VTX(-271, -952, -256, -788, 2045, 81, 72, 55, 255),
    VTX(-176, -893, -490, -567, 2702, 134, 119, 89, 255),
    VTX(-318, -573, -560, 0, 1024, 81, 72, 55, 255),
    VTX(-352, -639, -219, -1731, 1024, 81, 72, 55, 255),
    VTX(-352, -639, -219, -2120, 1979, 81, 72, 55, 255),
    VTX(-501, -496, -639, 0, 1024, 134, 119, 89, 255),
    VTX(-489, -501, -286, -1756, 1024, 81, 72, 55, 255),
    VTX(-501, -496, -639, 0, 1024, 134, 119, 89, 255),
    VTX(-616, -563, -541, -823, 1024, 81, 72, 55, 255),
    VTX(-489, -501, -286, -1012, 2460, 81, 72, 55, 255),
    VTX(-724, -433, -699, -149, 1024, 81, 72, 55, 255),
    VTX(-616, -563, -541, 715, 1780, 81, 72, 55, 255),
    VTX(-501, -496, -639, 1040, 1024, 134, 119, 89, 255),
    VTX(-352, -639, -219, -2325, 1024, 81, 72, 55, 255),
    VTX(-318, -573, -560, -761, 1766, 69, 62, 48, 255),
    VTX(-501, -496, -639, 0, 1024, 134, 119, 89, 255),
    VTX(-501, -496, -639, 781, 1745, 81, 72, 55, 255),
    VTX(-318, -573, -560, 0, 1024, 81, 72, 55, 255),
    VTX(-176, -893, -490, -1771, 1024, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_0082B8[] = {
    VTX(0, -947, -81, 1638, 1338, 134, 119, 89, 255),
    VTX(-145, -845, -119, 1398, 1212, 134, 119, 89, 255),
    VTX(-87, -1002, -144, 1452, 1408, 169, 154, 126, 255),
    VTX(-163, -981, -163, 1328, 1381, 158, 142, 111, 255),
    VTX(-271, -952, -256, 1084, 1345, 189, 178, 157, 255),
    VTX(0, -947, -81, 1638, 1338, 81, 72, 55, 255),
    VTX(-48, -877, 252, 1916, 1252, 100, 89, 67, 255),
    VTX(-48, -877, 252, 1916, 1252, 81, 72, 55, 255),
    VTX(48, -877, 252, 2048, 1252, 81, 72, 55, 255),
    VTX(-352, -639, -219, 1011, 956, 158, 142, 111, 255),
    VTX(-275, -616, -150, 1188, 928, 134, 119, 89, 255),
    VTX(-163, -594, -105, 1388, 901, 134, 119, 89, 255),
    VTX(-48, -877, 252, 1916, 1252, 213, 206, 192, 255),
    VTX(-54, -544, 157, 1809, 839, 169, 154, 126, 255),
    VTX(53, -627, 181, 1980, 942, 169, 154, 126, 255),
    VTX(48, -877, 252, 2048, 1252, 213, 206, 192, 255),
}; 

Vtx object_jya_objVtx_0083B8[] = {
    VTX(53, -627, 181, 1835, 942, 169, 154, 126, 255),
    VTX(48, -877, 252, 1916, 1252, 213, 206, 192, 255),
    VTX(105, -735, 74, 1652, 1076, 169, 154, 126, 255),
    VTX(145, -845, -119, 1398, 1212, 134, 119, 89, 255),
    VTX(48, -877, 252, 1916, 1252, 100, 89, 67, 255),
    VTX(0, -947, -81, 1638, 1338, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_008418[] = {
    VTX(145, -845, -119, -307, 1024, 81, 72, 55, 255),
    VTX(130, -699, -459, 942, 2375, 69, 62, 48, 255),
    VTX(-46, -518, -433, 2030, 1735, 134, 119, 89, 255),
    VTX(-352, -639, -219, -1247, 2641, 81, 72, 55, 255),
    VTX(-176, -893, -490, 0, 1024, 81, 72, 55, 255),
    VTX(-271, -952, -256, -1290, 1024, 81, 72, 55, 255),
    VTX(-352, -639, -219, -554, 2664, 81, 72, 55, 255),
    VTX(-318, -573, -560, 0, 1024, 134, 119, 89, 255),
    VTX(-176, -893, -490, -1771, 1024, 81, 72, 55, 255),
    VTX(-352, -639, -219, -1731, 1024, 81, 72, 55, 255),
    VTX(-46, -518, -433, -436, 2477, 134, 119, 89, 255),
    VTX(-318, -573, -560, 0, 1024, 134, 119, 89, 255),
    VTX(-46, -518, -433, 938, 554, 81, 72, 55, 255),
    VTX(130, -699, -459, -151, 1193, 81, 72, 55, 255),
    VTX(-176, -893, -490, 1054, 2544, 81, 72, 55, 255),
    VTX(-318, -573, -560, -1771, 1024, 81, 72, 55, 255),
    VTX(-46, -518, -433, -1358, 2483, 81, 72, 55, 255),
    VTX(-176, -893, -490, 0, 1024, 81, 72, 55, 255),
    VTX(-54, -544, 157, -2929, 1024, 81, 72, 55, 255),
    VTX(53, -627, 181, -3059, 1693, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(-275, -616, -150, -1803, 1529, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(-352, -639, -219, -1946, 1024, 81, 72, 55, 255),
    VTX(-275, -616, -150, -1873, 1024, 81, 72, 55, 255),
    VTX(-163, -594, -105, -1670, 1600, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(-163, -594, -105, -1766, 1024, 81, 72, 55, 255),
    VTX(-54, -544, 157, -2733, 2077, 81, 72, 55, 255),
    VTX(-163, -981, -163, -1647, 1370, 81, 72, 55, 255),
    VTX(-176, -893, -490, 0, 1024, 69, 62, 48, 255),
    VTX(-87, -1002, -144, -1855, 1024, 81, 72, 55, 255),
    VTX(-176, -893, -490, 0, 1024, 69, 62, 48, 255),
    VTX(145, -845, -119, -2452, 1024, 81, 72, 55, 255),
    VTX(-87, -1002, -144, -1528, 2076, 81, 72, 55, 255),
    VTX(145, -845, -119, -1400, 1024, 81, 72, 55, 255),
    VTX(0, -947, -81, -541, 1293, 81, 72, 55, 255),
    VTX(-87, -1002, -144, 0, 1024, 81, 72, 55, 255),
    VTX(-176, -893, -490, 0, 1024, 69, 62, 48, 255),
    VTX(130, -699, -459, -1204, 2375, 81, 72, 55, 255),
    VTX(145, -845, -119, 281, 3460, 81, 72, 55, 255),
    VTX(-163, -981, -163, -1683, 1024, 81, 72, 55, 255),
    VTX(-271, -952, -256, -1182, 1540, 81, 72, 55, 255),
    VTX(-176, -893, -490, 0, 1024, 69, 62, 48, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(105, -735, 74, -2837, 1024, 81, 72, 55, 255),
    VTX(145, -845, -119, -2249, 1976, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(53, -627, 181, -3131, 1024, 81, 72, 55, 255),
    VTX(105, -735, 74, -2748, 1726, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_008748[] = {
    VTX(53, -627, 181, 1980, 942, 169, 154, 126, 255),
    VTX(57, -378, 109, 1912, 632, 147, 131, 97, 255),
    VTX(-54, -544, 157, 1809, 839, 169, 154, 126, 255),
}; 

Vtx object_jya_objVtx_008778[] = {
    VTX(163, -594, -105, 1388, 901, 134, 119, 89, 255),
    VTX(105, -735, 74, 1652, 1076, 169, 154, 126, 255),
    VTX(145, -845, -119, 1398, 1212, 134, 119, 89, 255),
    VTX(318, -408, -149, 1129, 670, 134, 119, 89, 255),
    VTX(57, -378, 109, 1755, 632, 147, 131, 97, 255),
    VTX(53, -627, 181, 1835, 942, 169, 154, 126, 255),
    VTX(86, -307, 19, 1623, 544, 134, 119, 89, 255),
}; 

Vtx object_jya_objVtx_0087E8[] = {
    VTX(86, -307, 19, -2561, 1024, 81, 72, 55, 255),
    VTX(76, -219, -404, -888, 2368, 69, 62, 48, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(197, -429, -476, -846, 2017, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 81, 72, 55, 255),
    VTX(76, -219, -404, -1611, 1024, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 69, 62, 48, 255),
    VTX(145, -845, -119, -2442, 1024, 81, 72, 55, 255),
    VTX(105, -735, 74, -2612, 2130, 81, 72, 55, 255),
    VTX(53, -627, 181, -3034, 1799, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 69, 62, 48, 255),
    VTX(105, -735, 74, -2837, 1024, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 69, 62, 48, 255),
    VTX(53, -627, 181, -3131, 1024, 81, 72, 55, 255),
    VTX(-54, -544, 157, -2862, 1650, 81, 72, 55, 255),
    VTX(-46, -518, -433, 0, 1024, 134, 119, 89, 255),
    VTX(-54, -544, 157, -2929, 1024, 81, 72, 55, 255),
    VTX(57, -378, 109, -2647, 2006, 81, 72, 55, 255),
    VTX(57, -378, 109, -2824, 1024, 81, 72, 55, 255),
    VTX(86, -307, 19, -2513, 1519, 81, 72, 55, 255),
    VTX(76, -219, -404, 0, 1024, 134, 119, 89, 255),
    VTX(86, -307, 19, -2147, 1024, 81, 72, 55, 255),
    VTX(318, -408, -149, -1455, 2366, 81, 72, 55, 255),
    VTX(76, -219, -404, -1253, 1024, 134, 119, 89, 255),
    VTX(318, -408, -149, -260, 2736, 134, 119, 89, 255),
    VTX(197, -429, -476, 0, 1024, 81, 72, 55, 255),
    VTX(145, -845, -119, -307, 1024, 81, 72, 55, 255),
    VTX(130, -699, -459, 942, 2375, 81, 72, 55, 255),
    VTX(318, -408, -149, 1910, 279, 115, 102, 78, 255),
    VTX(130, -699, -459, 1368, 789, 81, 72, 55, 255),
    VTX(197, -429, -476, 0, 1024, 100, 89, 67, 255),
    VTX(318, -408, -149, 147, 2749, 115, 102, 78, 255),
}; 

Vtx object_jya_objVtx_0089E8[] = {
    VTX(145, -845, -119, -1399, 2544, 81, 72, 55, 255),
    VTX(-46, -518, -433, 937, 1833, 69, 62, 48, 255),
    VTX(130, -699, -459, -151, 1193, 100, 89, 67, 255),
    VTX(130, -699, -459, -1388, 1024, 81, 72, 55, 255),
    VTX(-46, -518, -433, -733, 2103, 81, 72, 55, 255),
    VTX(197, -429, -476, 0, 1024, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_008A48[] = {
    VTX(145, -845, -119, 1398, 1212, 134, 119, 89, 255),
    VTX(431, -852, -353, 764, 1221, 203, 195, 178, 255),
    VTX(389, -415, -177, 1004, 679, 134, 119, 89, 255),
    VTX(318, -408, -149, 1129, 670, 134, 119, 89, 255),
    VTX(499, -439, -274, 751, 708, 158, 142, 111, 255),
    VTX(559, -692, -502, 432, 1022, 169, 154, 126, 255),
}; 

Vtx object_jya_objVtx_008AA8[] = {
    VTX(559, -692, -502, -322, 2049, 169, 154, 126, 255),
    VTX(440, -538, -596, 0, 1024, 100, 89, 67, 255),
    VTX(499, -439, -274, -1700, 1024, 81, 72, 55, 255),
    VTX(431, -852, -353, -784, 1832, 81, 72, 55, 255),
    VTX(296, -926, -519, 0, 1024, 81, 72, 55, 255),
    VTX(559, -692, -502, -1754, 1024, 81, 72, 55, 255),
    VTX(296, -926, -519, 489, 2108, 81, 72, 55, 255),
    VTX(399, -718, -578, 0, 1024, 81, 72, 55, 255),
    VTX(559, -692, -502, -889, 1024, 81, 72, 55, 255),
    VTX(399, -718, -578, -566, 1754, 81, 72, 55, 255),
    VTX(440, -538, -596, 0, 1024, 100, 89, 67, 255),
    VTX(559, -692, -502, -1074, 1024, 81, 72, 55, 255),
    VTX(145, -845, -119, -307, 1024, 81, 72, 55, 255),
    VTX(130, -699, -459, 942, 2375, 81, 72, 55, 255),
    VTX(431, -852, -353, 1499, 712, 81, 72, 55, 255),
    VTX(389, -415, -177, -2186, 1024, 81, 72, 55, 255),
    VTX(499, -439, -274, -1628, 1513, 81, 72, 55, 255),
    VTX(440, -538, -596, 0, 1024, 100, 89, 67, 255),
    VTX(318, -408, -149, -1732, 1024, 81, 72, 55, 255),
    VTX(389, -415, -177, -1723, 1402, 81, 72, 55, 255),
    VTX(197, -429, -476, 0, 1024, 81, 72, 55, 255),
    VTX(389, -415, -177, -1300, 2782, 81, 72, 55, 255),
    VTX(197, -429, -476, -1450, 1024, 81, 72, 55, 255),
    VTX(431, -852, -353, -1125, 1024, 81, 72, 55, 255),
    VTX(130, -699, -459, -99, 2446, 69, 62, 48, 255),
    VTX(296, -926, -519, 0, 1024, 81, 72, 55, 255),
    VTX(296, -926, -519, -1190, 1024, 81, 72, 55, 255),
    VTX(130, -699, -459, -639, 2339, 81, 72, 55, 255),
    VTX(399, -718, -578, 0, 1024, 81, 72, 55, 255),
    VTX(130, -699, -459, -1462, 1024, 81, 72, 55, 255),
    VTX(197, -429, -476, -1211, 2389, 81, 72, 55, 255),
    VTX(399, -718, -578, 0, 1024, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_008CA8[] = {
    VTX(197, -429, -476, 204, 2459, 81, 72, 55, 255),
    VTX(440, -538, -596, 0, 1024, 100, 89, 67, 255),
    VTX(399, -718, -578, -923, 1024, 81, 72, 55, 255),
    VTX(318, -408, -149, 818, 3289, 115, 102, 78, 255),
    VTX(130, -699, -459, -151, 1193, 81, 72, 55, 255),
    VTX(145, -845, -119, -1399, 2544, 81, 72, 55, 255),
    VTX(318, -408, -149, 18, 1240, 115, 102, 78, 255),
    VTX(197, -429, -476, -129, 2965, 81, 72, 55, 255),
    VTX(130, -699, -459, 1239, 3200, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_008D38[] = {
    VTX(713, -503, -709, 7, 788, 100, 89, 67, 255),
    VTX(767, -154, -659, -16, 354, 52, 49, 38, 255),
    VTX(587, -370, -396, 504, 623, 158, 142, 111, 255),
    VTX(625, -620, -584, 258, 933, 134, 119, 89, 255),
    VTX(559, -692, -502, 432, 1022, 169, 154, 126, 255),
    VTX(499, -439, -274, 751, 708, 158, 142, 111, 255),
    VTX(551, -129, -215, 741, 323, 134, 119, 89, 255),
    VTX(767, -154, -659, -16, 354, 52, 49, 38, 255),
    VTX(612, -11, -512, 349, 177, 69, 62, 48, 255),
}; 

Vtx object_jya_objVtx_008DC8[] = {
    VTX(612, -11, -512, -51, 2298, 69, 62, 48, 255),
    VTX(767, -154, -659, 0, 1024, 81, 72, 55, 255),
    VTX(440, -538, -596, -2525, 1024, 100, 89, 67, 255),
    VTX(440, -538, -596, -1479, 1024, 100, 89, 67, 255),
    VTX(767, -154, -659, 353, 2760, 81, 72, 55, 255),
    VTX(713, -503, -709, 0, 1024, 81, 72, 55, 255),
    VTX(440, -538, -596, -2783, 1024, 100, 89, 67, 255),
    VTX(499, -439, -274, -1990, 2528, 81, 72, 55, 255),
    VTX(612, -11, -512, 0, 1024, 81, 72, 55, 255),
    VTX(499, -439, -274, 544, -274, 81, 72, 55, 255),
    VTX(551, -129, -215, -158, 1150, 115, 102, 78, 255),
    VTX(612, -11, -512, 1108, 2156, 81, 72, 55, 255),
    VTX(499, -439, -274, -510, 2646, 81, 72, 55, 255),
    VTX(440, -538, -596, 0, 1024, 100, 89, 67, 255),
    VTX(559, -692, -502, -1074, 1024, 115, 102, 78, 255),
    VTX(440, -538, -596, -205, 2011, 100, 89, 67, 255),
    VTX(625, -620, -584, 0, 1024, 81, 72, 55, 255),
    VTX(559, -692, -502, -629, 1024, 115, 102, 78, 255),
    VTX(440, -538, -596, -1091, 2023, 100, 89, 67, 255),
    VTX(713, -503, -709, 0, 1024, 115, 102, 78, 255),
    VTX(625, -620, -584, -957, 1024, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_008F18[] = {
    VTX(0, -1238, -182, 1533, 1700, 213, 206, 192, 255),
    VTX(-87, -1002, -144, 1452, 1408, 169, 154, 126, 255),
    VTX(-163, -981, -163, 1328, 1381, 158, 142, 111, 255),
    VTX(-199, -1253, -252, 1187, 1718, 177, 164, 138, 255),
    VTX(-271, -952, -256, 1084, 1345, 189, 178, 157, 255),
    VTX(-396, -1059, -392, 770, 1478, 203, 195, 178, 255),
    VTX(-193, -1483, -509, 929, 2004, 100, 89, 67, 255),
    VTX(-426, -1168, -634, 479, 1613, 115, 102, 78, 255),
}; 

Vtx object_jya_objVtx_008F98[] = {
    VTX(-176, -893, -490, -1976, 1024, 100, 89, 67, 255),
    VTX(11, -1194, -487, -1537, 2729, 69, 62, 48, 255),
    VTX(-426, -1168, -634, 0, 1024, 81, 72, 55, 255),
    VTX(11, -1194, -487, -161, 1173, 69, 62, 48, 255),
    VTX(-193, -1483, -509, 1129, 2368, 100, 89, 67, 255),
    VTX(-426, -1168, -634, 2046, 543, 81, 72, 55, 255),
    VTX(-426, -1168, -634, -1976, 1024, 81, 72, 55, 255),
    VTX(-396, -1059, -392, -1077, 1996, 81, 72, 55, 255),
    VTX(-176, -893, -490, 0, 1024, 100, 89, 67, 255),
    VTX(-396, -1059, -392, -1451, 1024, 81, 72, 55, 255),
    VTX(-271, -952, -256, -909, 1939, 81, 72, 55, 255),
    VTX(-176, -893, -490, 0, 1024, 100, 89, 67, 255),
    VTX(-176, -893, -490, 0, 1024, 100, 89, 67, 255),
    VTX(-271, -952, -256, -1290, 1024, 81, 72, 55, 255),
    VTX(-163, -981, -163, -1542, 1697, 81, 72, 55, 255),
    VTX(0, -1238, -182, -280, 1024, 81, 72, 55, 255),
    VTX(11, -1194, -487, 673, 2219, 69, 62, 48, 255),
    VTX(-87, -1002, -144, 684, 209, 100, 89, 67, 255),
    VTX(0, -1238, -182, -280, 1024, 81, 72, 55, 255),
    VTX(-193, -1483, -509, 1963, 1024, 100, 89, 67, 255),
    VTX(11, -1194, -487, 673, -171, 69, 62, 48, 255),
    VTX(-163, -981, -163, -1683, 1024, 81, 72, 55, 255),
    VTX(-87, -1002, -144, -1816, 1405, 100, 89, 67, 255),
    VTX(-176, -893, -490, 0, 1024, 100, 89, 67, 255),
    VTX(-87, -1002, -144, -1855, 1024, 100, 89, 67, 255),
    VTX(11, -1194, -487, -674, 2650, 69, 62, 48, 255),
}; 

Vtx object_jya_objVtx_009138[] = {
    VTX(0, -1238, -182, 1533, 1700, 213, 206, 192, 255),
    VTX(0, -947, -81, 1638, 1338, 134, 119, 89, 255),
    VTX(-87, -1002, -144, 1452, 1408, 169, 154, 126, 255),
}; 

Vtx object_jya_objVtx_009168[] = {
    VTX(199, -1253, -252, 1187, 1718, 177, 164, 138, 255),
    VTX(396, -1059, -392, 770, 1478, 203, 195, 178, 255),
    VTX(145, -845, -119, 1398, 1212, 134, 119, 89, 255),
    VTX(0, -947, -81, 1638, 1338, 134, 119, 89, 255),
    VTX(0, -1238, -182, 1533, 1700, 213, 206, 192, 255),
    VTX(431, -852, -353, 764, 1221, 203, 195, 178, 255),
}; 

Vtx object_jya_objVtx_0091C8[] = {
    VTX(296, -926, -519, -2356, 1024, 69, 62, 48, 255),
    VTX(11, -1194, -487, -1030, 2452, 69, 62, 48, 255),
    VTX(-176, -893, -490, 0, 1024, 81, 72, 55, 255),
    VTX(-87, -1002, -144, -711, 2738, 115, 102, 78, 255),
    VTX(-176, -893, -490, 0, 1024, 81, 72, 55, 255),
    VTX(11, -1194, -487, -1761, 1024, 69, 62, 48, 255),
    VTX(-87, -1002, -144, -150, 3183, 115, 102, 78, 255),
    VTX(11, -1194, -487, -161, 1173, 69, 62, 48, 255),
    VTX(0, -1238, -182, -1115, 2368, 115, 102, 78, 255),
    VTX(11, -1194, -487, -1419, 2360, 69, 62, 48, 255),
    VTX(296, -926, -519, 0, 1024, 69, 62, 48, 255),
    VTX(199, -1253, -252, -2150, 1024, 115, 102, 78, 255),
    VTX(0, -1238, -182, -280, 1024, 115, 102, 78, 255),
    VTX(11, -1194, -487, 673, 2219, 69, 62, 48, 255),
    VTX(199, -1253, -252, 717, 697, 115, 102, 78, 255),
    VTX(199, -1253, -252, -236, 3161, 115, 102, 78, 255),
    VTX(296, -926, -519, 0, 1024, 69, 62, 48, 255),
    VTX(396, -1059, -392, -774, 1717, 115, 102, 78, 255),
    VTX(296, -926, -519, 677, 1804, 69, 62, 48, 255),
    VTX(431, -852, -353, 877, 697, 115, 102, 78, 255),
    VTX(396, -1059, -392, -97, 1111, 115, 102, 78, 255),
    VTX(431, -852, -353, -78, 2147, 115, 102, 78, 255),
    VTX(296, -926, -519, 0, 1024, 69, 62, 48, 255),
    VTX(130, -699, -459, -1426, 1024, 81, 72, 55, 255),
    VTX(145, -845, -119, -1399, 2544, 115, 102, 78, 255),
    VTX(431, -852, -353, 407, 2856, 115, 102, 78, 255),
    VTX(130, -699, -459, -151, 1193, 81, 72, 55, 255),
    VTX(130, -699, -459, -1204, 2375, 81, 72, 55, 255),
    VTX(296, -926, -519, -186, 3373, 69, 62, 48, 255),
    VTX(-176, -893, -490, 0, 1024, 81, 72, 55, 255),
    VTX(-87, -1002, -144, -1400, 1024, 115, 102, 78, 255),
    VTX(0, -947, -81, -860, 1293, 115, 102, 78, 255),
    VTX(145, -845, -119, 0, 1024, 115, 102, 78, 255),
    VTX(-87, -1002, -144, 618, -28, 115, 102, 78, 255),
    VTX(145, -845, -119, -307, 1024, 115, 102, 78, 255),
    VTX(-176, -893, -490, 2146, 1024, 81, 72, 55, 255),
    VTX(145, -845, -119, -307, 1024, 115, 102, 78, 255),
    VTX(130, -699, -459, 942, 2375, 81, 72, 55, 255),
    VTX(-176, -893, -490, 2146, 1024, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_009438[] = {
    VTX(660, -853, -758, 30, 1222, 115, 102, 78, 255),
    VTX(713, -503, -709, 7, 788, 100, 89, 67, 255),
    VTX(625, -620, -584, 258, 933, 134, 119, 89, 255),
    VTX(559, -692, -502, 432, 1022, 169, 154, 126, 255),
    VTX(426, -1168, -634, 479, 1613, 115, 102, 78, 255),
    VTX(462, -1007, -484, 585, 1414, 203, 195, 178, 255),
    VTX(396, -1059, -392, 770, 1478, 203, 195, 178, 255),
    VTX(431, -852, -353, 764, 1221, 203, 195, 178, 255),
}; 

Vtx object_jya_objVtx_0094B8[] = {
    VTX(440, -538, -596, -1479, 1024, 115, 102, 78, 255),
    VTX(625, -620, -584, -706, 1671, 81, 72, 55, 255),
    VTX(713, -503, -709, 0, 1024, 81, 72, 55, 255),
    VTX(440, -538, -596, -1008, 1024, 115, 102, 78, 255),
    VTX(559, -692, -502, -128, 1639, 81, 72, 55, 255),
    VTX(625, -620, -584, 0, 1024, 81, 72, 55, 255),
    VTX(440, -538, -596, -275, 1905, 115, 102, 78, 255),
    VTX(399, -718, -578, 0, 1024, 115, 102, 78, 255),
    VTX(559, -692, -502, -889, 1024, 81, 72, 55, 255),
    VTX(440, -538, -596, -2069, 1024, 81, 72, 55, 255),
    VTX(713, -503, -709, -1265, 2265, 81, 72, 55, 255),
    VTX(660, -853, -758, 0, 1024, 81, 72, 55, 255),
    VTX(440, -538, -596, -1858, 1935, 81, 72, 55, 255),
    VTX(660, -853, -758, 0, 1024, 81, 72, 55, 255),
    VTX(399, -718, -578, -1709, 1024, 81, 72, 55, 255),
    VTX(660, -853, -758, -1709, 1024, 81, 72, 55, 255),
    VTX(296, -926, -519, 138, 2206, 69, 62, 48, 255),
    VTX(399, -718, -578, 0, 1024, 81, 72, 55, 255),
    VTX(660, -853, -758, -523, 2999, 81, 72, 55, 255),
    VTX(426, -1168, -634, 0, 1024, 81, 72, 55, 255),
    VTX(296, -926, -519, -1477, 1024, 69, 62, 48, 255),
    VTX(559, -692, -502, 0, 1024, 81, 72, 55, 255),
    VTX(431, -852, -353, -797, 2003, 81, 72, 55, 255),
    VTX(559, -692, -502, 0, 1024, 81, 72, 55, 255),
    VTX(399, -718, -578, -1055, 1574, 115, 102, 78, 255),
    VTX(296, -926, -519, 0, 1024, 69, 62, 48, 255),
    VTX(559, -692, -502, -1754, 1024, 81, 72, 55, 255),
    VTX(296, -926, -519, -1754, 1024, 69, 62, 48, 255),
    VTX(431, -852, -353, -970, 1832, 81, 72, 55, 255),
    VTX(559, -692, -502, 0, 1024, 81, 72, 55, 255),
    VTX(431, -852, -353, 200, 2131, 81, 72, 55, 255),
    VTX(296, -926, -519, 0, 1024, 69, 62, 48, 255),
    VTX(396, -1059, -392, -774, 1717, 81, 72, 55, 255),
    VTX(296, -926, -519, 677, 1804, 69, 62, 48, 255),
    VTX(426, -1168, -634, 995, 362, 81, 72, 55, 255),
    VTX(396, -1059, -392, -97, 1111, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_0096F8[] = {
    VTX(-193, -1483, -509, 929, 2004, 100, 89, 67, 255),
    VTX(0, -1518, -488, 1217, 2048, 100, 89, 67, 255),
    VTX(0, -1238, -182, 1533, 1700, 213, 206, 192, 255),
}; 

Vtx object_jya_objVtx_009728[] = {
    VTX(0, -1238, -182, 1533, 1700, 213, 206, 192, 255),
    VTX(0, -1518, -488, 1217, 2048, 100, 89, 67, 255),
    VTX(199, -1253, -252, 1187, 1718, 177, 164, 138, 255),
    VTX(193, -1483, -509, 929, 2004, 100, 89, 67, 255),
    VTX(396, -1059, -392, 770, 1478, 203, 195, 178, 255),
    VTX(426, -1168, -634, 479, 1613, 115, 102, 78, 255),
}; 

Vtx object_jya_objVtx_009788[] = {
    VTX(426, -1168, -634, 318, 2466, 100, 89, 67, 255),
    VTX(296, -926, -519, 0, 1024, 69, 62, 48, 255),
    VTX(396, -1059, -392, -774, 1717, 100, 89, 67, 255),
    VTX(193, -1483, -509, -1918, 1024, 100, 89, 67, 255),
    VTX(0, -1518, -488, -959, 1229, 100, 89, 67, 255),
    VTX(-193, -1483, -509, 0, 1024, 100, 89, 67, 255),
    VTX(11, -1194, -487, -1290, 2219, 69, 62, 48, 255),
    VTX(193, -1483, -509, 254, 2925, 100, 89, 67, 255),
    VTX(-193, -1483, -509, 0, 1024, 100, 89, 67, 255),
    VTX(11, -1194, -487, -1568, 2182, 69, 62, 48, 255),
    VTX(296, -926, -519, 0, 1024, 69, 62, 48, 255),
    VTX(193, -1483, -509, -2810, 1024, 100, 89, 67, 255),
    VTX(296, -926, -519, 378, 2451, 69, 62, 48, 255),
    VTX(426, -1168, -634, 0, 1024, 100, 89, 67, 255),
    VTX(193, -1483, -509, -2043, 1024, 100, 89, 67, 255),
    VTX(199, -1253, -252, -1565, 2498, 100, 89, 67, 255),
    VTX(296, -926, -519, 0, 1024, 69, 62, 48, 255),
    VTX(11, -1194, -487, -1949, 1024, 69, 62, 48, 255),
    VTX(199, -1253, -252, 441, -333, 100, 89, 67, 255),
    VTX(396, -1059, -392, -97, 1111, 100, 89, 67, 255),
    VTX(296, -926, -519, 677, 1804, 69, 62, 48, 255),
    VTX(199, -1253, -252, -117, 2696, 100, 89, 67, 255),
    VTX(11, -1194, -487, -161, 1173, 69, 62, 48, 255),
    VTX(0, -1238, -182, -1115, 2368, 100, 89, 67, 255),
    VTX(-193, -1483, -509, 1129, 2368, 100, 89, 67, 255),
    VTX(0, -1238, -182, 958, 132, 100, 89, 67, 255),
}; 

Gfx gMegamiPieceDlist1[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_RGBA16),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadTextureBlock_4b(gMegamiTex1, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_0070E8, 11, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(1, 4, 2, 0, 5, 2, 6, 0),
    gsSP2Triangles(3, 2, 5, 0, 2, 7, 6, 0),
    gsSP2Triangles(8, 9, 10, 0, 2, 8, 10, 0),
    gsSP1Triangle(2, 10, 7, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_007198, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
    gsSPVertex(object_jya_objVtx_007378, 9, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP1Triangle(6, 7, 8, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist2[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex1, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_007408, 8, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
    gsSP2Triangles(5, 0, 2, 0, 5, 2, 3, 0),
    gsSP2Triangles(4, 2, 6, 0, 1, 7, 6, 0),
    gsSP1Triangle(1, 6, 2, 0),
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex3, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsSPVertex(object_jya_objVtx_007488, 6, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 3, 4, 0),
    gsSP2Triangles(4, 3, 5, 0, 3, 0, 2, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_0074E8, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
    gsSPVertex(object_jya_objVtx_0076C8, 21, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP1Triangle(18, 19, 20, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist3[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex3, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_007818, 9, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(1, 3, 5, 0, 1, 5, 2, 0),
    gsSP2Triangles(1, 6, 7, 0, 1, 7, 8, 0),
    gsSP1Triangle(3, 1, 8, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_0078A8, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
    gsSPVertex(object_jya_objVtx_007A88, 21, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP1Triangle(18, 19, 20, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist4[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex1, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_007BD8, 11, 0),
    gsSP2Triangles(0, 1, 2, 0, 2, 3, 4, 0),
    gsSP2Triangles(0, 2, 4, 0, 5, 4, 3, 0),
    gsSP2Triangles(6, 5, 3, 0, 7, 8, 9, 0),
    gsSP2Triangles(9, 8, 10, 0, 9, 10, 0, 0),
    gsSP1Triangle(0, 10, 1, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_007C88, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 14, 19, 0, 20, 21, 22, 0),
    gsSP2Triangles(23, 24, 25, 0, 26, 27, 28, 0),
    gsSP1Triangle(29, 30, 31, 0),
    gsSPVertex(object_jya_objVtx_007E88, 23, 0),
    gsSP2Triangles(0, 1, 2, 0, 2, 3, 4, 0),
    gsSP2Triangles(5, 6, 7, 0, 8, 9, 10, 0),
    gsSP2Triangles(11, 12, 13, 0, 14, 15, 16, 0),
    gsSP2Triangles(17, 18, 19, 0, 20, 21, 22, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist5[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex1, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_007FF8, 8, 0),
    gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
    gsSP2Triangles(4, 5, 6, 0, 6, 5, 1, 0),
    gsSP2Triangles(6, 1, 0, 0, 1, 5, 7, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_008078, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
    gsSPVertex(object_jya_objVtx_008258, 6, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist6[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex1, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_0082B8, 16, 0),
    gsSP2Triangles(0, 1, 2, 0, 2, 1, 3, 0),
    gsSP2Triangles(4, 3, 1, 0, 1, 5, 6, 0),
    gsSP2Triangles(7, 5, 8, 0, 4, 1, 9, 0),
    gsSP2Triangles(9, 1, 10, 0, 1, 11, 10, 0),
    gsSP2Triangles(1, 12, 11, 0, 12, 13, 11, 0),
    gsSP2Triangles(12, 14, 13, 0, 12, 15, 14, 0),
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex3, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsSPVertex(object_jya_objVtx_0083B8, 6, 0),
    gsSP2Triangles(0, 1, 2, 0, 2, 1, 3, 0),
    gsSP1Triangle(4, 5, 3, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_008418, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
    gsSPVertex(object_jya_objVtx_0085F8, 21, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP1Triangle(18, 19, 20, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist7[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex1, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_008748, 3, 0),
    gsSP1Triangle(0, 1, 2, 0),
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex3, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsSPVertex(object_jya_objVtx_008778, 7, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 0, 2, 0),
    gsSP2Triangles(4, 5, 1, 0, 4, 1, 0, 0),
    gsSP2Triangles(4, 0, 6, 0, 6, 0, 3, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_0087E8, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(2, 18, 19, 0, 20, 21, 22, 0),
    gsSP2Triangles(23, 24, 25, 0, 26, 27, 28, 0),
    gsSP1Triangle(29, 30, 31, 0),
    gsSPVertex(object_jya_objVtx_0089E8, 6, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist8[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex3, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_008A48, 6, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 0, 2, 0),
    gsSP2Triangles(1, 4, 2, 0, 4, 1, 5, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_008AA8, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 10, 22, 0),
    gsSP2Triangles(23, 24, 25, 0, 26, 27, 28, 0),
    gsSP1Triangle(29, 30, 31, 0),
    gsSPVertex(object_jya_objVtx_008CA8, 9, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP1Triangle(6, 7, 8, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist9[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex3, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_008D38, 9, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(3, 2, 4, 0, 5, 4, 2, 0),
    gsSP2Triangles(2, 6, 5, 0, 1, 6, 2, 0),
    gsSP1Triangle(6, 7, 8, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_008DC8, 21, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP1Triangle(18, 19, 20, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist10[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex1, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_008F18, 8, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 0, 2, 0),
    gsSP2Triangles(4, 3, 2, 0, 4, 5, 3, 0),
    gsSP2Triangles(5, 6, 3, 0, 5, 7, 6, 0),
    gsSP1Triangle(3, 6, 0, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_008F98, 26, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
    gsSP1Triangle(24, 25, 8, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist11[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex1, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_009138, 3, 0),
    gsSP1Triangle(0, 1, 2, 0),
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex3, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsSPVertex(object_jya_objVtx_009168, 6, 0),
    gsSP2Triangles(0, 1, 2, 0, 2, 3, 4, 0),
    gsSP2Triangles(2, 4, 0, 0, 2, 1, 5, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_0091C8, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
    gsSPVertex(object_jya_objVtx_0093A8, 9, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP1Triangle(6, 7, 8, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist12[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex3, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_009438, 8, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 6, 5, 7, 0),
    gsSP2Triangles(4, 0, 5, 0, 5, 0, 7, 0),
    gsSP1Triangle(7, 0, 3, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_0094B8, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
    gsSPVertex(object_jya_objVtx_009698, 6, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSPEndDisplayList(),
}; 

Gfx gMegamiPieceDlist13[] = {
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex1, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette1),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_0096F8, 3, 0),
    gsSP1Triangle(0, 1, 2, 0),
    gsDPPipeSync(),
    gsDPLoadTextureBlock_4b(gMegamiTex3, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsSPVertex(object_jya_objVtx_009728, 6, 0),
    gsSP2Triangles(0, 1, 2, 0, 2, 1, 3, 0),
    gsSP2Triangles(4, 2, 3, 0, 3, 5, 4, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, gMegamiPalette3),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette4),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_009788, 26, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
    gsSP1Triangle(22, 24, 25, 0),
    gsSPEndDisplayList(),
}; 

static u8 unaccounted_00AC48[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
}; 

u64 gMegamiPalette2[] = {
#include "assets/objects/object_jya_obj/gMegamiPalette2.rgb5a1.inc.c"
};

u64 gMegamiPalette5[] = {
#include "assets/objects/object_jya_obj/gMegamiPalette5.rgb5a1.inc.c"
};

static u8 unaccounted_00AC90[40] = {
    0x92, 0x8D, 0x59, 0x47, 0x51, 0x87, 0x59, 0x49, 0x51, 0x85, 0x49, 0x45, 0x8A, 0x4B, 0x7A, 0x49, 
    0x59, 0x07, 0x50, 0xC5, 0x7A, 0x89, 0x49, 0x47, 0x69, 0x87, 0x8A, 0x89, 0x41, 0x05, 0x49, 0x07, 
    0x82, 0x49, 0x38, 0x81, 0x92, 0x8F, 0x00, 0x01, 
}; 

u64 gMegamiTex2[] = {
#include "assets/objects/object_jya_obj/gMegamiTex2.ci4.inc.c"
};

u64 object_jya_objTex_00B4B8[] = {
#include "assets/objects/object_jya_obj/object_jya_objTex_00B4B8.ci8.inc.c"
};

Vtx object_jya_objVtx_00B8B8[] = {
    VTX(55, -23, 119, 916, 33, 52, 49, 38, 255),
    VTX(-122, -11, 14, 741, 323, 115, 102, 78, 255),
    VTX(-7, -166, -23, 1125, 364, 115, 102, 78, 255),
    VTX(55, -23, 119, 714, 0, 52, 49, 38, 255),
    VTX(-10, 208, 2, -16, 354, 52, 49, 38, 255),
    VTX(-23, -14, -89, 903, 468, 134, 119, 89, 255),
    VTX(-10, 208, 2, 753, 785, 158, 142, 111, 255),
    VTX(-23, -14, -89, 872, 501, 134, 119, 89, 255),
}; 

Vtx object_jya_objVtx_00B938[] = {
    VTX(55, -23, 119, -2272, 1024, 81, 72, 55, 255),
    VTX(107, 7, -23, -1720, 2309, 134, 119, 89, 255),
    VTX(-10, 208, 2, 0, 1024, 81, 72, 55, 255),
    VTX(107, 7, -23, -1664, 1024, 134, 119, 89, 255),
    VTX(-23, -14, -89, -809, 1756, 81, 72, 55, 255),
    VTX(-10, 208, 2, 0, 1024, 81, 72, 55, 255),
    VTX(-23, -14, -89, 174, 2092, 81, 72, 55, 255),
    VTX(107, 7, -23, 0, 1024, 134, 119, 89, 255),
    VTX(-7, -166, -23, -493, 2227, 81, 72, 55, 255),
    VTX(-7, -166, -23, -164, 1425, 81, 72, 55, 255),
    VTX(107, 7, -23, 329, 2629, 134, 119, 89, 255),
    VTX(55, -23, 119, 1250, 1722, 81, 72, 55, 255),
}; 

Gfx gMegamiDlist2[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_RGBA16),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadTextureBlock_4b(gMegamiTex2, G_IM_FMT_CI, 64, 64, 0, 2, 2, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette2),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_00B8B8, 8, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
    gsSP2Triangles(2, 1, 5, 0, 1, 6, 7, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1, object_jya_objTex_00B4B8),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 0, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_CI, G_IM_SIZ_8b, 4, 0, 0, 0, 0, 5, 0, 0, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, gMegamiPalette5),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 255),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_00B938, 12, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSPEndDisplayList(),
}; 

static u8 unaccounted_00BB48[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
}; 

Vtx object_jya_objVtx_00BB50[] = {
    VTX(-205, 0, 180, 4260, 255, 255, 255, 255, 102),
    VTX(-554, -1283, 242, 4080, 4096, 255, 255, 255, 102),
    VTX(-554, -1283, -218, 3600, 4096, 255, 255, 255, 102),
    VTX(-205, 0, -106, 3521, 788, 255, 255, 255, 102),
    VTX(-119, 0, 265, 690, 98, 255, 255, 255, 102),
    VTX(-229, -1283, 566, 720, 4096, 255, 255, 255, 102),
    VTX(-554, -1283, 242, 240, 4096, 255, 255, 255, 102),
    VTX(-205, 0, 180, 420, 255, 255, 255, 255, 102),
    VTX(120, 0, 265, 1230, 98, 255, 255, 255, 102),
    VTX(230, -1283, 566, 1200, 4096, 255, 255, 255, 102),
    VTX(206, 0, 180, 1500, 255, 255, 255, 255, 102),
    VTX(555, -1283, 242, 1680, 4096, 255, 255, 255, 102),
    VTX(206, 0, -106, 2239, 788, 255, 255, 255, 102),
    VTX(555, -1283, -218, 2160, 4096, 255, 255, 255, 102),
    VTX(69, 0, -291, 2744, 1133, 255, 255, 255, 102),
    VTX(230, -1283, -542, 2640, 4096, 255, 255, 255, 102),
    VTX(-68, 0, -291, 3016, 1133, 255, 255, 255, 102),
    VTX(-229, -1283, -542, 3120, 4096, 255, 255, 255, 102),
}; 

Gfx gBigMirrorDlist1[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gBigMirrorGradientTex, 0, 0, G_IM_FMT_IA, G_IM_SIZ_16b, 8, 128, 0, 1, 3, 3, 7, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, TEXEL0, 0, PRIMITIVE, 0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, TEXEL1, 0, 1, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC81049D8),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 102),
    gsSPVertex(object_jya_objVtx_00BB50, 18, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 5, 0, 8, 5, 4, 0),
    gsSP2Triangles(10, 11, 9, 0, 10, 9, 8, 0),
    gsSP2Triangles(12, 13, 11, 0, 12, 11, 10, 0),
    gsSP2Triangles(14, 15, 13, 0, 14, 13, 12, 0),
    gsSP2Triangles(16, 17, 15, 0, 16, 15, 14, 0),
    gsSP2Triangles(3, 2, 17, 0, 3, 17, 16, 0),
    gsSPEndDisplayList(),
}; 

static u8 unaccounted_00BD38[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
}; 

Vtx object_jya_objVtx_00BD40[] = {
    VTX(-840, 0, 840, 1024, -1024, 255, 239, 178, 255),
    VTX(840, 0, 840, 1024, 1024, 255, 239, 178, 255),
    VTX(840, 0, -840, -1024, 1024, 255, 239, 178, 255),
    VTX(-840, 0, -840, -1024, -1024, 255, 239, 178, 255),
}; 

Gfx gBigMirrorDlist2[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_16b, 1, object_jya_objTex_01B340),
    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 0, 0, 7, 0, 1, 5, 0, 1, 5, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 511, 512),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b, 4, 0, 0, 0, 1, 5, 0, 1, 5, 0),
    gsDPSetTileSize(0, 0, 0, 124, 124),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, TEXEL0, 0, PRIMITIVE, 0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, TEXEL1, 0, 1, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8104DD8),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 102),
    gsSPVertex(object_jya_objVtx_00BD40, 4, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSPEndDisplayList(),
}; 

Vtx object_jya_objVtx_00BE10[] = {
    VTX(-358, 854, 0, 2048, 512, 115, 102, 78, 255),
    VTX(-194, 692, 0, 1579, -248, 115, 102, 78, 255),
    VTX(0, 771, 0, 469, -248, 115, 102, 78, 255),
    VTX(0, 1000, 0, 0, 512, 115, 102, 78, 255),
    VTX(-358, 854, 0, 0, 512, 115, 102, 78, 255),
    VTX(-506, 500, 0, 2048, 512, 115, 102, 78, 255),
    VTX(-274, 500, 0, 1579, -248, 169, 154, 126, 255),
    VTX(-194, 692, 0, 469, -248, 115, 102, 78, 255),
    VTX(194, 692, 0, 469, -248, 115, 102, 78, 255),
    VTX(358, 854, 0, 0, 512, 115, 102, 78, 255),
    VTX(0, 1000, 0, 2048, 512, 115, 102, 78, 255),
    VTX(0, 771, 0, 1579, -248, 115, 102, 78, 255),
    VTX(274, 500, 0, 469, -248, 169, 154, 126, 255),
    VTX(506, 500, 0, 0, 512, 115, 102, 78, 255),
    VTX(358, 854, 0, 2048, 512, 115, 102, 78, 255),
    VTX(194, 692, 0, 1579, -248, 115, 102, 78, 255),
    VTX(-506, 500, 0, 0, 512, 115, 102, 78, 255),
    VTX(-358, 146, 0, 2048, 512, 115, 102, 78, 255),
    VTX(-194, 308, 0, 1579, -245, 198, 188, 168, 255),
    VTX(-274, 500, 0, 469, -245, 169, 154, 126, 255),
    VTX(-358, 146, 0, 0, 512, 115, 102, 78, 255),
    VTX(0, 0, 0, 2048, 512, 115, 102, 78, 255),
    VTX(0, 229, 0, 1579, -252, 198, 188, 168, 255),
    VTX(-194, 308, 0, 469, -252, 198, 188, 168, 255),
    VTX(0, 0, 0, 0, 512, 115, 102, 78, 255),
    VTX(358, 146, 0, 2048, 512, 115, 102, 78, 255),
    VTX(194, 308, 0, 1579, -249, 198, 188, 168, 255),
    VTX(0, 229, 0, 469, -249, 198, 188, 168, 255),
    VTX(358, 146, 0, 0, 512, 115, 102, 78, 255),
    VTX(506, 500, 0, 2048, 512, 115, 102, 78, 255),
    VTX(274, 500, 0, 1579, -245, 169, 154, 126, 255),
    VTX(194, 308, 0, 469, -245, 198, 188, 168, 255),
}; 

Vtx object_jya_objVtx_00C010[] = {
    VTX(0, 500, 0, 1024, 1024, 245, 244, 241, 255),
    VTX(194, 692, 0, 1787, 270, 115, 102, 78, 255),
    VTX(0, 771, 0, 1024, -43, 115, 102, 78, 255),
    VTX(-194, 308, 0, 261, 1778, 198, 188, 168, 255),
    VTX(-274, 500, 0, -55, 1024, 169, 154, 126, 255),
    VTX(-194, 692, 0, 261, 270, 115, 102, 78, 255),
    VTX(0, 229, 0, 1024, 2091, 198, 188, 168, 255),
    VTX(274, 500, 0, 2103, 1024, 169, 154, 126, 255),
    VTX(194, 308, 0, 1787, 1778, 198, 188, 168, 255),
}; 

Gfx gAmishutterDlist[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(object_jya_objTex_017140, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 16, 0, 0, 1, 5, 4, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_00BE10, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
    gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 24, 26, 27, 0),
    gsSP2Triangles(28, 29, 30, 0, 28, 30, 31, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(gKanaamiMiddleTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 1, 1, 5, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, TEXEL0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8113078),
    gsSPVertex(object_jya_objVtx_00C010, 9, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
    gsSP2Triangles(5, 0, 2, 0, 6, 0, 3, 0),
    gsSP2Triangles(0, 7, 1, 0, 8, 0, 6, 0),
    gsSP2Triangles(4, 0, 5, 0, 7, 0, 8, 0),
    gsSPEndDisplayList(),
}; 

CamData gAmishutterCol_camDataList_0000C1E0[1] = {
	{ 0x0000, 0, 0x00000000 }, // 0x0000C1E0

}; 

u32 gAmishutterCol_polygonTypes_0000C1E8[] = {
	 0x00000000, 0x000207C0, 
	 0x00000000, 0x000007C0, 

}; 

RoomPoly gAmishutterCol_polygons_0000C1F8[] = {
	{ 0x0000, 0x2000, 0x0001, 0x0002, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C1F8
	{ 0x0000, 0x2000, 0x0002, 0x0003, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C208
	{ 0x0000, 0x2000, 0x0003, 0x0004, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C218
	{ 0x0000, 0x2000, 0x0004, 0x0005, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C228
	{ 0x0000, 0x2000, 0x0005, 0x0006, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C238
	{ 0x0000, 0x2000, 0x0006, 0x0007, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C248
	{ 0x0000, 0x2008, 0x0009, 0x000A, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C258
	{ 0x0000, 0x2009, 0x000B, 0x000A, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C268
	{ 0x0000, 0x200B, 0x000C, 0x000A, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C278
	{ 0x0000, 0x200C, 0x000D, 0x000A, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C288
	{ 0x0000, 0x200D, 0x000E, 0x000A, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C298
	{ 0x0000, 0x200E, 0x000F, 0x000A, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C2A8
	{ 0x0001, 0x200D, 0x000C, 0x0010, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C2B8
	{ 0x0001, 0x200D, 0x0010, 0x0011, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C2C8
	{ 0x0001, 0x200E, 0x000D, 0x0011, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C2D8
	{ 0x0001, 0x200F, 0x000E, 0x0011, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C2E8
	{ 0x0001, 0x200F, 0x0011, 0x0012, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C2F8
	{ 0x0001, 0x200A, 0x000F, 0x0012, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C308
	{ 0x0001, 0x200B, 0x0009, 0x0013, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C318
	{ 0x0001, 0x200B, 0x0013, 0x0010, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C328
	{ 0x0001, 0x200B, 0x0010, 0x000C, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C338
	{ 0x0001, 0x2013, 0x0009, 0x0008, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C348
	{ 0x0001, 0x2008, 0x000A, 0x0012, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C358
	{ 0x0001, 0x2013, 0x0008, 0x0012, 0x0000, 0x0000, 0x8001, 0xFF9C }, // 0x0000C368
	{ 0x0001, 0x2014, 0x0007, 0x0015, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C378
	{ 0x0001, 0x2014, 0x0000, 0x0007, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C388
	{ 0x0001, 0x2007, 0x0006, 0x0015, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C398
	{ 0x0001, 0x2004, 0x0016, 0x0005, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C3A8
	{ 0x0001, 0x2016, 0x0015, 0x0005, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C3B8
	{ 0x0001, 0x2015, 0x0006, 0x0005, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C3C8
	{ 0x0001, 0x2014, 0x0001, 0x0000, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C3D8
	{ 0x0001, 0x2014, 0x0017, 0x0001, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C3E8
	{ 0x0001, 0x2017, 0x0002, 0x0001, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C3F8
	{ 0x0001, 0x2017, 0x0003, 0x0002, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C408
	{ 0x0001, 0x2017, 0x0016, 0x0003, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C418
	{ 0x0001, 0x2016, 0x0004, 0x0003, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000C428

}; 

Vec3s gAmishutterCol_vtx_0000C438[] = {
{ -194, 692, 100 }, // 0x0000C438
{ -274, 500, 100 }, // 0x0000C43E
{ -194, 308, 100 }, // 0x0000C444
{ 0, 229, 100 }, // 0x0000C44A
{ 194, 308, 100 }, // 0x0000C450
{ 274, 500, 100 }, // 0x0000C456
{ 194, 692, 100 }, // 0x0000C45C
{ 0, 771, 100 }, // 0x0000C462
{ 0, 771, -100 }, // 0x0000C468
{ 194, 692, -100 }, // 0x0000C46E
{ -194, 692, -100 }, // 0x0000C474
{ 274, 500, -100 }, // 0x0000C47A
{ 194, 308, -100 }, // 0x0000C480
{ 0, 229, -100 }, // 0x0000C486
{ -194, 308, -100 }, // 0x0000C48C
{ -274, 500, -100 }, // 0x0000C492
{ 506, 0, -100 }, // 0x0000C498
{ -506, 0, -100 }, // 0x0000C49E
{ -506, 1000, -100 }, // 0x0000C4A4
{ 506, 1000, -100 }, // 0x0000C4AA
{ -506, 1000, 100 }, // 0x0000C4B0
{ 506, 1000, 100 }, // 0x0000C4B6
{ 506, 0, 100 }, // 0x0000C4BC
{ -506, 0, 100 }, // 0x0000C4C2

}; 

CollisionHeader gAmishutterCol = { -506, 0, -100, 506, 1000, 100, 24, gAmishutterCol_vtx_0000C438, 36, gAmishutterCol_polygons_0000C1F8, gAmishutterCol_polygonTypes_0000C1E8, &gAmishutterCol_camDataList_0000C1E0, 0, 0 }; 

static u32 padC4F4 = 0;
static u32 padC4F8 = 0;
static u32 padC4FC = 0;

Vtx object_jya_objVtx_00C500[] = {
    VTX(0, 0, 0, 2048, -1024, 223, 191, 159, 255),
    VTX(-1200, 0, 600, 0, 0, 209, 164, 118, 255),
    VTX(-600, 0, 1200, 1024, 1024, 209, 164, 118, 255),
    VTX(600, 0, 1200, 3072, 1024, 209, 164, 118, 255),
    VTX(1200, 0, 600, 4096, 0, 209, 164, 118, 255),
}; 

Vtx object_jya_objVtx_00C550[] = {
    VTX(600, 0, 1200, 574, 2048, 158, 142, 111, 255),
    VTX(600, -800, 1200, 574, 1024, 100, 89, 67, 255),
    VTX(1200, -800, 600, -512, 1024, 100, 89, 67, 255),
    VTX(1200, 0, 600, -512, 2048, 158, 142, 111, 255),
    VTX(-600, 0, 1200, 512, 2048, 158, 142, 111, 255),
    VTX(-600, -800, 1200, 512, 1024, 100, 89, 67, 255),
    VTX(600, -800, 1200, -1024, 1024, 100, 89, 67, 255),
    VTX(600, 0, 1200, -1024, 2048, 158, 142, 111, 255),
    VTX(-1200, 0, 600, 512, 2048, 158, 142, 111, 255),
    VTX(-1200, -800, 600, 512, 1024, 100, 89, 67, 255),
    VTX(-600, -800, 1200, -574, 1024, 100, 89, 67, 255),
    VTX(-600, 0, 1200, -574, 2048, 158, 142, 111, 255),
    VTX(-1200, 0, -600, 512, 2048, 158, 142, 111, 255),
    VTX(-1200, -800, -600, 512, 1024, 100, 89, 67, 255),
    VTX(-1200, -800, 600, -1024, 1024, 100, 89, 67, 255),
    VTX(-1200, 0, 600, -1024, 2048, 158, 142, 111, 255),
    VTX(-600, 0, -1200, 512, 2048, 158, 142, 111, 255),
    VTX(-600, -800, -1200, 512, 1024, 100, 89, 67, 255),
    VTX(-1200, -800, -600, -574, 1024, 100, 89, 67, 255),
    VTX(-1200, 0, -600, -574, 2048, 158, 142, 111, 255),
    VTX(600, 0, -1200, 512, 2048, 158, 142, 111, 255),
    VTX(600, -800, -1200, 512, 1024, 100, 89, 67, 255),
    VTX(-600, -800, -1200, -1024, 1024, 100, 89, 67, 255),
    VTX(-600, 0, -1200, -1024, 2048, 158, 142, 111, 255),
    VTX(1200, 0, -600, 574, 2048, 158, 142, 111, 255),
    VTX(1200, -800, -600, 574, 1024, 100, 89, 67, 255),
    VTX(600, -800, -1200, -512, 1024, 100, 89, 67, 255),
    VTX(600, 0, -1200, -512, 2048, 158, 142, 111, 255),
    VTX(1200, 0, 600, 512, 2048, 158, 142, 111, 255),
    VTX(1200, -800, 600, 512, 1024, 100, 89, 67, 255),
    VTX(1200, -800, -600, -1024, 1024, 100, 89, 67, 255),
    VTX(1200, 0, -600, -1024, 2048, 158, 142, 111, 255),
}; 

Vtx object_jya_objVtx_00C750[] = {
    VTX(-1200, 0, -600, 0, -2048, 209, 164, 118, 255),
    VTX(-1200, 0, 600, 0, 0, 209, 164, 118, 255),
    VTX(0, 0, 0, 2048, -1024, 223, 191, 159, 255),
    VTX(1200, 0, 600, 4096, 0, 209, 164, 118, 255),
    VTX(1200, 0, -600, 4096, -2048, 209, 164, 118, 255),
    VTX(600, 0, -1200, 3072, -3072, 209, 164, 118, 255),
    VTX(-600, 0, -1200, 1024, -3072, 209, 164, 118, 255),
    VTX(0, -800, 0, 1024, 2048, 81, 72, 55, 255),
    VTX(600, -800, -1200, 2048, 4096, 81, 72, 55, 255),
    VTX(1200, -800, -600, 3072, 3072, 81, 72, 55, 255),
    VTX(-600, -800, -1200, 0, 4096, 81, 72, 55, 255),
    VTX(-1200, -800, -600, -1024, 3072, 81, 72, 55, 255),
    VTX(-1200, -800, 600, -1024, 1024, 81, 72, 55, 255),
    VTX(-600, -800, 1200, 0, 0, 81, 72, 55, 255),
    VTX(-1200, -800, 600, -1024, 1024, 81, 72, 55, 255),
    VTX(600, -800, 1200, 2048, 0, 81, 72, 55, 255),
    VTX(1200, -800, 600, 3072, 1024, 81, 72, 55, 255),
}; 

Vtx object_jya_objVtx_00C860[] = {
    VTX(-800, 0, -900, 0, 3710, 177, 164, 138, 255),
    VTX(-800, 1905, -900, 0, -1000, 169, 154, 126, 255),
    VTX(-800, 1905, -700, 512, -1023, 169, 154, 126, 255),
    VTX(-800, 0, -700, 512, 3710, 177, 164, 138, 255),
    VTX(800, 0, -900, 0, 3710, 177, 164, 138, 255),
    VTX(800, 1905, -900, 0, -1000, 169, 154, 126, 255),
    VTX(800, 1905, -700, 512, -1023, 169, 154, 126, 255),
    VTX(800, 0, -700, 512, 3710, 177, 164, 138, 255),
    VTX(800, 0, 700, 0, 3840, 177, 164, 138, 255),
    VTX(800, 1905, 700, 0, -1027, 169, 154, 126, 255),
    VTX(800, 1905, 900, 512, -1043, 169, 154, 126, 255),
    VTX(800, 0, 900, 512, 3840, 177, 164, 138, 255),
    VTX(-800, 0, 700, 0, 3840, 177, 164, 138, 255),
    VTX(-800, 1905, 700, 0, -1027, 169, 154, 126, 255),
    VTX(-800, 1905, 900, 512, -1043, 169, 154, 126, 255),
    VTX(-800, 0, 900, 512, 3840, 177, 164, 138, 255),
}; 

Vtx object_jya_objVtx_00C960[] = {
    VTX(760, 2068, 800, 0, -2991, 169, 154, 126, 255),
    VTX(760, 9200, 800, 0, -21239, 52, 49, 38, 255),
    VTX(840, 9200, 800, 256, -21239, 52, 49, 38, 255),
    VTX(840, 2068, 800, 256, -2991, 169, 154, 126, 255),
    VTX(-840, 2068, 800, 0, -2991, 169, 154, 126, 255),
    VTX(-840, 9200, 800, 0, -21239, 52, 49, 38, 255),
    VTX(-760, 9200, 800, 256, -21239, 52, 49, 38, 255),
    VTX(-760, 2068, 800, 256, -2991, 169, 154, 126, 255),
    VTX(-800, 2068, -840, 0, -5493, 169, 154, 126, 255),
    VTX(-800, 7560, -840, 0, -19406, 52, 49, 38, 255),
    VTX(-800, 7640, -760, 256, -19995, 52, 49, 38, 255),
    VTX(-800, 2068, -760, 256, -5598, 169, 154, 126, 255),
    VTX(760, 2068, -800, 0, -7085, 169, 154, 126, 255),
    VTX(760, 7600, -800, 0, -21239, 52, 49, 38, 255),
    VTX(840, 7600, -800, 256, -21239, 52, 49, 38, 255),
    VTX(840, 2068, -800, 256, -7085, 169, 154, 126, 255),
}; 

Vtx object_jya_objVtx_00CA60[] = {
    VTX(700, 1740, -800, 0, -2141, 169, 154, 126, 255),
    VTX(729, 2080, -800, 0, -2954, 169, 154, 126, 255),
    VTX(865, 2080, -800, 512, -2954, 169, 154, 126, 255),
    VTX(900, 1740, -800, 512, -2141, 169, 154, 126, 255),
    VTX(700, 0, -800, 0, 2171, 177, 164, 138, 255),
    VTX(900, 0, -800, 512, 2171, 177, 164, 138, 255),
    VTX(700, 1740, 800, 0, -2152, 169, 154, 126, 255),
    VTX(745, 2100, 800, 0, -2991, 169, 154, 126, 255),
    VTX(862, 2100, 800, 512, -2991, 169, 154, 126, 255),
    VTX(900, 1740, 800, 512, -2152, 169, 154, 126, 255),
    VTX(700, 0, 800, 0, 2301, 177, 164, 138, 255),
    VTX(900, 0, 800, 512, 2301, 177, 164, 138, 255),
    VTX(-900, 1740, -800, 0, -2141, 169, 154, 126, 255),
    VTX(-871, 2079, -800, 0, -2954, 169, 154, 126, 255),
    VTX(-735, 2079, -800, 512, -2954, 169, 154, 126, 255),
    VTX(-700, 1740, -800, 512, -2141, 169, 154, 126, 255),
    VTX(-900, 0, -800, 0, 2171, 177, 164, 138, 255),
    VTX(-700, 0, -800, 512, 2171, 177, 164, 138, 255),
    VTX(-900, 1740, 800, 0, -2152, 169, 154, 126, 255),
    VTX(-865, 2094, 800, 0, -2991, 169, 154, 126, 255),
    VTX(-734, 2094, 800, 512, -2991, 169, 154, 126, 255),
    VTX(-700, 1740, 800, 512, -2152, 169, 154, 126, 255),
    VTX(-900, 0, 800, 0, 2301, 177, 164, 138, 255),
    VTX(-700, 0, 800, 512, 2301, 177, 164, 138, 255),
}; 

Vtx object_jya_objVtx_00CBE0[] = {
    VTX(800, 2068, -840, 0, -5493, 169, 154, 126, 255),
    VTX(800, 7560, -840, 0, -19406, 52, 49, 38, 255),
    VTX(800, 7640, -760, 256, -19995, 52, 49, 38, 255),
    VTX(800, 2068, -760, 256, -5598, 169, 154, 126, 255),
    VTX(800, 2068, 760, 0, -1440, 169, 154, 126, 255),
    VTX(800, 9160, 760, 0, -19406, 52, 49, 38, 255),
    VTX(800, 9240, 840, 256, -19995, 52, 49, 38, 255),
    VTX(800, 2068, 840, 256, -1464, 169, 154, 126, 255),
    VTX(-800, 2068, 760, 0, -1440, 169, 154, 126, 255),
    VTX(-800, 9160, 760, 0, -19406, 52, 49, 38, 255),
    VTX(-800, 9240, 840, 256, -19995, 52, 49, 38, 255),
    VTX(-800, 2068, 840, 256, -1464, 169, 154, 126, 255),
    VTX(-840, 2068, -800, 0, -7085, 169, 154, 126, 255),
    VTX(-840, 7600, -800, 0, -21239, 52, 49, 38, 255),
    VTX(-760, 7600, -800, 256, -21239, 52, 49, 38, 255),
    VTX(-760, 2068, -800, 256, -7085, 169, 154, 126, 255),
}; 

Gfx gLiftDlist[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(g1fLiftBottomTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 0, 0, 5, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_00C500, 5, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP1Triangle(0, 3, 4, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(gLiftTopTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 64, 0, 0, 1, 4, 6, 0, 0),
    gsSPVertex(object_jya_objVtx_00C550, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
    gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 24, 26, 27, 0),
    gsSP2Triangles(28, 29, 30, 0, 28, 30, 31, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(g1fLiftBottomTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 0, 0, 5, 5, 0, 0),
    gsSPVertex(object_jya_objVtx_00C750, 17, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 2, 0),
    gsSP2Triangles(4, 5, 2, 0, 5, 6, 2, 0),
    gsSP2Triangles(6, 0, 2, 0, 7, 8, 9, 0),
    gsSP2Triangles(7, 10, 8, 0, 7, 11, 10, 0),
    gsSP2Triangles(7, 12, 11, 0, 13, 14, 7, 0),
    gsSP2Triangles(15, 13, 7, 0, 7, 9, 16, 0),
    gsSP1Triangle(16, 15, 7, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(gLiftChainTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 32, 0, 2, 0, 4, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, TEXEL0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8113078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK),
    gsSPVertex(object_jya_objVtx_00C860, 16, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(gLiftUpperChainTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 32, 0, 2, 0, 3, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPVertex(object_jya_objVtx_00C960, 16, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(gLiftChainTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 32, 0, 2, 0, 4, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, TEXEL0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8113078),
    gsSPVertex(object_jya_objVtx_00CA60, 24, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 0, 3, 0, 4, 3, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 6, 8, 9, 0),
    gsSP2Triangles(10, 6, 9, 0, 10, 9, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsSP2Triangles(16, 12, 15, 0, 16, 15, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 18, 20, 21, 0),
    gsSP2Triangles(22, 18, 21, 0, 22, 21, 23, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(gLiftUpperChainTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 32, 0, 2, 0, 3, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPVertex(object_jya_objVtx_00CBE0, 16, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsSPEndDisplayList(),
}; 

static u8 unaccounted_00D088[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
}; 

CamData gLiftCol_camDataList_0000D090[1] = {
	{ 0x0000, 0, 0x00000000 }, // 0x0000D090

}; 

u32 gLiftCol_polygonTypes_0000D098[] = {
	 0x00000000, 0x000007C2, 
	 0x00000000, 0x000207C2, 

}; 

RoomPoly gLiftCol_polygons_0000D0A8[] = {
	{ 0x0000, 0x0000, 0x0001, 0x0002, 0x5A82, 0x0000, 0x5A82, 0xFB07 }, // 0x0000D0A8
	{ 0x0000, 0x0000, 0x0002, 0x0003, 0x5A82, 0x0000, 0x5A82, 0xFB07 }, // 0x0000D0B8
	{ 0x0000, 0x0004, 0x0005, 0x0001, 0x0000, 0x0000, 0x7FFF, 0xFB50 }, // 0x0000D0C8
	{ 0x0000, 0x0004, 0x0001, 0x0000, 0x0000, 0x0000, 0x7FFF, 0xFB50 }, // 0x0000D0D8
	{ 0x0000, 0x0006, 0x0007, 0x0005, 0xA57E, 0x0000, 0x5A82, 0xFB07 }, // 0x0000D0E8
	{ 0x0000, 0x0006, 0x0005, 0x0004, 0xA57E, 0x0000, 0x5A82, 0xFB07 }, // 0x0000D0F8
	{ 0x0000, 0x0008, 0x0009, 0x0007, 0x8001, 0x0000, 0x0000, 0xFB50 }, // 0x0000D108
	{ 0x0000, 0x0008, 0x0007, 0x0006, 0x8001, 0x0000, 0x0000, 0xFB50 }, // 0x0000D118
	{ 0x0000, 0x000A, 0x000B, 0x0009, 0xA57E, 0x0000, 0xA57E, 0xFB07 }, // 0x0000D128
	{ 0x0000, 0x000A, 0x0009, 0x0008, 0xA57E, 0x0000, 0xA57E, 0xFB07 }, // 0x0000D138
	{ 0x0000, 0x000C, 0x000D, 0x000B, 0x0000, 0x0000, 0x8001, 0xFB50 }, // 0x0000D148
	{ 0x0000, 0x000C, 0x000B, 0x000A, 0x0000, 0x0000, 0x8001, 0xFB50 }, // 0x0000D158
	{ 0x0000, 0x000E, 0x000F, 0x000D, 0x5A82, 0x0000, 0xA57E, 0xFB07 }, // 0x0000D168
	{ 0x0000, 0x000E, 0x000D, 0x000C, 0x5A82, 0x0000, 0xA57E, 0xFB07 }, // 0x0000D178
	{ 0x0000, 0x0003, 0x0002, 0x000F, 0x7FFF, 0x0000, 0x0000, 0xFB50 }, // 0x0000D188
	{ 0x0000, 0x0003, 0x000F, 0x000E, 0x7FFF, 0x0000, 0x0000, 0xFB50 }, // 0x0000D198
	{ 0x0000, 0x0008, 0x0006, 0x0004, 0x0000, 0x7FFF, 0x0000, 0x0000 }, // 0x0000D1A8
	{ 0x0000, 0x0008, 0x0004, 0x0000, 0x0000, 0x7FFF, 0x0000, 0x0000 }, // 0x0000D1B8
	{ 0x0000, 0x0008, 0x0000, 0x0003, 0x0000, 0x7FFF, 0x0000, 0x0000 }, // 0x0000D1C8
	{ 0x0000, 0x0008, 0x0003, 0x000E, 0x0000, 0x7FFF, 0x0000, 0x0000 }, // 0x0000D1D8
	{ 0x0000, 0x0008, 0x000E, 0x000C, 0x0000, 0x7FFF, 0x0000, 0x0000 }, // 0x0000D1E8
	{ 0x0000, 0x0008, 0x000C, 0x000A, 0x0000, 0x7FFF, 0x0000, 0x0000 }, // 0x0000D1F8
	{ 0x0000, 0x0005, 0x0007, 0x0009, 0x0000, 0x8001, 0x0000, 0xFCE0 }, // 0x0000D208
	{ 0x0000, 0x0005, 0x0009, 0x000B, 0x0000, 0x8001, 0x0000, 0xFCE0 }, // 0x0000D218
	{ 0x0000, 0x0005, 0x000B, 0x000D, 0x0000, 0x8001, 0x0000, 0xFCE0 }, // 0x0000D228
	{ 0x0000, 0x0005, 0x000D, 0x000F, 0x0000, 0x8001, 0x0000, 0xFCE0 }, // 0x0000D238
	{ 0x0000, 0x0005, 0x000F, 0x0002, 0x0000, 0x8001, 0x0000, 0xFCE0 }, // 0x0000D248
	{ 0x0000, 0x0005, 0x0002, 0x0001, 0x0000, 0x8001, 0x0000, 0xFCE0 }, // 0x0000D258
	{ 0x0000, 0x2010, 0x0011, 0x0012, 0xA57E, 0x0000, 0xA57E, 0x0425 }, // 0x0000D268
	{ 0x0000, 0x2010, 0x0012, 0x0013, 0xA57E, 0x0000, 0xA57E, 0x0425 }, // 0x0000D278
	{ 0x0000, 0x2013, 0x0012, 0x0014, 0x5A82, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D288
	{ 0x0000, 0x2013, 0x0014, 0x0015, 0x5A82, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D298
	{ 0x0000, 0x2015, 0x0014, 0x0016, 0x5A82, 0x0000, 0x5A82, 0xFB4E }, // 0x0000D2A8
	{ 0x0000, 0x2015, 0x0016, 0x0017, 0x5A82, 0x0000, 0x5A82, 0xFB4E }, // 0x0000D2B8
	{ 0x0000, 0x2017, 0x0016, 0x0011, 0xA57E, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D2C8
	{ 0x0000, 0x2017, 0x0011, 0x0010, 0xA57E, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D2D8
	{ 0x0000, 0x2018, 0x0019, 0x001A, 0xA57E, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D2E8
	{ 0x0000, 0x2018, 0x001A, 0x001B, 0xA57E, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D2F8
	{ 0x0000, 0x201B, 0x001A, 0x001C, 0x5A82, 0x0000, 0xA57E, 0xFB4E }, // 0x0000D308
	{ 0x0000, 0x201B, 0x001C, 0x001D, 0x5A82, 0x0000, 0xA57E, 0xFB4E }, // 0x0000D318
	{ 0x0000, 0x201D, 0x001C, 0x001E, 0x5A82, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D328
	{ 0x0000, 0x201D, 0x001E, 0x001F, 0x5A82, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D338
	{ 0x0000, 0x201F, 0x001E, 0x0019, 0xA57E, 0x0000, 0x5A82, 0x0425 }, // 0x0000D348
	{ 0x0000, 0x201F, 0x0019, 0x0018, 0xA57E, 0x0000, 0x5A82, 0x0425 }, // 0x0000D358
	{ 0x0000, 0x2020, 0x0021, 0x0022, 0xA57E, 0x0000, 0xA57E, 0xFB4E }, // 0x0000D368
	{ 0x0000, 0x2020, 0x0022, 0x0023, 0xA57E, 0x0000, 0xA57E, 0xFB4E }, // 0x0000D378
	{ 0x0000, 0x2023, 0x0022, 0x0024, 0x5A82, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D388
	{ 0x0000, 0x2023, 0x0024, 0x0025, 0x5A82, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D398
	{ 0x0000, 0x2025, 0x0024, 0x0026, 0x5A82, 0x0000, 0x5A82, 0x0425 }, // 0x0000D3A8
	{ 0x0000, 0x2025, 0x0026, 0x0027, 0x5A82, 0x0000, 0x5A82, 0x0425 }, // 0x0000D3B8
	{ 0x0000, 0x2027, 0x0026, 0x0021, 0xA57E, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D3C8
	{ 0x0000, 0x2027, 0x0021, 0x0020, 0xA57E, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D3D8
	{ 0x0000, 0x2028, 0x0029, 0x002A, 0xA57E, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D3E8
	{ 0x0000, 0x2028, 0x002A, 0x002B, 0xA57E, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D3F8
	{ 0x0000, 0x202B, 0x002A, 0x002C, 0x5A82, 0x0000, 0xA57E, 0x0425 }, // 0x0000D408
	{ 0x0000, 0x202B, 0x002C, 0x002D, 0x5A82, 0x0000, 0xA57E, 0x0425 }, // 0x0000D418
	{ 0x0000, 0x202D, 0x002C, 0x002E, 0x5A82, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D428
	{ 0x0000, 0x202D, 0x002E, 0x002F, 0x5A82, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D438
	{ 0x0000, 0x202F, 0x002E, 0x0029, 0xA57E, 0x0000, 0x5A82, 0xFB4E }, // 0x0000D448
	{ 0x0000, 0x202F, 0x0029, 0x0028, 0xA57E, 0x0000, 0x5A82, 0xFB4E }, // 0x0000D458
	{ 0x0001, 0x2030, 0x0028, 0x0031, 0xA57E, 0x0000, 0x5A82, 0xFB4E }, // 0x0000D468
	{ 0x0001, 0x2030, 0x002F, 0x0028, 0xA57E, 0x0000, 0x5A82, 0xFB4E }, // 0x0000D478
	{ 0x0001, 0x2032, 0x002F, 0x0030, 0x5A82, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D488
	{ 0x0001, 0x2032, 0x002D, 0x002F, 0x5A82, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D498
	{ 0x0001, 0x2033, 0x002D, 0x0032, 0x5A82, 0x0000, 0xA57E, 0x0425 }, // 0x0000D4A8
	{ 0x0001, 0x2033, 0x002B, 0x002D, 0x5A82, 0x0000, 0xA57E, 0x0425 }, // 0x0000D4B8
	{ 0x0001, 0x2031, 0x002B, 0x0033, 0xA57E, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D4C8
	{ 0x0001, 0x2031, 0x0028, 0x002B, 0xA57E, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D4D8
	{ 0x0001, 0x2034, 0x0020, 0x0035, 0xA57E, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D4E8
	{ 0x0001, 0x2034, 0x0027, 0x0020, 0xA57E, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D4F8
	{ 0x0001, 0x2036, 0x0027, 0x0034, 0x5A82, 0x0000, 0x5A82, 0x0425 }, // 0x0000D508
	{ 0x0001, 0x2036, 0x0025, 0x0027, 0x5A82, 0x0000, 0x5A82, 0x0425 }, // 0x0000D518
	{ 0x0001, 0x2037, 0x0025, 0x0036, 0x5A82, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D528
	{ 0x0001, 0x2037, 0x0023, 0x0025, 0x5A82, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D538
	{ 0x0001, 0x2035, 0x0023, 0x0037, 0xA57E, 0x0000, 0xA57E, 0xFB4E }, // 0x0000D548
	{ 0x0001, 0x2035, 0x0020, 0x0023, 0xA57E, 0x0000, 0xA57E, 0xFB4E }, // 0x0000D558
	{ 0x0001, 0x2038, 0x0018, 0x0039, 0xA57E, 0x0000, 0x5A82, 0x0425 }, // 0x0000D568
	{ 0x0001, 0x2038, 0x001F, 0x0018, 0xA57E, 0x0000, 0x5A82, 0x0425 }, // 0x0000D578
	{ 0x0001, 0x203A, 0x001F, 0x0038, 0x5A82, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D588
	{ 0x0001, 0x203A, 0x001D, 0x001F, 0x5A82, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D598
	{ 0x0001, 0x203B, 0x001D, 0x003A, 0x5A82, 0x0000, 0xA57E, 0xFB4E }, // 0x0000D5A8
	{ 0x0001, 0x203B, 0x001B, 0x001D, 0x5A82, 0x0000, 0xA57E, 0xFB4E }, // 0x0000D5B8
	{ 0x0001, 0x2039, 0x001B, 0x003B, 0xA57E, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D5C8
	{ 0x0001, 0x2039, 0x0018, 0x001B, 0xA57E, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D5D8
	{ 0x0001, 0x203C, 0x0010, 0x003D, 0xA57E, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D5E8
	{ 0x0001, 0x203C, 0x0017, 0x0010, 0xA57E, 0x0000, 0x5A82, 0xFFB9 }, // 0x0000D5F8
	{ 0x0001, 0x203E, 0x0017, 0x003C, 0x5A82, 0x0000, 0x5A82, 0xFB4E }, // 0x0000D608
	{ 0x0001, 0x203E, 0x0015, 0x0017, 0x5A82, 0x0000, 0x5A82, 0xFB4E }, // 0x0000D618
	{ 0x0001, 0x203F, 0x0015, 0x003E, 0x5A82, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D628
	{ 0x0001, 0x203F, 0x0013, 0x0015, 0x5A82, 0x0000, 0xA57E, 0xFFB9 }, // 0x0000D638
	{ 0x0001, 0x203D, 0x0013, 0x003F, 0xA57E, 0x0000, 0xA57E, 0x0425 }, // 0x0000D648
	{ 0x0001, 0x203D, 0x0010, 0x0013, 0xA57E, 0x0000, 0xA57E, 0x0425 }, // 0x0000D658

}; 

Vec3s gLiftCol_vtx_0000D668[] = {
{ 600, 0, 1200 }, // 0x0000D668
{ 600, -800, 1200 }, // 0x0000D66E
{ 1200, -800, 600 }, // 0x0000D674
{ 1200, 0, 600 }, // 0x0000D67A
{ -600, 0, 1200 }, // 0x0000D680
{ -600, -800, 1200 }, // 0x0000D686
{ -1200, 0, 600 }, // 0x0000D68C
{ -1200, -800, 600 }, // 0x0000D692
{ -1200, 0, -600 }, // 0x0000D698
{ -1200, -800, -600 }, // 0x0000D69E
{ -600, 0, -1200 }, // 0x0000D6A4
{ -600, -800, -1200 }, // 0x0000D6AA
{ 600, 0, -1200 }, // 0x0000D6B0
{ 600, -800, -1200 }, // 0x0000D6B6
{ 1200, 0, -600 }, // 0x0000D6BC
{ 1200, -800, -600 }, // 0x0000D6C2
{ 700, 2079, 800 }, // 0x0000D6C8
{ 700, 9300, 800 }, // 0x0000D6CE
{ 800, 9300, 700 }, // 0x0000D6D4
{ 800, 2079, 700 }, // 0x0000D6DA
{ 900, 9300, 800 }, // 0x0000D6E0
{ 900, 2079, 800 }, // 0x0000D6E6
{ 800, 9300, 900 }, // 0x0000D6EC
{ 800, 2079, 900 }, // 0x0000D6F2
{ 700, 2079, -800 }, // 0x0000D6F8
{ 700, 9300, -800 }, // 0x0000D6FE
{ 800, 9300, -900 }, // 0x0000D704
{ 800, 2079, -900 }, // 0x0000D70A
{ 900, 9300, -800 }, // 0x0000D710
{ 900, 2079, -800 }, // 0x0000D716
{ 800, 9300, -700 }, // 0x0000D71C
{ 800, 2079, -700 }, // 0x0000D722
{ -900, 2079, -800 }, // 0x0000D728
{ -900, 9300, -800 }, // 0x0000D72E
{ -800, 9300, -900 }, // 0x0000D734
{ -800, 2079, -900 }, // 0x0000D73A
{ -700, 9300, -800 }, // 0x0000D740
{ -700, 2079, -800 }, // 0x0000D746
{ -800, 9300, -700 }, // 0x0000D74C
{ -800, 2079, -700 }, // 0x0000D752
{ -900, 2079, 800 }, // 0x0000D758
{ -900, 9300, 800 }, // 0x0000D75E
{ -800, 9300, 700 }, // 0x0000D764
{ -800, 2079, 700 }, // 0x0000D76A
{ -700, 9300, 800 }, // 0x0000D770
{ -700, 2079, 800 }, // 0x0000D776
{ -800, 9300, 900 }, // 0x0000D77C
{ -800, 2079, 900 }, // 0x0000D782
{ -800, 0, 900 }, // 0x0000D788
{ -900, 0, 800 }, // 0x0000D78E
{ -700, 0, 800 }, // 0x0000D794
{ -800, 0, 700 }, // 0x0000D79A
{ -800, 0, -700 }, // 0x0000D7A0
{ -900, 0, -800 }, // 0x0000D7A6
{ -700, 0, -800 }, // 0x0000D7AC
{ -800, 0, -900 }, // 0x0000D7B2
{ 800, 0, -700 }, // 0x0000D7B8
{ 700, 0, -800 }, // 0x0000D7BE
{ 900, 0, -800 }, // 0x0000D7C4
{ 800, 0, -900 }, // 0x0000D7CA
{ 800, 0, 900 }, // 0x0000D7D0
{ 700, 0, 800 }, // 0x0000D7D6
{ 900, 0, 800 }, // 0x0000D7DC
{ 800, 0, 700 }, // 0x0000D7E2

}; 

CollisionHeader gLiftCol = { -1200, -800, -1200, 1200, 9300, 1200, 64, gLiftCol_vtx_0000D668, 92, gLiftCol_polygons_0000D0A8, gLiftCol_polygonTypes_0000D098, &gLiftCol_camDataList_0000D090, 0, 0 }; 

static u32 padD814 = 0;
static u32 padD818 = 0;
static u32 padD81C = 0;

Vtx object_jya_objVtx_00D820[] = {
    VTX(599, 0, -600, 819, 1638, 115, 102, 78, 255),
    VTX(0, 0, -600, 1191, 1063, 234, 231, 223, 255),
    VTX(424, 0, -424, 759, 1362, 234, 231, 223, 255),
    VTX(-1, 0, -848, 1430, 1216, 115, 102, 78, 255),
    VTX(-600, 0, -600, 1562, 486, 115, 102, 78, 255),
    VTX(0, 0, 0, 614, 690, 255, 255, 255, 255),
    VTX(0, 0, 600, 36, 318, 234, 231, 223, 255),
    VTX(424, 0, 424, -58, 835, 234, 231, 223, 255),
    VTX(599, 0, 599, -334, 895, 115, 102, 78, 255),
    VTX(-1, 0, 847, -201, 165, 115, 102, 78, 255),
    VTX(600, 0, 0, 241, 1268, 234, 231, 223, 255),
    VTX(846, 0, -1, 89, 1505, 115, 102, 78, 255),
    VTX(-424, 0, -424, 1285, 545, 234, 231, 223, 255),
    VTX(-848, 0, -1, 1141, -125, 115, 102, 78, 255),
    VTX(-600, 0, 0, 986, 113, 234, 231, 223, 255),
    VTX(-600, 0, 599, 410, -258, 115, 102, 78, 255),
    VTX(-424, 0, 424, 469, 19, 234, 231, 223, 255),
}; 

Vtx object_jya_objVtx_00D930[] = {
    VTX(-2812, 2270, -270, 186, -157, 255, 255, 255, 255),
    VTX(-457, 729, -424, 0, 4096, 255, 255, 255, 153),
    VTX(-2630, 2439, -318, 116, -314, 255, 255, 255, 255),
    VTX(-881, 729, -600, 256, 4096, 255, 255, 255, 153),
    VTX(-2782, 2052, -411, 256, 0, 255, 255, 255, 255),
    VTX(-2782, 2052, -411, 100, -380, 255, 255, 255, 255),
    VTX(-2841, 1888, -320, 256, 0, 255, 255, 255, 255),
    VTX(-1305, 729, -424, 256, 4096, 255, 255, 255, 153),
    VTX(-881, 729, -600, 0, 4096, 255, 255, 255, 153),
    VTX(-2768, 1749, -167, 191, -75, 255, 255, 255, 255),
    VTX(-1305, 729, -424, 0, 4096, 255, 255, 255, 153),
    VTX(-2841, 1888, -320, 126, -150, 255, 255, 255, 255),
    VTX(-1481, 729, 0, 256, 4096, 255, 255, 255, 153),
    VTX(-2744, 1602, 107, 256, 0, 255, 255, 255, 255),
    VTX(-2744, 1602, 107, 122, 145, 255, 255, 255, 255),
    VTX(-2752, 1843, 385, 256, 0, 255, 255, 255, 255),
    VTX(-1305, 729, 424, 256, 4096, 255, 255, 255, 153),
    VTX(-1481, 729, 0, 0, 4096, 255, 255, 255, 153),
    VTX(-2759, 2016, 375, 174, 174, 255, 255, 255, 255),
    VTX(-1305, 729, 424, 0, 4096, 255, 255, 255, 153),
    VTX(-2752, 1843, 385, 92, 348, 255, 255, 255, 255),
    VTX(-881, 729, 600, 256, 4096, 255, 255, 255, 153),
    VTX(-2839, 2195, 460, 256, 0, 255, 255, 255, 255),
    VTX(-2839, 2195, 460, 107, 292, 255, 255, 255, 255),
    VTX(-2622, 2461, 347, 256, 0, 255, 255, 255, 255),
    VTX(-457, 729, 424, 256, 4096, 255, 255, 255, 153),
    VTX(-881, 729, 600, 0, 4096, 255, 255, 255, 153),
    VTX(-2561, 2615, 0, 256, 0, 255, 255, 255, 255),
    VTX(-281, 729, 0, 256, 4096, 255, 255, 255, 153),
    VTX(-457, 729, 424, 0, 4096, 255, 255, 255, 153),
    VTX(-2622, 2461, 347, 125, 108, 255, 255, 255, 255),
    VTX(-2561, 2615, 0, 129, -111, 255, 255, 255, 255),
    VTX(-2630, 2439, -318, 256, 0, 255, 255, 255, 255),
    VTX(-457, 729, -424, 256, 4096, 255, 255, 255, 153),
    VTX(-281, 729, 0, 0, 4096, 255, 255, 255, 153),
}; 

Gfx gBombchuiwaLightDlist2[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gCobraMirrorStoneTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 0, 0, 5, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, COMBINED, 0, PRIMITIVE, 0),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8104DD8),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsSPVertex(object_jya_objVtx_00D820, 17, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
    gsSP2Triangles(3, 4, 1, 0, 1, 5, 2, 0),
    gsSP2Triangles(5, 6, 7, 0, 6, 8, 7, 0),
    gsSP2Triangles(6, 9, 8, 0, 0, 10, 11, 0),
    gsSP2Triangles(2, 10, 0, 0, 2, 5, 10, 0),
    gsSP2Triangles(5, 7, 10, 0, 7, 8, 10, 0),
    gsSP2Triangles(11, 10, 8, 0, 12, 1, 4, 0),
    gsSP2Triangles(12, 5, 1, 0, 13, 14, 4, 0),
    gsSP2Triangles(14, 12, 4, 0, 14, 5, 12, 0),
    gsSP2Triangles(15, 14, 13, 0, 16, 14, 15, 0),
    gsSP2Triangles(16, 5, 14, 0, 9, 16, 15, 0),
    gsSP2Triangles(6, 16, 9, 0, 6, 5, 16, 0),
    gsSPEndDisplayList(),
}; 

Gfx gBombchuiwaLightDlist1[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gBigMirrorGradientTex, 0, 0, G_IM_FMT_IA, G_IM_SIZ_16b, 8, 128, 0, 1, 3, 3, 7, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, TEXEL0, 0, PRIMITIVE, 0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC81049D8),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsSPVertex(object_jya_objVtx_00D930, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
    gsSP2Triangles(0, 4, 3, 0, 5, 6, 7, 0),
    gsSP2Triangles(5, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(9, 12, 10, 0, 9, 13, 12, 0),
    gsSP2Triangles(14, 15, 16, 0, 14, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 18, 21, 19, 0),
    gsSP2Triangles(18, 22, 21, 0, 23, 24, 25, 0),
    gsSP2Triangles(23, 25, 26, 0, 27, 28, 29, 0),
    gsSP1Triangle(27, 29, 30, 0),
    gsSPVertex(object_jya_objVtx_00DB20, 4, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSPEndDisplayList(),
}; 

static u8 unaccounted_00DD18[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
}; 

Vtx object_jya_objVtx_00DD20[] = {
    VTX(-333, 408, 408, 0, -1195, 113, 124, 139, 255),
    VTX(-400, 490, 490, 512, -1536, 151, 133, 100, 255),
    VTX(-693, 283, 283, 512, 512, 106, 94, 71, 255),
    VTX(-577, 236, 236, 0, 512, 113, 124, 139, 255),
    VTX(-400, 490, 490, 512, 512, 151, 133, 100, 255),
    VTX(-333, 408, 408, 0, 512, 113, 124, 139, 255),
    VTX(0, 471, 471, 0, -1195, 113, 124, 139, 255),
    VTX(0, 566, 566, 512, -1536, 106, 94, 71, 255),
    VTX(333, 408, 408, 0, -1195, 113, 124, 139, 255),
    VTX(400, 490, 490, 512, -1536, 151, 133, 100, 255),
    VTX(0, 566, 566, 512, 512, 106, 94, 71, 255),
    VTX(0, 471, 471, 0, 512, 113, 124, 139, 255),
    VTX(577, 236, 236, 0, -1195, 113, 124, 139, 255),
    VTX(693, 283, 283, 512, -1536, 106, 94, 71, 255),
    VTX(400, 490, 490, 512, 512, 151, 133, 100, 255),
    VTX(333, 408, 408, 0, 512, 113, 124, 139, 255),
    VTX(667, 0, 0, 0, -1195, 113, 124, 139, 255),
    VTX(800, 0, 0, 512, -1536, 151, 133, 100, 255),
    VTX(693, 283, 283, 512, 512, 106, 94, 71, 255),
    VTX(577, 236, 236, 0, 512, 113, 124, 139, 255),
    VTX(800, 0, 0, 512, 512, 151, 133, 100, 255),
    VTX(667, 0, 0, 0, 512, 113, 124, 139, 255),
    VTX(577, -236, -236, 0, -1195, 113, 124, 139, 255),
    VTX(693, -283, -283, 512, -1536, 106, 94, 71, 255),
    VTX(333, -408, -408, 0, -1195, 113, 124, 139, 255),
    VTX(400, -490, -490, 512, -1536, 151, 133, 100, 255),
    VTX(693, -283, -283, 512, 512, 106, 94, 71, 255),
    VTX(577, -236, -236, 0, 512, 113, 124, 139, 255),
    VTX(400, -490, -490, 512, 512, 151, 133, 100, 255),
    VTX(333, -408, -408, 0, 512, 113, 124, 139, 255),
    VTX(0, -471, -471, 0, -1195, 113, 124, 139, 255),
    VTX(0, -566, -566, 512, -1536, 106, 94, 71, 255),
}; 

Vtx object_jya_objVtx_00DF20[] = {
    VTX(-333, -408, -408, 0, -1195, 113, 124, 139, 255),
    VTX(-400, -490, -490, 512, -1536, 151, 133, 100, 255),
    VTX(0, -566, -566, 512, 512, 106, 94, 71, 255),
    VTX(0, -471, -471, 0, 512, 113, 124, 139, 255),
    VTX(-577, -236, -236, 0, -1195, 113, 124, 139, 255),
    VTX(-693, -283, -283, 512, -1536, 106, 94, 71, 255),
    VTX(-400, -490, -490, 512, 512, 151, 133, 100, 255),
    VTX(-333, -408, -408, 0, 512, 113, 124, 139, 255),
    VTX(-693, -283, -283, 512, 512, 106, 94, 71, 255),
    VTX(-577, -236, -236, 0, 512, 113, 124, 139, 255),
    VTX(-667, 0, 0, 0, -1195, 113, 124, 139, 255),
    VTX(-800, 0, 0, 512, -1536, 151, 133, 100, 255),
    VTX(-577, 236, 236, 0, -1195, 113, 124, 139, 255),
    VTX(-693, 283, 283, 512, -1536, 106, 94, 71, 255),
    VTX(-800, 0, 0, 512, 512, 151, 133, 100, 255),
    VTX(-667, 0, 0, 0, 512, 113, 124, 139, 255),
}; 

Vtx object_jya_objVtx_00E020[] = {
    VTX(880, 653, 591, 0, 512, 57, 61, 69, 255),
    VTX(-880, 653, 591, 0, 512, 57, 61, 69, 255),
    VTX(0, 31, -31, 0, 512, 198, 202, 208, 255),
    VTX(880, -591, -653, 0, 512, 57, 61, 69, 255),
    VTX(-880, -591, -653, 0, 512, 57, 61, 69, 255),
}; 

Vtx object_jya_objVtx_00E070[] = {
    VTX(0, 0, 0, 512, 512, 255, 255, 255, 255),
    VTX(333, 408, 408, 725, 142, 255, 255, 255, 255),
    VTX(0, 471, 471, 512, 85, 255, 255, 255, 255),
    VTX(-333, 408, 408, 299, 142, 255, 255, 255, 255),
    VTX(-333, 408, 408, 299, 142, 255, 255, 255, 255),
    VTX(-577, 236, 236, 142, 299, 255, 255, 255, 255),
    VTX(-577, 236, 236, 142, 299, 255, 255, 255, 255),
    VTX(-667, 0, 0, 85, 512, 255, 255, 255, 255),
    VTX(-577, -236, -236, 142, 725, 255, 255, 255, 255),
    VTX(-667, 0, 0, 85, 512, 255, 255, 255, 255),
    VTX(-577, -236, -236, 142, 725, 255, 255, 255, 255),
    VTX(-333, -408, -408, 299, 882, 255, 255, 255, 255),
    VTX(-333, -408, -408, 299, 882, 255, 255, 255, 255),
    VTX(0, -471, -471, 512, 939, 255, 255, 255, 255),
    VTX(333, -408, -408, 725, 882, 255, 255, 255, 255),
    VTX(667, 0, 0, 939, 512, 255, 255, 255, 255),
    VTX(577, -236, -236, 882, 725, 255, 255, 255, 255),
    VTX(577, -236, -236, 882, 725, 255, 255, 255, 255),
    VTX(577, 236, 236, 882, 299, 255, 255, 255, 255),
    VTX(577, 236, 236, 882, 299, 255, 255, 255, 255),
}; 

Gfx gBigMirrorDlist3[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(object_jya_objTex_01B740, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 16, 0, 0, 0, 4, 4, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_00DD20, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
    gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 24, 26, 27, 0),
    gsSP2Triangles(28, 29, 30, 0, 28, 30, 31, 0),
    gsSPVertex(object_jya_objVtx_00DF20, 16, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsDPPipeSync(),
    gsSPTexture(0, 0, 0, 0, G_OFF),
    gsDPSetCombineLERP(SHADE, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, 1,
                       K5, K5, 0, COMBINED, 0, 0, 0, COMBINED),
    gsSPVertex(object_jya_objVtx_00E020, 5, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 0, 2, 0),
    gsSP2Triangles(4, 3, 2, 0, 4, 2, 1, 0),
    gsSPEndDisplayList(),
}; 

Gfx gBigMirrorDlist4[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gCobraMirrorMirrorTex, 0, 0, G_IM_FMT_IA, G_IM_SIZ_16b, 32, 32, 0, 0, 0, 5, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, TEXEL0, 0, PRIMITIVE, 0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, TEXEL1, 0, 1, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC81049D8),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 127),
    gsSPVertex(object_jya_objVtx_00E070, 20, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 0, 2, 0),
    gsSP2Triangles(0, 4, 5, 0, 0, 6, 7, 0),
    gsSP2Triangles(8, 0, 9, 0, 0, 10, 11, 0),
    gsSP2Triangles(0, 12, 13, 0, 14, 0, 13, 0),
    gsSP2Triangles(15, 0, 16, 0, 0, 14, 17, 0),
    gsSP2Triangles(0, 15, 18, 0, 0, 19, 1, 0),
    gsSPEndDisplayList(),
}; 

static u8 unaccounted_00E388[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
}; 

Vtx object_jya_objVtx_00E390[] = {
    VTX(0, 1400, 0, 717, 1638, 52, 49, 38, 255),
    VTX(200, 921, 200, 676, 2232, 134, 119, 89, 255),
    VTX(400, 1200, 0, 1024, 2048, 52, 49, 38, 255),
    VTX(-200, 921, 200, 267, 2027, 134, 119, 89, 255),
    VTX(600, 801, 0, 1025, 2560, 52, 49, 38, 255),
    VTX(-400, 1200, 0, 205, 1638, 52, 49, 38, 255),
    VTX(-600, 801, 0, -204, 1945, 52, 49, 38, 255),
    VTX(-400, 460, 200, -174, 2396, 115, 102, 78, 255),
    VTX(-600, 400, 0, -409, 2355, 35, 31, 25, 255),
    VTX(-600, 0, 0, -614, 2765, 25, 20, 15, 255),
    VTX(-200, 0, 200, -205, 2970, 69, 62, 48, 255),
    VTX(200, 0, 200, 205, 3174, 69, 62, 48, 255),
    VTX(400, 460, 200, 645, 2805, 115, 102, 78, 255),
    VTX(0, 460, 300, 236, 2601, 158, 142, 111, 255),
    VTX(600, 0, 0, 614, 3379, 25, 20, 15, 255),
    VTX(600, 400, 0, 819, 2969, 35, 31, 25, 255),
}; 

Gfx gBombiwaDlist[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gBombiwaRockTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 64, 0, 0, 0, 5, 6, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_00E390, 16, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
    gsSP2Triangles(1, 4, 2, 0, 0, 5, 3, 0),
    gsSP2Triangles(5, 6, 3, 0, 6, 7, 3, 0),
    gsSP2Triangles(6, 8, 7, 0, 8, 9, 7, 0),
    gsSP2Triangles(9, 10, 7, 0, 11, 12, 13, 0),
    gsSP2Triangles(12, 1, 13, 0, 11, 14, 12, 0),
    gsSP2Triangles(14, 15, 12, 0, 15, 4, 12, 0),
    gsSP2Triangles(4, 1, 12, 0, 7, 13, 3, 0),
    gsSP2Triangles(13, 1, 3, 0, 7, 10, 13, 0),
    gsSP1Triangle(10, 11, 13, 0),
    gsSPEndDisplayList(),
}; 

static u8 unaccounted_00E568[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
}; 

CamData gBombiwaCol_camDataList_0000E570[1] = {
	{ 0x0000, 0, 0x00000000 }, // 0x0000E570

}; 

u32 gBombiwaCol_polygonTypes_0000E578[] = {
	 0x00000000, 0x000007CB, 

}; 

RoomPoly gBombiwaCol_polygons_0000E580[] = {
	{ 0x0000, 0x0000, 0x0001, 0x0002, 0x1D16, 0x3A2D, 0x6E3D, 0xFD84 }, // 0x0000E580
	{ 0x0000, 0x0000, 0x0003, 0x0001, 0x0000, 0x3151, 0x761D, 0xFDE5 }, // 0x0000E590
	{ 0x0000, 0x0001, 0x0004, 0x0002, 0x3EEB, 0x1F8A, 0x6AE9, 0xFE14 }, // 0x0000E5A0
	{ 0x0000, 0x0000, 0x0005, 0x0003, 0xE2EA, 0x3A2D, 0x6E3D, 0xFD84 }, // 0x0000E5B0
	{ 0x0000, 0x0005, 0x0006, 0x0003, 0xC115, 0x1F8A, 0x6AE9, 0xFE14 }, // 0x0000E5C0
	{ 0x0000, 0x0006, 0x0007, 0x0003, 0xC1A7, 0x1B0C, 0x6C77, 0xFE32 }, // 0x0000E5D0
	{ 0x0000, 0x0006, 0x0008, 0x0007, 0xA57E, 0x0000, 0x5A82, 0xFE58 }, // 0x0000E5E0
	{ 0x0000, 0x0008, 0x0009, 0x0007, 0xA57E, 0x0000, 0x5A82, 0xFE58 }, // 0x0000E5F0
	{ 0x0000, 0x0009, 0x000A, 0x0007, 0xC7D0, 0xE792, 0x7061, 0xFEF9 }, // 0x0000E600
	{ 0x0000, 0x000B, 0x000C, 0x000D, 0x1EDF, 0xF294, 0x7B7D, 0xFF0F }, // 0x0000E610
	{ 0x0000, 0x000C, 0x0001, 0x000D, 0x1EE0, 0x0D65, 0x7B7E, 0xFEAE }, // 0x0000E620
	{ 0x0000, 0x000B, 0x000E, 0x000C, 0x3830, 0xE792, 0x7061, 0xFEF9 }, // 0x0000E630
	{ 0x0000, 0x000E, 0x000F, 0x000C, 0x5A82, 0x0000, 0x5A82, 0xFE58 }, // 0x0000E640
	{ 0x0000, 0x000F, 0x0004, 0x000C, 0x5A82, 0x0000, 0x5A82, 0xFE58 }, // 0x0000E650
	{ 0x0000, 0x0004, 0x0001, 0x000C, 0x3E59, 0x1B0C, 0x6C77, 0xFE32 }, // 0x0000E660
	{ 0x0000, 0x0007, 0x000D, 0x0003, 0xE120, 0x0D65, 0x7B7E, 0xFEAE }, // 0x0000E670
	{ 0x0000, 0x000D, 0x0001, 0x0003, 0x0000, 0x1B22, 0x7D16, 0xFE79 }, // 0x0000E680
	{ 0x0000, 0x0007, 0x000A, 0x000D, 0xE121, 0xF294, 0x7B7D, 0xFF0F }, // 0x0000E690
	{ 0x0000, 0x000A, 0x000B, 0x000D, 0x0000, 0xE4CF, 0x7D13, 0xFF3D }, // 0x0000E6A0

}; 

Vec3s gBombiwaCol_vtx_0000E6B0[] = {
{ 0, 1400, 0 }, // 0x0000E6B0
{ 200, 921, 200 }, // 0x0000E6B6
{ 400, 1200, 0 }, // 0x0000E6BC
{ -200, 921, 200 }, // 0x0000E6C2
{ 600, 801, 0 }, // 0x0000E6C8
{ -400, 1200, 0 }, // 0x0000E6CE
{ -600, 801, 0 }, // 0x0000E6D4
{ -400, 460, 200 }, // 0x0000E6DA
{ -600, 400, 0 }, // 0x0000E6E0
{ -600, 0, 0 }, // 0x0000E6E6
{ -200, 0, 200 }, // 0x0000E6EC
{ 200, 0, 200 }, // 0x0000E6F2
{ 400, 460, 200 }, // 0x0000E6F8
{ 0, 460, 300 }, // 0x0000E6FE
{ 600, 0, 0 }, // 0x0000E704
{ 600, 400, 0 }, // 0x0000E70A

}; 

CollisionHeader gBombiwaCol = { -600, 0, 0, 600, 1400, 300, 16, gBombiwaCol_vtx_0000E6B0, 19, gBombiwaCol_polygons_0000E580, gBombiwaCol_polygonTypes_0000E578, &gBombiwaCol_camDataList_0000E570, 0, 0 }; 

static u32 padE73C = 0;

Vtx object_jya_objVtx_00E740[] = {
    VTX(-165, 551, -93, 555, 383, 52, 49, 38, 255),
    VTX(-65, 369, -93, 552, 616, 147, 131, 97, 255),
    VTX(-115, 229, -315, 939, 806, 69, 62, 48, 255),
    VTX(-233, 374, -411, 1104, 618, 35, 31, 25, 255),
    VTX(-34, 117, -143, 659, 978, 225, 200, 131, 255),
    VTX(-314, 132, -274, 968, 1167, 35, 31, 25, 255),
    VTX(0, 0, 0, 438, 1173, 234, 218, 173, 255),
    VTX(-225, -42, -323, 1097, 1307, 69, 62, 48, 255),
    VTX(-375, 12, -458, 1346, 1263, 35, 31, 25, 255),
    VTX(-399, 186, -346, 1101, 972, 35, 31, 25, 255),
    VTX(-406, 230, -317, 1101, 972, 35, 31, 25, 255),
    VTX(-225, 396, 254, 42, 722, 52, 49, 38, 255),
    VTX(-98, 276, 106, 259, 816, 147, 131, 97, 255),
    VTX(-443, 130, 368, -42, 1256, 35, 31, 25, 255),
    VTX(-148, 75, 233, 98, 1175, 81, 72, 55, 255),
    VTX(-362, -49, 283, 96, 1476, 35, 31, 25, 255),
    VTX(-123, -59, 167, 214, 1357, 81, 72, 55, 255),
    VTX(-356, -222, 292, 102, 1741, 35, 31, 25, 255),
    VTX(-173, -187, 197, 198, 1582, 81, 72, 55, 255),
    VTX(-348, -462, 14, 575, 2047, 40, 32, 10, 255),
    VTX(-151, -390, 14, 510, 1846, 102, 82, 24, 255),
    VTX(-371, -316, -259, 996, 1775, 40, 32, 10, 255),
    VTX(-188, -281, -164, 789, 1657, 102, 82, 24, 255),
    VTX(-278, -186, -297, 1013, 1524, 143, 114, 34, 255),
    VTX(-445, -176, -413, 1241, 1561, 40, 32, 10, 255),
}; 

Gfx gBombchuiwaDlist[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gBombiwaRockTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 64, 0, 0, 0, 5, 6, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_00E740, 25, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(1, 4, 2, 0, 4, 5, 2, 0),
    gsSP2Triangles(6, 5, 4, 0, 6, 7, 5, 0),
    gsSP2Triangles(7, 8, 9, 0, 7, 9, 5, 0),
    gsSP2Triangles(10, 3, 2, 0, 10, 2, 5, 0),
    gsSP2Triangles(0, 11, 12, 0, 0, 12, 1, 0),
    gsSP2Triangles(12, 4, 1, 0, 12, 6, 4, 0),
    gsSP2Triangles(11, 13, 14, 0, 11, 14, 12, 0),
    gsSP2Triangles(14, 6, 12, 0, 13, 15, 16, 0),
    gsSP2Triangles(13, 16, 14, 0, 15, 17, 18, 0),
    gsSP2Triangles(15, 18, 16, 0, 18, 6, 16, 0),
    gsSP2Triangles(6, 14, 16, 0, 17, 19, 20, 0),
    gsSP2Triangles(17, 20, 18, 0, 20, 6, 18, 0),
    gsSP2Triangles(19, 21, 22, 0, 19, 22, 20, 0),
    gsSP2Triangles(22, 6, 20, 0, 21, 23, 22, 0),
    gsSP2Triangles(21, 24, 23, 0, 24, 8, 7, 0),
    gsSP2Triangles(24, 7, 23, 0, 7, 6, 23, 0),
    gsSP1Triangle(6, 22, 23, 0),
    gsSPEndDisplayList(),
}; 

static u8 unaccounted_00E9E8[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
}; 

Vtx object_jya_objVtx_00E9F0[] = {
    VTX(-30, -36, 225, 833, 1081, 100, 89, 67, 255),
    VTX(131, 118, 145, 408, 1714, 100, 89, 67, 255),
    VTX(34, 158, 119, 632, 1877, 100, 89, 67, 255),
    VTX(171, -80, 59, 163, 902, 134, 119, 89, 255),
    VTX(171, -80, 59, 3235, 902, 81, 72, 55, 255),
    VTX(89, -100, -107, 2645, 818, 100, 89, 67, 255),
    VTX(93, 188, -117, 2632, 1998, 69, 62, 48, 255),
    VTX(-30, -36, 225, 833, 1081, 100, 89, 67, 255),
    VTX(34, 158, 119, 632, 1877, 100, 89, 67, 255),
    VTX(-139, 188, 83, 1272, 1998, 115, 102, 78, 255),
    VTX(34, 158, 119, 0, 512, 69, 62, 48, 255),
    VTX(93, 188, -117, 0, 1770, 81, 72, 55, 255),
    VTX(-81, 188, -82, 550, 1380, 69, 62, 48, 255),
    VTX(-30, -36, 225, 833, 1081, 100, 89, 67, 255),
    VTX(-139, 188, 83, 1272, 1998, 100, 89, 67, 255),
    VTX(-144, -73, 88, 1267, 930, 134, 119, 89, 255),
    VTX(-139, 188, 83, 1272, 1998, 115, 102, 78, 255),
    VTX(-81, 188, -82, 1921, 1998, 134, 119, 89, 255),
    VTX(-196, 6, -89, 1745, 1252, 134, 119, 89, 255),
    VTX(-30, -36, 225, 833, 1081, 100, 89, 67, 255),
    VTX(-144, -73, 88, 1267, 930, 134, 119, 89, 255),
    VTX(55, -170, 89, 497, 532, 115, 102, 78, 255),
    VTX(-196, 6, -89, 1745, 1252, 69, 62, 48, 255),
    VTX(-60, -191, -76, 1978, 445, 100, 89, 67, 255),
    VTX(-30, -36, 225, 833, 1081, 100, 89, 67, 255),
    VTX(55, -170, 89, 497, 532, 69, 62, 48, 255),
    VTX(171, -80, 59, 163, 902, 134, 119, 89, 255),
    VTX(55, -170, 89, -110, 484, 69, 62, 48, 255),
    VTX(-60, -191, -76, 400, 1146, 100, 89, 67, 255),
    VTX(89, -100, -107, -52, 1536, 115, 102, 78, 255),
    VTX(-17, 6, -200, 2262, 1252, 81, 72, 55, 255),
    VTX(-196, 6, -89, 1745, 1252, 115, 102, 78, 255),
    VTX(-81, 188, -82, 1921, 1998, 100, 89, 67, 255),
    VTX(-196, 6, -89, 1745, 1252, 134, 119, 89, 255),
    VTX(-144, -73, 88, 1267, 930, 134, 119, 89, 255),
    VTX(-139, 188, 83, 1272, 1998, 134, 119, 89, 255),
    VTX(-17, 6, -200, 2262, 1252, 100, 89, 67, 255),
    VTX(-81, 188, -82, 1921, 1998, 100, 89, 67, 255),
    VTX(93, 188, -117, 2632, 1998, 69, 62, 48, 255),
    VTX(-81, 188, -82, 550, 1380, 69, 62, 48, 255),
    VTX(-139, 188, 83, 608, 496, 69, 62, 48, 255),
    VTX(34, 158, 119, 0, 512, 69, 62, 48, 255),
    VTX(-17, 6, -200, 2262, 1252, 69, 62, 48, 255),
    VTX(93, 188, -117, 2632, 1998, 69, 62, 48, 255),
    VTX(89, -100, -107, 2645, 818, 69, 62, 48, 255),
    VTX(93, 188, -117, 2632, 1998, 81, 72, 55, 255),
    VTX(131, 118, 145, 3480, 1714, 134, 119, 89, 255),
    VTX(171, -80, 59, 3235, 902, 81, 72, 55, 255),
    VTX(34, 158, 119, 3704, 1877, 69, 62, 48, 255),
    VTX(-17, 6, -200, 2262, 1252, 35, 31, 25, 255),
    VTX(89, -100, -107, 2645, 818, 81, 72, 55, 255),
    VTX(-60, -191, -76, 1978, 445, 69, 62, 48, 255),
    VTX(89, -100, -107, 2645, 818, 115, 102, 78, 255),
    VTX(171, -80, 59, 3235, 902, 115, 102, 78, 255),
    VTX(55, -170, 89, 3569, 532, 69, 62, 48, 255),
    VTX(-17, 6, -200, 2262, 1252, 69, 62, 48, 255),
    VTX(-60, -191, -76, 1978, 445, 100, 89, 67, 255),
    VTX(-196, 6, -89, 1745, 1252, 69, 62, 48, 255),
    VTX(-60, -191, -76, 400, 1146, 134, 119, 89, 255),
    VTX(55, -170, 89, -110, 484, 115, 102, 78, 255),
    VTX(-144, -73, 88, 569, 306, 134, 119, 89, 255),
}; 

Gfx gBombiwaEffectDlist[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gBombiwaRockTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 64, 0, 0, 0, 5, 6, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_00E9F0, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
    gsSP2Triangles(4, 5, 6, 0, 7, 8, 9, 0),
    gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
    gsSP2Triangles(16, 17, 18, 0, 19, 20, 21, 0),
    gsSP2Triangles(20, 22, 23, 0, 24, 25, 26, 0),
    gsSP1Triangle(27, 28, 29, 0),
    gsSPVertex(object_jya_objVtx_00EBD0, 31, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(15, 18, 16, 0, 19, 20, 21, 0),
    gsSP2Triangles(22, 23, 24, 0, 25, 26, 27, 0),
    gsSP1Triangle(28, 29, 30, 0),
    gsSPEndDisplayList(),
}; 

Vtx object_jya_objVtx_00EEB0[] = {
    VTX(-400, 2400, 0, -244, 0, 134, 119, 89, 255),
    VTX(-280, 2280, 0, 12, 256, 177, 164, 138, 255),
    VTX(280, 2280, 0, 2060, 256, 177, 164, 138, 255),
    VTX(400, 2400, 0, 2316, 0, 134, 119, 89, 255),
    VTX(280, 120, 0, 2055, 256, 177, 164, 138, 255),
    VTX(400, 0, 0, 2311, 0, 134, 119, 89, 255),
    VTX(400, 2400, 0, -2809, 0, 134, 119, 89, 255),
    VTX(280, 2280, 0, -2553, 256, 177, 164, 138, 255),
    VTX(-400, 0, 0, 1331, 0, 134, 119, 89, 255),
    VTX(400, 0, 0, -1229, 0, 134, 119, 89, 255),
    VTX(280, 120, 0, -973, 256, 177, 164, 138, 255),
    VTX(-280, 120, 0, 1075, 256, 177, 164, 138, 255),
    VTX(-400, 2400, 0, -3821, 0, 134, 119, 89, 255),
    VTX(-400, 0, 0, 1299, 0, 134, 119, 89, 255),
    VTX(-280, 120, 0, 1043, 256, 177, 164, 138, 255),
    VTX(-280, 2280, 0, -3565, 256, 177, 164, 138, 255),
}; 

Vtx object_jya_objVtx_00EFB0[] = {
    VTX(0, 1200, 0, -228, -239, 234, 231, 223, 255),
    VTX(280, 120, 0, 2259, 1224, 177, 164, 138, 255),
    VTX(280, 2280, 0, -1691, -2726, 177, 164, 138, 255),
    VTX(-280, 2280, 0, -2715, -1702, 177, 164, 138, 255),
    VTX(-280, 120, 0, 1235, 2248, 177, 164, 138, 255),
}; 

Gfx gKanaamiDlist[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gKanaamiTopTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 64, 0, 0, 0, 5, 6, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, TEXEL0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8113078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_00EEB0, 16, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(gKanaamiMiddleTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 1, 1, 5, 5, 0, 0),
    gsSPVertex(object_jya_objVtx_00EFB0, 5, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 0, 2, 0),
    gsSP2Triangles(4, 0, 3, 0, 1, 0, 4, 0),
    gsSPEndDisplayList(),
}; 

CamData gKanaamiCol_camDataList_0000F100[1] = {
	{ 0x0000, 0, 0x00000000 }, // 0x0000F100

}; 

u32 gKanaamiCol_polygonTypes_0000F108[] = {
	 0x00000000, 0x000007C2, 
	 0x00800000, 0x000007C2, 

}; 

RoomPoly gKanaamiCol_polygons_0000F118[] = {
	{ 0x0000, 0x2000, 0x0001, 0x0002, 0x8001, 0x0000, 0x0000, 0xFE70 }, // 0x0000F118
	{ 0x0000, 0x2000, 0x0002, 0x0003, 0x8001, 0x0000, 0x0000, 0xFE70 }, // 0x0000F128
	{ 0x0000, 0x2004, 0x0005, 0x0001, 0x0000, 0x8001, 0x0000, 0x0000 }, // 0x0000F138
	{ 0x0000, 0x2004, 0x0001, 0x0000, 0x0000, 0x8001, 0x0000, 0x0000 }, // 0x0000F148
	{ 0x0000, 0x2006, 0x0007, 0x0005, 0x7FFF, 0x0000, 0x0000, 0xFE70 }, // 0x0000F158
	{ 0x0000, 0x2006, 0x0005, 0x0004, 0x7FFF, 0x0000, 0x0000, 0xFE70 }, // 0x0000F168
	{ 0x0000, 0x2003, 0x0002, 0x0007, 0x0000, 0x7FFF, 0x0000, 0xF6A0 }, // 0x0000F178
	{ 0x0000, 0x2003, 0x0007, 0x0006, 0x0000, 0x7FFF, 0x0000, 0xF6A0 }, // 0x0000F188
	{ 0x0001, 0x0006, 0x0004, 0x0000, 0x0000, 0x0000, 0x8001, 0x0000 }, // 0x0000F198
	{ 0x0001, 0x0006, 0x0000, 0x0003, 0x0000, 0x0000, 0x8001, 0x0000 }, // 0x0000F1A8
	{ 0x0001, 0x2002, 0x0001, 0x0005, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000F1B8
	{ 0x0001, 0x2002, 0x0005, 0x0007, 0x0000, 0x0000, 0x7FFF, 0xFF9C }, // 0x0000F1C8

}; 

Vec3s gKanaamiCol_vtx_0000F1D8[] = {
{ -400, 0, 0 }, // 0x0000F1D8
{ -400, 0, 100 }, // 0x0000F1DE
{ -400, 2400, 100 }, // 0x0000F1E4
{ -400, 2400, 0 }, // 0x0000F1EA
{ 400, 0, 0 }, // 0x0000F1F0
{ 400, 0, 100 }, // 0x0000F1F6
{ 400, 2400, 0 }, // 0x0000F1FC
{ 400, 2400, 100 }, // 0x0000F202

}; 

CollisionHeader gKanaamiCol = { -400, 0, 0, 400, 2400, 100, 8, gKanaamiCol_vtx_0000F1D8, 12, gKanaamiCol_polygons_0000F118, gKanaamiCol_polygonTypes_0000F108, &gKanaamiCol_camDataList_0000F100, 0, 0 }; 

static u32 padF234 = 0;
static u32 padF238 = 0;
static u32 padF23C = 0;

Vtx object_jya_objVtx_00F240[] = {
    VTX(205, 453, 190, 0, -2365, 234, 231, 223, 255),
    VTX(240, 426, 157, 512, -2853, 147, 131, 97, 255),
    VTX(240, 761, 98, 512, 512, 147, 131, 97, 255),
    VTX(205, 739, 139, 0, 512, 234, 231, 223, 255),
    VTX(205, 739, 139, 0, -994, 234, 231, 223, 255),
    VTX(240, 761, 98, 512, -1250, 147, 131, 97, 255),
    VTX(140, 860, 80, 512, 512, 147, 131, 97, 255),
    VTX(120, 823, 125, 0, 512, 234, 231, 223, 255),
    VTX(120, 823, 125, 0, -1705, 234, 231, 223, 255),
    VTX(140, 860, 80, 512, -2081, 147, 131, 97, 255),
    VTX(-120, 823, 125, 0, 512, 234, 231, 223, 255),
    VTX(-140, 860, 80, 512, 512, 147, 131, 97, 255),
    VTX(-120, 823, 125, 0, -961, 234, 231, 223, 255),
    VTX(-140, 860, 80, 512, -1210, 147, 131, 97, 255),
    VTX(-240, 761, 98, 512, 512, 147, 131, 97, 255),
    VTX(-205, 739, 139, 0, 512, 234, 231, 223, 255),
    VTX(-205, 739, 139, 0, -2350, 234, 231, 223, 255),
    VTX(-240, 761, 98, 512, -2835, 147, 131, 97, 255),
    VTX(-240, 426, 157, 512, 512, 147, 131, 97, 255),
    VTX(-205, 453, 190, 0, 512, 234, 231, 223, 255),
    VTX(-205, 453, 190, 0, -1835, 234, 231, 223, 255),
    VTX(-240, 426, 157, 512, -2233, 147, 131, 97, 255),
    VTX(-80, 210, 195, 512, 512, 147, 131, 97, 255),
    VTX(-68, 268, 223, 0, 512, 234, 231, 223, 255),
    VTX(-68, 268, 223, 0, -944, 234, 231, 223, 255),
    VTX(-80, 210, 195, 512, -1191, 147, 131, 97, 255),
    VTX(80, 210, 195, 512, 512, 147, 131, 97, 255),
    VTX(68, 268, 223, 0, 512, 234, 231, 223, 255),
    VTX(68, 268, 223, 0, -1864, 234, 231, 223, 255),
    VTX(80, 210, 195, 512, -2267, 147, 131, 97, 255),
    VTX(240, 426, 157, 512, 512, 147, 131, 97, 255),
    VTX(205, 453, 190, 0, 512, 234, 231, 223, 255),
}; 

Vtx object_jya_objVtx_00F440[] = {
    VTX(-225, 436, 163, 0, 512, 80, 86, 96, 255),
    VTX(-75, 233, 198, 0, 512, 91, 99, 111, 255),
    VTX(0, 594, 137, 0, 512, 255, 255, 255, 255),
    VTX(75, 233, 198, 0, 512, 113, 124, 139, 255),
    VTX(225, 436, 163, 0, 512, 75, 65, 49, 255),
    VTX(225, 749, 107, 0, 512, 230, 209, 152, 255),
    VTX(131, 841, 91, 0, 512, 230, 209, 152, 255),
    VTX(-131, 841, 91, 0, 512, 155, 183, 201, 255),
    VTX(-225, 749, 107, 0, 512, 155, 183, 201, 255),
}; 

Vtx object_jya_objVtx_00F4D0[] = {
    VTX(202, 0, 71, -554, 1305, 69, 62, 48, 255),
    VTX(202, 100, 71, 38, 1305, 115, 102, 78, 255),
    VTX(159, 93, 91, 0, 1024, 69, 62, 48, 255),
    VTX(159, 0, 91, -554, 1024, 69, 62, 48, 255),
    VTX(159, 93, 91, 1484, 2099, 69, 62, 48, 255),
    VTX(126, 0, 91, 1341, 2848, 35, 31, 25, 255),
    VTX(159, 0, 91, 1484, 2848, 69, 62, 48, 255),
    VTX(64, 90, 212, 1227, 2300, 81, 72, 55, 255),
    VTX(72, 180, 210, 1113, 1752, 134, 119, 89, 255),
    VTX(0, 180, 240, 804, 1839, 134, 119, 89, 255),
    VTX(0, 90, 240, 804, 2561, 81, 72, 55, 255),
    VTX(64, 90, 212, 1076, 2480, 81, 72, 55, 255),
    VTX(6, 0, 204, 829, 3176, 69, 62, 48, 255),
    VTX(-140, 180, 240, 208, 1839, 134, 119, 89, 255),
    VTX(-156, 90, 240, 140, 2561, 81, 72, 55, 255),
    VTX(-101, 0, 204, 373, 3176, 69, 62, 48, 255),
    VTX(202, 100, 71, -690, 1270, 115, 102, 78, 255),
    VTX(173, 191, 8, 0, 1024, 52, 49, 38, 255),
    VTX(159, 93, 91, -830, 1024, 69, 62, 48, 255),
    VTX(180, 242, 185, 1572, 1183, 100, 89, 67, 255),
    VTX(80, 210, 195, 1145, 1469, 69, 62, 48, 255),
    VTX(-80, 210, 195, 463, 1469, 69, 62, 48, 255),
    VTX(-180, 242, 185, 36, 1183, 100, 89, 67, 255),
    VTX(304, 410, 92, 2101, -362, 147, 131, 97, 255),
    VTX(240, 426, 157, 1828, -408, 69, 62, 48, 255),
    VTX(-240, 426, 157, -220, -408, 69, 62, 48, 255),
    VTX(-304, 410, 92, -494, -362, 147, 131, 97, 255),
    VTX(350, 721, 70, 2298, -3008, 218, 211, 199, 255),
    VTX(240, 761, 98, 1828, -3309, 69, 62, 48, 255),
    VTX(-240, 761, 98, -220, -3309, 69, 62, 48, 255),
    VTX(-350, 721, 70, -691, -3008, 218, 211, 199, 255),
    VTX(284, 906, 124, 2016, -4484, 218, 211, 199, 255),
}; 

Vtx object_jya_objVtx_00F6D0[] = {
    VTX(284, 906, 124, 2016, -4484, 218, 211, 199, 255),
    VTX(140, 860, 80, 1401, -4163, 81, 72, 55, 255),
    VTX(240, 761, 98, 1828, -3309, 69, 62, 48, 255),
    VTX(-140, 860, 80, 207, -4163, 69, 62, 48, 255),
    VTX(-284, 906, 124, -409, -4484, 218, 211, 199, 255),
    VTX(-240, 761, 98, -220, -3309, 69, 62, 48, 255),
    VTX(-350, 721, 70, -691, -3008, 218, 211, 199, 255),
    VTX(172, 1029, 146, 1572, -5419, 218, 211, 199, 255),
    VTX(172, 1029, 146, 1620, -307, 218, 211, 199, 255),
    VTX(152, 926, 206, 1024, 1024, 81, 72, 55, 255),
    VTX(140, 860, 80, 1859, 891, 81, 72, 55, 255),
    VTX(0, 930, 302, -41, 685, 218, 211, 199, 255),
    VTX(70, 890, 242, 206, 876, 69, 62, 48, 255),
    VTX(73, 942, 297, 139, 523, 218, 211, 199, 255),
    VTX(0, 930, 302, 306, 1389, 218, 211, 199, 255),
    VTX(-70, 890, 242, -243, 1153, 69, 62, 48, 255),
    VTX(70, 890, 242, 51, 1930, 69, 62, 48, 255),
    VTX(-171, 1029, 145, 36, -5419, 203, 195, 178, 255),
    VTX(237, 147, -50, -1092, 1024, 218, 211, 199, 255),
    VTX(202, 100, 71, -1298, 1794, 115, 102, 78, 255),
    VTX(261, 74, -105, -546, 1024, 147, 131, 97, 255),
    VTX(202, 0, 71, -825, 2138, 69, 62, 48, 255),
    VTX(240, 0, -160, 0, 1024, 69, 62, 48, 255),
    VTX(173, 191, 8, -528, 1024, 52, 49, 38, 255),
    VTX(202, 100, 71, -357, 1737, 115, 102, 78, 255),
    VTX(237, 147, -50, 0, 1024, 218, 211, 199, 255),
    VTX(173, 191, 8, -792, 1820, 52, 49, 38, 255),
    VTX(180, 242, 185, 0, 1024, 100, 89, 67, 255),
    VTX(159, 93, 91, -1025, 1024, 69, 62, 48, 255),
    VTX(173, 191, 8, -806, 1999, 52, 49, 38, 255),
    VTX(240, 424, -27, 161, 1757, 100, 89, 67, 255),
    VTX(304, 410, 92, 0, 1024, 147, 131, 97, 255),
}; 

Vtx object_jya_objVtx_00F8D0[] = {
    VTX(173, 191, 8, -806, 1999, 52, 49, 38, 255),
    VTX(304, 410, 92, 0, 1024, 147, 131, 97, 255),
    VTX(180, 242, 185, -1363, 1024, 100, 89, 67, 255),
    VTX(240, 424, -27, -1949, 1822, 100, 89, 67, 255),
    VTX(300, 679, -81, -381, 1890, 115, 102, 78, 255),
    VTX(350, 721, 70, 0, 1024, 218, 211, 199, 255),
    VTX(304, 410, 92, -2056, 1024, 147, 131, 97, 255),
    VTX(300, 679, -81, -969, 1024, 115, 102, 78, 255),
    VTX(240, 908, -14, -138, 2230, 147, 131, 97, 255),
    VTX(284, 906, 124, 375, 1991, 218, 211, 199, 255),
    VTX(350, 721, 70, 0, 1024, 218, 211, 199, 255),
    VTX(240, 908, -14, -350, 46, 147, 131, 97, 255),
    VTX(149, 1089, 44, -134, 720, 147, 131, 97, 255),
    VTX(172, 1029, 146, 621, 838, 218, 211, 199, 255),
    VTX(284, 906, 124, 359, -20, 218, 211, 199, 255),
    VTX(-175, 0, -171, 0, 1361, 69, 62, 48, 255),
    VTX(-173, 86, -197, -30, 1805, 115, 102, 78, 255),
    VTX(-107, 0, -240, 557, 1485, 69, 62, 48, 255),
    VTX(-226, 74, -116, -530, 1688, 100, 89, 67, 255),
    VTX(-226, 74, -116, -513, 1024, 100, 89, 67, 255),
    VTX(-175, 147, -130, -265, 1497, 81, 72, 55, 255),
    VTX(-173, 86, -197, 0, 1024, 115, 102, 78, 255),
    VTX(-212, 147, -61, -721, 1536, 69, 62, 48, 255),
    VTX(-175, 147, -130, -677, 2116, 81, 72, 55, 255),
    VTX(168, 147, -130, 1357, 2116, 218, 211, 199, 255),
    VTX(192, 86, -197, 1367, 1570, 115, 102, 78, 255),
    VTX(-173, 86, -197, -667, 1570, 115, 102, 78, 255),
    VTX(171, 0, -240, 1377, 1024, 69, 62, 48, 255),
    VTX(-107, 0, -240, -274, 1024, 69, 62, 48, 255),
    VTX(168, 147, -130, -104, 1024, 218, 211, 199, 255),
    VTX(261, 74, -105, 280, 534, 147, 131, 97, 255),
    VTX(192, 86, -197, -345, 534, 115, 102, 78, 255),
}; 

Vtx object_jya_objVtx_00FAD0[] = {
    VTX(168, 147, -130, -104, 1024, 218, 211, 199, 255),
    VTX(237, 147, -50, 521, 1024, 218, 211, 199, 255),
    VTX(261, 74, -105, 280, 534, 147, 131, 97, 255),
    VTX(240, 0, -160, 38, 45, 69, 62, 48, 255),
    VTX(192, 86, -197, -345, 534, 115, 102, 78, 255),
    VTX(171, 0, -240, -587, 45, 69, 62, 48, 255),
    VTX(-212, 147, -61, -462, 1024, 69, 62, 48, 255),
    VTX(-179, 171, -67, -341, 1233, 52, 49, 38, 255),
    VTX(-175, 147, -130, 0, 1024, 81, 72, 55, 255),
    VTX(-179, 191, 8, -682, 1442, 52, 49, 38, 255),
    VTX(-179, 171, -67, -139, 3155, 52, 49, 38, 255),
    VTX(173, 171, -67, 0, 1024, 52, 49, 38, 255),
    VTX(168, 147, -130, -800, 1024, 218, 211, 199, 255),
    VTX(-175, 147, -130, -933, 3054, 81, 72, 55, 255),
    VTX(173, 191, 8, -24, 1551, 52, 49, 38, 255),
    VTX(237, 147, -50, 0, 1024, 218, 211, 199, 255),
    VTX(173, 171, -67, -324, 1288, 100, 89, 67, 255),
    VTX(168, 147, -130, -625, 1024, 218, 211, 199, 255),
    VTX(-179, 246, -47, -1588, 1614, 35, 31, 25, 255),
    VTX(2, 419, -121, -1040, 2203, 100, 89, 67, 255),
    VTX(173, 246, -47, -520, 1614, 35, 31, 25, 255),
    VTX(-179, 191, 8, -1610, 1024, 52, 49, 38, 255),
    VTX(-240, 424, -27, -1213, 1970, 100, 89, 67, 255),
    VTX(-179, 246, -47, -805, 1024, 35, 31, 25, 255),
    VTX(2, 419, -121, 0, 1024, 100, 89, 67, 255),
    VTX(2, 419, -121, -158, 467, 100, 89, 67, 255),
    VTX(240, 424, -27, 1319, 831, 100, 89, 67, 255),
    VTX(173, 246, -47, 552, 131, 35, 31, 25, 255),
    VTX(173, 191, 8, 1263, -206, 52, 49, 38, 255),
    VTX(-240, 424, -27, -1997, 2548, 100, 89, 67, 255),
    VTX(2, 692, -249, 0, 1024, 147, 131, 97, 255),
    VTX(2, 419, -121, -1785, 1024, 100, 89, 67, 255),
}; 

Vtx object_jya_objVtx_00FCD0[] = {
    VTX(-240, 424, -27, -1997, 2548, 100, 89, 67, 255),
    VTX(-300, 679, -81, -495, 3003, 115, 102, 78, 255),
    VTX(2, 692, -249, 0, 1024, 147, 131, 97, 255),
    VTX(2, 692, -249, -271, 740, 147, 131, 97, 255),
    VTX(240, 424, -27, 1878, -540, 100, 89, 67, 255),
    VTX(2, 419, -121, 411, -901, 100, 89, 67, 255),
    VTX(300, 679, -81, 1740, 1037, 115, 102, 78, 255),
    VTX(-300, 679, -81, -1381, 3048, 115, 102, 78, 255),
    VTX(-240, 908, -14, 27, 2645, 147, 131, 97, 255),
    VTX(2, 692, -249, -1713, 1024, 147, 131, 97, 255),
    VTX(1, 1003, -82, 0, 1024, 177, 164, 138, 255),
    VTX(1, 1003, -82, -266, 1024, 177, 164, 138, 255),
    VTX(240, 908, -14, 1338, 1024, 147, 131, 97, 255),
    VTX(2, 692, -249, -296, -689, 147, 131, 97, 255),
    VTX(300, 679, -81, 1715, -391, 115, 102, 78, 255),
    VTX(-240, 908, -14, -1621, 1024, 147, 131, 97, 255),
    VTX(-148, 1089, 44, -1311, 1680, 147, 131, 97, 255),
    VTX(1, 1003, -82, 0, 1024, 177, 164, 138, 255),
    VTX(-148, 1089, 44, -1123, 1024, 147, 131, 97, 255),
    VTX(0, 1159, 69, -986, 1573, 177, 164, 138, 255),
    VTX(1, 1003, -82, 0, 1024, 177, 164, 138, 255),
    VTX(0, 1159, 69, -134, 1576, 177, 164, 138, 255),
    VTX(149, 1089, 44, 0, 1024, 147, 131, 97, 255),
    VTX(1, 1003, -82, -1119, 1024, 177, 164, 138, 255),
    VTX(149, 1089, 44, -306, 1680, 147, 131, 97, 255),
    VTX(240, 908, -14, 0, 1024, 147, 131, 97, 255),
    VTX(1, 1003, -82, -1604, 1024, 177, 164, 138, 255),
    VTX(-101, 0, 204, 373, 3176, 69, 62, 48, 255),
    VTX(-156, 90, 240, 140, 2561, 81, 72, 55, 255),
    VTX(-224, 90, 171, -152, 2361, 81, 72, 55, 255),
    VTX(-175, 0, 171, 55, 3083, 69, 62, 48, 255),
    VTX(-156, 90, 240, 140, 2561, 81, 72, 55, 255),
    VTX(-140, 180, 240, 208, 1839, 134, 119, 89, 255),
    VTX(-208, 180, 171, -84, 1639, 134, 119, 89, 255),
    VTX(-224, 90, 171, -152, 2361, 81, 72, 55, 255),
    VTX(-208, 180, 171, 32, 2021, 134, 119, 89, 255),
    VTX(-212, 147, -61, -1362, 2043, 69, 62, 48, 255),
    VTX(-224, 90, 171, -35, 2559, 81, 72, 55, 255),
    VTX(-226, 74, -116, -1741, 2445, 100, 89, 67, 255),
    VTX(-226, 74, -116, -87, 1307, 100, 89, 67, 255),
    VTX(-175, 0, -171, 442, 1634, 69, 62, 48, 255),
    VTX(-175, 0, 171, 442, -400, 69, 62, 48, 255),
    VTX(-224, 90, 171, -162, -400, 81, 72, 55, 255),
    VTX(-180, 242, 185, 36, 1183, 100, 89, 67, 255),
    VTX(-180, 242, 185, 49, 1959, 100, 89, 67, 255),
    VTX(-179, 191, 8, -1069, 2067, 52, 49, 38, 255),
    VTX(-212, 147, -61, -1444, 2354, 69, 62, 48, 255),
    VTX(-208, 180, 171, -53, 2332, 134, 119, 89, 255),
    VTX(-180, 242, 185, 400, 2957, 100, 89, 67, 255),
    VTX(-304, 410, 92, -21, 1761, 147, 131, 97, 255),
    VTX(-240, 424, -27, -820, 1859, 100, 89, 67, 255),
    VTX(-179, 191, 8, -600, 2861, 52, 49, 38, 255),
    VTX(-304, 410, 92, 361, 3421, 147, 131, 97, 255),
    VTX(-350, 721, 70, -97, 1430, 218, 211, 199, 255),
    VTX(-300, 679, -81, -878, 2003, 115, 102, 78, 255),
    VTX(-240, 424, -27, -403, 3514, 100, 89, 67, 255),
    VTX(-350, 721, 70, -263, 2261, 218, 211, 199, 255),
    VTX(-284, 906, 124, -64, 1265, 218, 211, 199, 255),
    VTX(-240, 908, -14, -791, 1291, 147, 131, 97, 255),
    VTX(-300, 679, -81, -929, 2750, 115, 102, 78, 255),
    VTX(-284, 906, 124, -286, 1961, 218, 211, 199, 255),
    VTX(-171, 1029, 145, -19, 1127, 203, 195, 178, 255),
    VTX(-148, 1089, 44, -774, 1242, 147, 131, 97, 255),
}; 

Vtx object_jya_objVtx_0100C0[] = {
    VTX(-284, 906, 124, -286, 1961, 218, 211, 199, 255),
    VTX(-148, 1089, 44, -774, 1242, 147, 131, 97, 255),
    VTX(-240, 908, -14, -987, 1936, 147, 131, 97, 255),
    VTX(149, 1089, 44, -113, 840, 147, 131, 97, 255),
    VTX(90, 1120, 166, 600, 866, 203, 195, 178, 255),
    VTX(172, 1029, 146, 504, 234, 218, 211, 199, 255),
    VTX(149, 1089, 44, -110, 374, 147, 131, 97, 255),
    VTX(0, 1159, 69, -114, 933, 177, 164, 138, 255),
    VTX(0, 1124, 216, 875, 945, 218, 211, 199, 255),
    VTX(90, 1120, 166, 596, 400, 203, 195, 178, 255),
    VTX(0, 1159, 69, -90, 476, 177, 164, 138, 255),
    VTX(-148, 1089, 44, -118, 1024, 147, 131, 97, 255),
    VTX(-90, 1120, 166, 595, 1024, 203, 195, 178, 255),
    VTX(0, 1124, 216, 889, 488, 218, 211, 199, 255),
    VTX(-148, 1089, 44, -118, 1024, 147, 131, 97, 255),
    VTX(-171, 1029, 145, 489, 1645, 203, 195, 178, 255),
    VTX(-90, 1120, 166, 585, 1022, 203, 195, 178, 255),
    VTX(70, 890, 242, 206, 876, 69, 62, 48, 255),
    VTX(152, 926, 206, 581, 773, 81, 72, 55, 255),
    VTX(73, 942, 297, 139, 523, 218, 211, 199, 255),
    VTX(140, 860, 80, 1024, 1024, 81, 72, 55, 255),
    VTX(-140, 860, 80, 1859, 891, 81, 72, 55, 255),
    VTX(-151, 925, 205, 1024, 1024, 81, 72, 55, 255),
    VTX(-171, 1029, 145, 1620, -307, 203, 195, 178, 255),
    VTX(-151, 925, 205, 581, 773, 81, 72, 55, 255),
    VTX(-140, 860, 80, 1024, 1024, 81, 72, 55, 255),
    VTX(-70, 890, 242, 206, 876, 69, 62, 48, 255),
    VTX(-73, 941, 297, 139, 523, 218, 211, 199, 255),
    VTX(0, 930, 302, -41, 685, 218, 211, 199, 255),
    VTX(173, 246, -47, 0, 1024, 35, 31, 25, 255),
    VTX(173, 171, -67, -65, 1024, 81, 72, 55, 255),
    VTX(-179, 171, -67, -65, 1318, 52, 49, 38, 255),
}; 

Vtx object_jya_objVtx_0102C0[] = {
    VTX(173, 246, -47, 0, 1024, 35, 31, 25, 255),
    VTX(-179, 171, -67, -65, 1318, 52, 49, 38, 255),
    VTX(-179, 246, -47, 0, 1318, 35, 31, 25, 255),
    VTX(-515, 246, 150, 1024, 0, 107, 42, 0, 255),
    VTX(-525, 171, 133, 1024, 512, 107, 42, 0, 255),
    VTX(-488, 191, 198, 1024, 1024, 107, 42, 0, 255),
    VTX(482, 191, 198, 1024, 1024, 107, 42, 0, 255),
    VTX(520, 171, 133, 1024, 512, 107, 42, 0, 255),
    VTX(510, 246, 150, 1024, 0, 107, 42, 0, 255),
    VTX(-64, 892, 230, 206, 876, 52, 49, 38, 255),
    VTX(-140, 860, 80, 1024, 1024, 81, 72, 55, 255),
    VTX(-68, 862, 126, 581, 773, 52, 49, 38, 255),
    VTX(-45, 856, 227, 139, 523, 115, 102, 78, 255),
    VTX(65, 892, 231, 51, 1930, 52, 49, 38, 255),
    VTX(-64, 892, 230, -243, 1153, 52, 49, 38, 255),
    VTX(-45, 856, 227, 306, 1389, 115, 102, 78, 255),
    VTX(45, 855, 227, 139, 523, 115, 102, 78, 255),
    VTX(65, 892, 231, 206, 876, 52, 49, 38, 255),
    VTX(-45, 856, 227, -41, 685, 115, 102, 78, 255),
    VTX(68, 862, 126, 581, 773, 52, 49, 38, 255),
    VTX(140, 860, 80, 1024, 1024, 81, 72, 55, 255),
    VTX(-140, 860, 80, -39, 2190, 52, 49, 38, 255),
    VTX(140, 860, 80, 1875, 1239, 52, 49, 38, 255),
    VTX(70, 890, 242, 804, 279, 81, 72, 55, 255),
    VTX(-70, 890, 242, -154, 754, 81, 72, 55, 255),
    VTX(68, 862, 126, 1131, 970, 52, 49, 38, 255),
    VTX(45, 855, 227, 657, 620, 115, 102, 78, 255),
    VTX(-45, 856, 227, 210, 844, 115, 102, 78, 255),
    VTX(-68, 862, 126, 205, 1434, 52, 49, 38, 255),
}; 

Vtx object_jya_objVtx_010490[] = {
    VTX(90, 1120, 166, 594, -40, 203, 195, 178, 255),
    VTX(73, 942, 297, 370, 973, 218, 211, 199, 255),
    VTX(152, 926, 206, 1024, 933, 81, 72, 55, 255),
    VTX(-151, 925, 205, 1024, 933, 81, 72, 55, 255),
    VTX(-90, 1120, 166, 594, -40, 203, 195, 178, 255),
    VTX(-171, 1029, 145, 1118, 262, 203, 195, 178, 255),
    VTX(-73, 941, 297, 370, 973, 218, 211, 199, 255),
    VTX(0, 1124, 216, 4, -99, 218, 211, 199, 255),
    VTX(0, 930, 302, 0, 933, 218, 211, 199, 255),
    VTX(172, 1029, 146, 1118, 262, 218, 211, 199, 255),
}; 

Vtx object_jya_objVtx_010530[] = {
    VTX(136, 191, -2, 0, 256, 81, 72, 55, 255),
    VTX(482, 191, 198, 1024, 256, 223, 217, 208, 255),
    VTX(510, 246, 150, 1024, -9, 223, 217, 208, 255),
    VTX(164, 246, -50, 0, -9, 35, 31, 25, 255),
    VTX(173, 171, -67, 0, 256, 81, 72, 55, 255),
    VTX(520, 171, 133, 1024, 256, 223, 217, 208, 255),
    VTX(482, 191, 198, 1024, 0, 223, 217, 208, 255),
    VTX(136, 191, -2, 0, 0, 81, 72, 55, 255),
    VTX(164, 246, -50, 0, 256, 35, 31, 25, 255),
    VTX(510, 246, 150, 1024, 256, 223, 217, 208, 255),
    VTX(520, 171, 133, 1024, -9, 223, 217, 208, 255),
    VTX(173, 171, -67, 0, -9, 81, 72, 55, 255),
    VTX(-179, 171, -67, 0, 0, 52, 49, 38, 255),
    VTX(-525, 171, 133, 1024, 0, 223, 217, 208, 255),
    VTX(-515, 246, 150, 1025, 256, 223, 217, 208, 255),
    VTX(-169, 246, -50, 0, 256, 35, 31, 25, 255),
    VTX(-141, 191, -2, 0, 0, 52, 49, 38, 255),
    VTX(-488, 191, 198, 1024, 0, 223, 217, 208, 255),
    VTX(-525, 171, 133, 1023, 256, 223, 217, 208, 255),
    VTX(-179, 171, -67, 0, 256, 52, 49, 38, 255),
    VTX(-169, 246, -50, 0, 0, 35, 31, 25, 255),
    VTX(-515, 246, 150, 1024, 0, 223, 217, 208, 255),
    VTX(-488, 191, 198, 1024, 256, 223, 217, 208, 255),
    VTX(-141, 191, -2, 0, 256, 52, 49, 38, 255),
}; 

Vtx object_jya_objVtx_0106B0[] = {
    VTX(-205, 739, 139, 49, 258, 234, 231, 223, 255),
    VTX(-205, 453, 190, 49, 723, 234, 231, 223, 255),
    VTX(-68, 268, 223, 341, 1024, 234, 231, 223, 255),
    VTX(68, 268, 223, 633, 1024, 234, 231, 223, 255),
    VTX(205, 453, 190, 925, 723, 234, 231, 223, 255),
    VTX(205, 739, 139, 925, 258, 234, 231, 223, 255),
    VTX(120, 823, 125, 743, 121, 234, 231, 223, 255),
    VTX(-120, 823, 125, 232, 121, 234, 231, 223, 255),
}; 

Vtx object_jya_objVtx_010730[] = {
    VTX(70, 890, 242, 1026, 0, 69, 62, 48, 255),
    VTX(70, 795, 227, 1022, 1024, 245, 244, 241, 255),
    VTX(105, 889, 157, 2048, 0, 255, 255, 255, 255),
    VTX(-105, 889, 157, -2039, 0, 69, 62, 48, 255),
    VTX(-70, 795, 227, -1022, 1024, 245, 244, 241, 255),
    VTX(-70, 890, 242, -1017, 0, 69, 62, 48, 255),
}; 

Gfx gCobraDlist1[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gCobraMirrorBorderTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 16, 0, 0, 0, 4, 4, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_00F240, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 9, 11, 10, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
    gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 24, 26, 27, 0),
    gsSP2Triangles(28, 29, 30, 0, 28, 30, 31, 0),
    gsDPPipeSync(),
    gsSPTexture(0, 0, 0, 0, G_OFF),
    gsDPSetCombineLERP(SHADE, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, 1,
                       K5, K5, 0, COMBINED, 0, 0, 0, COMBINED),
    gsSPVertex(object_jya_objVtx_00F440, 9, 0),
    gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
    gsSP2Triangles(3, 4, 2, 0, 4, 5, 2, 0),
    gsSP2Triangles(5, 6, 2, 0, 6, 7, 2, 0),
    gsSP2Triangles(7, 8, 2, 0, 0, 2, 8, 0),
    gsDPPipeSync(),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gCobraMirrorStoneTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 0, 0, 5, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPVertex(object_jya_objVtx_00F4D0, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 7, 5, 0),
    gsSP2Triangles(4, 8, 7, 0, 8, 9, 10, 0),
    gsSP2Triangles(8, 10, 11, 0, 10, 12, 11, 0),
    gsSP2Triangles(11, 12, 5, 0, 9, 13, 14, 0),
    gsSP2Triangles(9, 14, 10, 0, 14, 15, 12, 0),
    gsSP2Triangles(14, 12, 10, 0, 16, 17, 18, 0),
    gsSP2Triangles(19, 20, 8, 0, 19, 8, 4, 0),
    gsSP2Triangles(20, 9, 8, 0, 20, 21, 9, 0),
    gsSP2Triangles(21, 13, 9, 0, 21, 22, 13, 0),
    gsSP2Triangles(19, 23, 24, 0, 19, 24, 20, 0),
    gsSP2Triangles(25, 26, 22, 0, 25, 22, 21, 0),
    gsSP2Triangles(23, 27, 28, 0, 23, 28, 24, 0),
    gsSP2Triangles(29, 30, 26, 0, 29, 26, 25, 0),
    gsSP1Triangle(27, 31, 28, 0),
    gsSPVertex(object_jya_objVtx_00F6D0, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(4, 6, 5, 0, 0, 7, 1, 0),
    gsSP2Triangles(8, 9, 10, 0, 11, 12, 13, 0),
    gsSP2Triangles(14, 15, 16, 0, 17, 4, 3, 0),
    gsSP2Triangles(18, 19, 20, 0, 19, 21, 20, 0),
    gsSP2Triangles(21, 22, 20, 0, 23, 24, 25, 0),
    gsSP2Triangles(26, 27, 28, 0, 29, 30, 31, 0),
    gsSPVertex(object_jya_objVtx_00F8D0, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(3, 5, 6, 0, 7, 8, 9, 0),
    gsSP2Triangles(7, 9, 10, 0, 11, 12, 13, 0),
    gsSP2Triangles(11, 13, 14, 0, 15, 16, 17, 0),
    gsSP2Triangles(15, 18, 16, 0, 19, 20, 21, 0),
    gsSP2Triangles(19, 22, 20, 0, 23, 24, 25, 0),
    gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
    gsSP2Triangles(25, 28, 26, 0, 29, 30, 31, 0),
    gsSPVertex(object_jya_objVtx_00FAD0, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 2, 3, 4, 0),
    gsSP2Triangles(3, 5, 4, 0, 6, 7, 8, 0),
    gsSP2Triangles(6, 9, 7, 0, 10, 11, 12, 0),
    gsSP2Triangles(10, 12, 13, 0, 14, 15, 16, 0),
    gsSP2Triangles(15, 17, 16, 0, 18, 19, 20, 0),
    gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
    gsSP2Triangles(25, 26, 27, 0, 26, 28, 27, 0),
    gsSP1Triangle(29, 30, 31, 0),
    gsSPVertex(object_jya_objVtx_00FCD0, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(3, 6, 4, 0, 7, 8, 9, 0),
    gsSP2Triangles(8, 10, 9, 0, 11, 12, 13, 0),
    gsSP2Triangles(12, 14, 13, 0, 15, 16, 17, 0),
    gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
    gsSP1Triangle(27, 29, 30, 0),
    gsSPVertex(object_jya_objVtx_00FEC0, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 5, 7, 6, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(1, 12, 2, 0, 13, 14, 15, 0),
    gsSP2Triangles(13, 15, 16, 0, 17, 18, 19, 0),
    gsSP2Triangles(17, 19, 20, 0, 21, 22, 23, 0),
    gsSP2Triangles(21, 23, 24, 0, 25, 26, 27, 0),
    gsSP2Triangles(25, 27, 28, 0, 29, 30, 31, 0),
    gsSPVertex(object_jya_objVtx_0100C0, 32, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 6, 8, 9, 0),
    gsSP2Triangles(10, 11, 12, 0, 10, 12, 13, 0),
    gsSP2Triangles(14, 15, 16, 0, 17, 18, 19, 0),
    gsSP2Triangles(17, 20, 18, 0, 21, 22, 23, 0),
    gsSP2Triangles(24, 25, 26, 0, 27, 24, 26, 0),
    gsSP2Triangles(27, 26, 28, 0, 29, 30, 31, 0),
    gsSPVertex(object_jya_objVtx_0102C0, 29, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
    gsSP2Triangles(9, 11, 12, 0, 13, 14, 15, 0),
    gsSP2Triangles(16, 17, 18, 0, 16, 19, 17, 0),
    gsSP2Triangles(19, 20, 17, 0, 21, 22, 23, 0),
    gsSP2Triangles(21, 23, 24, 0, 25, 26, 27, 0),
    gsSP1Triangle(25, 27, 28, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(gCobraMirrorEyeTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 1, 1, 5, 5, 0, 0),
    gsSPVertex(object_jya_objVtx_010490, 10, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(3, 6, 4, 0, 6, 7, 4, 0),
    gsSP2Triangles(6, 8, 7, 0, 9, 0, 2, 0),
    gsSP2Triangles(0, 7, 1, 0, 7, 8, 1, 0),
    gsDPPipeSync(),
    gsDPLoadMultiBlock(gCobraMirrorHandleTex, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 8, 0, 2, 2, 5, 3, 0, 0),
    gsSPVertex(object_jya_objVtx_010530, 24, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
    gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
    gsSP2Triangles(16, 17, 18, 0, 16, 18, 19, 0),
    gsSP2Triangles(20, 21, 22, 0, 20, 22, 23, 0),
    gsSPEndDisplayList(),
}; 

Gfx gCobraDlist2[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gCobraMirrorMirrorTex, 0, 0, G_IM_FMT_IA, G_IM_SIZ_16b, 32, 32, 0, 0, 0, 5, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, TEXEL0, 0, PRIMITIVE, 0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, TEXEL1, 0, 1, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC81049D8),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 178),
    gsSPVertex(object_jya_objVtx_0106B0, 8, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(0, 3, 4, 0, 0, 4, 5, 0),
    gsSP2Triangles(0, 5, 6, 0, 0, 6, 7, 0),
    gsDPPipeSync(),
    gsDPSetTextureImage(G_IM_FMT_IA, G_IM_SIZ_16b, 1, gCobraMirrorToothTex),
    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 0, 0, 7, 0, 0, 5, 0, 1, 6, 0),
    gsDPLoadSync(),
    gsDPLoadBlock(7, 0, 0, 1023, 256),
    gsDPPipeSync(),
    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_8b, 8, 0, 0, 0, 0, 5, 0, 1, 6, 0),
    gsDPSetTileSize(0, 0, 0, 252, 124),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, TEXEL0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_010730, 6, 0),
    gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
    gsSP2Triangles(5, 4, 1, 0, 5, 1, 0, 0),
    gsSPEndDisplayList(),
}; 

static u8 unaccounted_010D28[8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
}; 

CamData gCobraCol_camDataList_00010D30[1] = {
	{ 0x0000, 0, 0x00000000 }, // 0x00010D30

}; 

u32 gCobraCol_polygonTypes_00010D38[] = {
	 0x00000000, 0x000007C0, 
	 0x00E00000, 0x000007C0, 

}; 

RoomPoly gCobraCol_polygons_00010D48[] = {
	{ 0x0000, 0x0000, 0x0001, 0x0002, 0xC822, 0x4083, 0x5F66, 0xFD29 }, // 0x00010D48
	{ 0x0000, 0x0003, 0x0000, 0x0002, 0xAEA3, 0x3535, 0x5343, 0xFD89 }, // 0x00010D58
	{ 0x0000, 0x0000, 0x0003, 0x0004, 0x921E, 0xCCFC, 0x294F, 0x00D9 }, // 0x00010D68
	{ 0x0000, 0x0003, 0x0005, 0x0004, 0x9392, 0xD72F, 0x3669, 0x007A }, // 0x00010D78
	{ 0x0000, 0x0006, 0x0007, 0x0008, 0x6C13, 0xD648, 0x366D, 0x0080 }, // 0x00010D88
	{ 0x0000, 0x0006, 0x0008, 0x0009, 0x6D75, 0xCCEA, 0x2A55, 0x00D7 }, // 0x00010D98
	{ 0x0000, 0x000A, 0x0003, 0x0002, 0x9F72, 0x500B, 0x1990, 0xFCDF }, // 0x00010DA8
	{ 0x0000, 0x000B, 0x0002, 0x0001, 0xEA50, 0x7AB7, 0x1D38, 0xFB99 }, // 0x00010DB8
	{ 0x0000, 0x000B, 0x000A, 0x0002, 0xC9CE, 0x73E6, 0xFC51, 0xFBE9 }, // 0x00010DC8
	{ 0x0000, 0x000C, 0x000B, 0x000D, 0x35F0, 0x7407, 0xFC9A, 0xFBE7 }, // 0x00010DD8
	{ 0x0000, 0x000B, 0x0001, 0x000D, 0x15B0, 0x7AB7, 0x1D38, 0xFB99 }, // 0x00010DE8
	{ 0x0000, 0x000C, 0x000D, 0x0008, 0x5FE6, 0x50BB, 0x19DD, 0xFCD9 }, // 0x00010DF8
	{ 0x0000, 0x000E, 0x0003, 0x000A, 0xA19F, 0x520E, 0x1B41, 0xFCCF }, // 0x00010E08
	{ 0x0000, 0x000E, 0x000A, 0x000F, 0x9643, 0x4040, 0xDF38, 0xFD6E }, // 0x00010E18
	{ 0x0000, 0x000C, 0x0010, 0x0011, 0x3415, 0x3A9B, 0x9AD4, 0xFDF4 }, // 0x00010E28
	{ 0x0000, 0x000B, 0x000C, 0x0011, 0x19E6, 0x5744, 0xA604, 0xFD1A }, // 0x00010E38
	{ 0x0000, 0x000A, 0x000B, 0x0011, 0xE60A, 0x5716, 0xA5DC, 0xFD1C }, // 0x00010E48
	{ 0x0000, 0x000F, 0x000A, 0x0011, 0xCC45, 0x3ABF, 0x9ABB, 0xFDF3 }, // 0x00010E58
	{ 0x0000, 0x0011, 0x0010, 0x0012, 0x3373, 0x3793, 0x98D0, 0xFE0A }, // 0x00010E68
	{ 0x0000, 0x000F, 0x0011, 0x0012, 0xCCF6, 0x3767, 0x9885, 0xFE0C }, // 0x00010E78
	{ 0x0000, 0x0010, 0x000C, 0x0008, 0x730E, 0x37AB, 0x06CD, 0xFD9E }, // 0x00010E88
	{ 0x0000, 0x0010, 0x0008, 0x0013, 0x59F6, 0x56D2, 0xE493, 0xFCEC }, // 0x00010E98
	{ 0x0000, 0x0003, 0x000E, 0x0005, 0x1711, 0xD683, 0x76DE, 0x00E6 }, // 0x00010EA8
	{ 0x0000, 0x0000, 0x0004, 0x0006, 0x0000, 0xA225, 0x5708, 0x01E8 }, // 0x00010EB8
	{ 0x0000, 0x0000, 0x0006, 0x0009, 0x00A3, 0xA2FA, 0x57EA, 0x01E0 }, // 0x00010EC8
	{ 0x0000, 0x0001, 0x0000, 0x0009, 0xFFA5, 0x33ED, 0x74FE, 0xFD73 }, // 0x00010ED8
	{ 0x0000, 0x000D, 0x0001, 0x0009, 0x37CD, 0x40C6, 0x5F42, 0xFD26 }, // 0x00010EE8
	{ 0x0000, 0x000D, 0x0009, 0x0008, 0x5055, 0x35FA, 0x53C4, 0xFD83 }, // 0x00010EF8
	{ 0x0000, 0x0013, 0x0008, 0x0007, 0xE927, 0xD5F6, 0x76B8, 0x00E9 }, // 0x00010F08
	{ 0x0000, 0x0014, 0x0015, 0x0016, 0x6AAD, 0xF787, 0x463A, 0xFF0B }, // 0x00010F18
	{ 0x0000, 0x0014, 0x0016, 0x0017, 0x4EF4, 0x11B0, 0x632E, 0xFEB0 }, // 0x00010F28
	{ 0x0000, 0x0017, 0x0016, 0x0007, 0x4736, 0x4B04, 0x4B65, 0xFD8B }, // 0x00010F38
	{ 0x0000, 0x0005, 0x0018, 0x0019, 0xB8CA, 0x4B04, 0x4B65, 0xFD8B }, // 0x00010F48
	{ 0x0000, 0x0019, 0x0018, 0x001A, 0xB290, 0xFDF8, 0x65E4, 0xFF21 }, // 0x00010F58
	{ 0x0000, 0x0019, 0x001A, 0x001B, 0x9209, 0x0B80, 0x407C, 0xFEC7 }, // 0x00010F68
	{ 0x0000, 0x001B, 0x001C, 0x001D, 0xD886, 0xF871, 0x7986, 0xFF27 }, // 0x00010F78
	{ 0x0000, 0x001C, 0x001E, 0x001D, 0xD2B0, 0x17B3, 0x7557, 0xFEEA }, // 0x00010F88
	{ 0x0000, 0x001B, 0x001A, 0x001C, 0x96CD, 0xF1D7, 0x4786, 0xFF1F }, // 0x00010F98
	{ 0x0000, 0x001D, 0x001E, 0x001F, 0x1A05, 0x1733, 0x7B28, 0xFF07 }, // 0x00010FA8
	{ 0x0000, 0x001D, 0x001F, 0x0020, 0x0000, 0xED4B, 0x7E9F, 0xFF4B }, // 0x00010FB8
	{ 0x0000, 0x0020, 0x001F, 0x0015, 0x4DE5, 0xF4A2, 0x64ED, 0xFF3F }, // 0x00010FC8
	{ 0x0000, 0x0020, 0x0015, 0x0014, 0x58C1, 0xCBD8, 0x4C10, 0xFFBA }, // 0x00010FD8
	{ 0x0000, 0x0014, 0x001B, 0x001D, 0x0000, 0x167A, 0x7E02, 0xFEF5 }, // 0x00010FE8
	{ 0x0000, 0x0014, 0x001D, 0x0020, 0x0000, 0x167A, 0x7E02, 0xFEF5 }, // 0x00010FF8
	{ 0x0000, 0x0014, 0x0017, 0x0019, 0x0000, 0x1678, 0x7E02, 0xFEF5 }, // 0x00011008
	{ 0x0000, 0x0014, 0x0019, 0x001B, 0x0000, 0x1678, 0x7E02, 0xFEF5 }, // 0x00011018
	{ 0x0000, 0x0017, 0x0007, 0x0005, 0x0000, 0x3819, 0x730C, 0xFE3F }, // 0x00011028
	{ 0x0000, 0x0017, 0x0005, 0x0019, 0x0000, 0x3819, 0x730C, 0xFE3F }, // 0x00011038
	{ 0x0000, 0x0021, 0x0022, 0x0023, 0x35FB, 0x0000, 0x740F, 0xFF6A }, // 0x00011048
	{ 0x0000, 0x0021, 0x0023, 0x0024, 0x35FB, 0x0000, 0x740F, 0xFF6A }, // 0x00011058
	{ 0x0000, 0x0023, 0x0025, 0x0024, 0x0000, 0x0000, 0x7FFF, 0xFFA5 }, // 0x00011068
	{ 0x0000, 0x0023, 0x0026, 0x0025, 0x615A, 0xDD75, 0x4B94, 0xFF6A }, // 0x00011078
	{ 0x0000, 0x0023, 0x001F, 0x0026, 0x649A, 0xF8CF, 0x4ECF, 0xFF50 }, // 0x00011088
	{ 0x0000, 0x001F, 0x001E, 0x0027, 0x1A74, 0xFDA6, 0x7D36, 0xFF27 }, // 0x00011098
	{ 0x0000, 0x001F, 0x0027, 0x0026, 0x18C3, 0x0097, 0x7D94, 0xFF23 }, // 0x000110A8
	{ 0x0000, 0x0027, 0x0028, 0x0026, 0x178B, 0xD859, 0x7767, 0xFF4A }, // 0x000110B8
	{ 0x0000, 0x0026, 0x0028, 0x0025, 0x3807, 0xB347, 0x55C7, 0xFF8C }, // 0x000110C8
	{ 0x0000, 0x0022, 0x0029, 0x0023, 0x1E47, 0x51C1, 0x5DB7, 0xFF5C }, // 0x000110D8
	{ 0x0000, 0x0013, 0x0007, 0x0016, 0xEB17, 0xD140, 0x754E, 0x0108 }, // 0x000110E8
	{ 0x0000, 0x0005, 0x000E, 0x0018, 0x14E9, 0xD140, 0x754E, 0x0108 }, // 0x000110F8
	{ 0x0000, 0x0029, 0x0022, 0x002A, 0x7A7E, 0x22CD, 0x0CF4, 0xFF1C }, // 0x00011108
	{ 0x0000, 0x0022, 0x0021, 0x002A, 0x7E9F, 0x0000, 0x12B5, 0xFF2E }, // 0x00011118
	{ 0x0000, 0x0021, 0x002B, 0x002A, 0x7A93, 0xDB3E, 0x02A7, 0xFF3D }, // 0x00011128
	{ 0x0000, 0x0029, 0x001F, 0x0023, 0x6E3A, 0x25B9, 0x3502, 0xFF36 }, // 0x00011138
	{ 0x0000, 0x0029, 0x0015, 0x001F, 0x6455, 0xB2FE, 0x13A7, 0x0014 }, // 0x00011148
	{ 0x0000, 0x0029, 0x002C, 0x0015, 0x6E29, 0xEC42, 0xC1E3, 0xFF7A }, // 0x00011158
	{ 0x0000, 0x002C, 0x002D, 0x0015, 0x6A57, 0xDCC8, 0xC214, 0xFFB4 }, // 0x00011168
	{ 0x0000, 0x002D, 0x0016, 0x0015, 0x79A9, 0xED07, 0xDD0C, 0xFF4E }, // 0x00011178
	{ 0x0000, 0x002D, 0x0010, 0x0013, 0x7757, 0x1AE3, 0xDA57, 0xFE5D }, // 0x00011188
	{ 0x0000, 0x002D, 0x0013, 0x0016, 0x7124, 0x2450, 0xD06B, 0xFE32 }, // 0x00011198
	{ 0x0000, 0x002E, 0x002F, 0x0030, 0xA712, 0xE837, 0xA712, 0xFF1F }, // 0x000111A8
	{ 0x0000, 0x002E, 0x0031, 0x002F, 0x972D, 0xEE1F, 0xB8C3, 0xFF24 }, // 0x000111B8
	{ 0x0000, 0x0031, 0x0032, 0x002F, 0x9CD1, 0x3A1E, 0xC7B7, 0xFF0E }, // 0x000111C8
	{ 0x0000, 0x0031, 0x0033, 0x0032, 0xAF8C, 0x2E88, 0xA7FF, 0xFF16 }, // 0x000111D8
	{ 0x0000, 0x0032, 0x0034, 0x002F, 0x0000, 0x1C7B, 0x8336, 0xFF2D }, // 0x000111E8
	{ 0x0000, 0x0034, 0x0035, 0x0030, 0x0000, 0x393E, 0x8D84, 0xFF29 }, // 0x000111F8
	{ 0x0000, 0x0034, 0x0030, 0x002F, 0x0000, 0x393E, 0x8D84, 0xFF29 }, // 0x00011208
	{ 0x0000, 0x0032, 0x002A, 0x0034, 0x5E73, 0x3AF1, 0xC0DA, 0xFF02 }, // 0x00011218
	{ 0x0000, 0x0032, 0x0029, 0x002A, 0x5776, 0x35BF, 0xB38C, 0xFF06 }, // 0x00011228
	{ 0x0000, 0x002A, 0x002B, 0x0034, 0x65ED, 0x196D, 0xB6DF, 0xFF00 }, // 0x00011238
	{ 0x0000, 0x002B, 0x0035, 0x0034, 0x5FF8, 0x11F4, 0xAD3B, 0xFEFD }, // 0x00011248
	{ 0x0000, 0x0036, 0x0032, 0x0033, 0xCD5F, 0x02B2, 0x8A79, 0xFF89 }, // 0x00011258
	{ 0x0000, 0x0032, 0x002C, 0x0029, 0x3377, 0x00BD, 0x8ACF, 0xFF8E }, // 0x00011268
	{ 0x0000, 0x0036, 0x0012, 0x0032, 0xD0A6, 0xCD85, 0x9455, 0x0040 }, // 0x00011278
	{ 0x0000, 0x0036, 0x0037, 0x0012, 0xC065, 0xDCA6, 0x96B4, 0xFFF3 }, // 0x00011288
	{ 0x0000, 0x0012, 0x002C, 0x0032, 0x301D, 0xCDA6, 0x949C, 0x003F }, // 0x00011298
	{ 0x0000, 0x0012, 0x002D, 0x002C, 0x4049, 0xDC99, 0x9722, 0xFFF2 }, // 0x000112A8
	{ 0x0000, 0x0037, 0x000F, 0x0012, 0xBECD, 0x2705, 0x98FF, 0xFE66 }, // 0x000112B8
	{ 0x0000, 0x0010, 0x002D, 0x0012, 0x41E6, 0x26FC, 0x996E, 0xFE65 }, // 0x000112C8
	{ 0x0000, 0x0028, 0x0027, 0x0038, 0xCF42, 0xC5F4, 0x6724, 0xFF4A }, // 0x000112D8
	{ 0x0000, 0x0028, 0x0038, 0x0039, 0xE056, 0xEEC3, 0x7AD0, 0xFF31 }, // 0x000112E8
	{ 0x0000, 0x0027, 0x001E, 0x003A, 0xC6CE, 0x0516, 0x7265, 0xFF03 }, // 0x000112F8
	{ 0x0000, 0x0027, 0x003A, 0x0038, 0xC977, 0x09B2, 0x7364, 0xFF00 }, // 0x00011308
	{ 0x0000, 0x003A, 0x0033, 0x0038, 0x825C, 0x1656, 0xF60C, 0xFF22 }, // 0x00011318
	{ 0x0000, 0x0033, 0x0031, 0x0038, 0x824A, 0x15B7, 0xF597, 0xFF23 }, // 0x00011328
	{ 0x0000, 0x0031, 0x002E, 0x0039, 0x93C3, 0xBC0A, 0xF90A, 0xFF75 }, // 0x00011338
	{ 0x0000, 0x0031, 0x0039, 0x0038, 0x8FAA, 0xC2D7, 0xFB31, 0xFF6D }, // 0x00011348
	{ 0x0000, 0x001E, 0x001C, 0x003A, 0xC6C2, 0x0000, 0x727C, 0xFF0A }, // 0x00011358
	{ 0x0000, 0x001C, 0x0033, 0x003A, 0x8B51, 0x349B, 0x0067, 0xFEF8 }, // 0x00011368
	{ 0x0000, 0x001C, 0x001A, 0x0033, 0x90BB, 0xC0C3, 0xFE6E, 0xFFDD }, // 0x00011378
	{ 0x0000, 0x001A, 0x0036, 0x0033, 0x9134, 0xEFD9, 0xC1FB, 0xFF6D }, // 0x00011388
	{ 0x0000, 0x001A, 0x0018, 0x0037, 0x8657, 0xED07, 0xDD0C, 0xFF4E }, // 0x00011398
	{ 0x0000, 0x001A, 0x0037, 0x0036, 0x95A9, 0xDCC8, 0xC214, 0xFFB4 }, // 0x000113A8
	{ 0x0000, 0x0018, 0x000E, 0x000F, 0x8A19, 0x213D, 0xDAE4, 0xFE33 }, // 0x000113B8
	{ 0x0000, 0x0018, 0x000F, 0x0037, 0x8C48, 0x1CFC, 0xD19D, 0xFE54 }, // 0x000113C8
	{ 0x0000, 0x0005, 0x0007, 0x0006, 0x0000, 0x8225, 0x174F, 0x033F }, // 0x000113D8
	{ 0x0000, 0x0005, 0x0006, 0x0004, 0x0000, 0x8225, 0x174F, 0x033F }, // 0x000113E8
	{ 0x0000, 0x803B, 0x003C, 0x003D, 0x90C3, 0x0000, 0x3F52, 0xFDE2 }, // 0x000113F8
	{ 0x0000, 0x803B, 0x003D, 0x003E, 0x90C3, 0x0000, 0x3F52, 0xFDE2 }, // 0x00011408
	{ 0x0001, 0x803E, 0x003D, 0x003F, 0x3FF6, 0x0000, 0x6EDE, 0x0048 }, // 0x00011418
	{ 0x0001, 0x803E, 0x003F, 0x0040, 0x3FF6, 0x0000, 0x6EDE, 0x0048 }, // 0x00011428
	{ 0x0001, 0x8041, 0x0042, 0x0043, 0xC00A, 0x0000, 0x6EDE, 0x0046 }, // 0x00011438
	{ 0x0001, 0x8041, 0x0043, 0x0044, 0xC00A, 0x0000, 0x6EDE, 0x0046 }, // 0x00011448
	{ 0x0000, 0x8043, 0x0042, 0x0045, 0x6F3D, 0x0000, 0x3F52, 0xFDE7 }, // 0x00011458
	{ 0x0000, 0x8043, 0x0045, 0x0046, 0x6F3D, 0x0000, 0x3F52, 0xFDE7 }, // 0x00011468
	{ 0x0001, 0x8046, 0x0045, 0x0047, 0x3FF6, 0x0000, 0x9122, 0xFF70 }, // 0x00011478
	{ 0x0001, 0x8046, 0x0047, 0x0048, 0x3FF6, 0x0000, 0x9122, 0xFF70 }, // 0x00011488
	{ 0x0001, 0x8049, 0x003C, 0x003B, 0xBFE8, 0x0000, 0x9135, 0xFF6C }, // 0x00011498
	{ 0x0001, 0x8049, 0x003B, 0x004A, 0xBFE8, 0x0000, 0x9135, 0xFF6C }, // 0x000114A8

}; 

Vec3s gCobraCol_vtx_000114B8[] = {
{ -73, 941, 297 }, // 0x000114B8
{ 0, 1124, 216 }, // 0x000114BE
{ -90, 1120, 166 }, // 0x000114C4
{ -171, 1029, 145 }, // 0x000114CA
{ -70, 890, 242 }, // 0x000114D0
{ -140, 860, 80 }, // 0x000114D6
{ 70, 890, 242 }, // 0x000114DC
{ 140, 860, 80 }, // 0x000114E2
{ 172, 1029, 146 }, // 0x000114E8
{ 73, 942, 297 }, // 0x000114EE
{ -148, 1089, 44 }, // 0x000114F4
{ 0, 1159, 69 }, // 0x000114FA
{ 149, 1089, 44 }, // 0x00011500
{ 90, 1120, 166 }, // 0x00011506
{ -284, 906, 124 }, // 0x0001150C
{ -240, 908, -14 }, // 0x00011512
{ 240, 908, -14 }, // 0x00011518
{ 1, 1003, -82 }, // 0x0001151E
{ 2, 692, -249 }, // 0x00011524
{ 284, 906, 124 }, // 0x0001152A
{ 205, 453, 190 }, // 0x00011530
{ 274, 410, 80 }, // 0x00011536
{ 315, 719, 55 }, // 0x0001153C
{ 205, 739, 139 }, // 0x00011542
{ -315, 719, 55 }, // 0x00011548
{ -205, 739, 139 }, // 0x0001154E
{ -274, 410, 80 }, // 0x00011554
{ -205, 453, 190 }, // 0x0001155A
{ -180, 242, 185 }, // 0x00011560
{ -68, 268, 223 }, // 0x00011566
{ -70, 180, 240 }, // 0x0001156C
{ 72, 180, 210 }, // 0x00011572
{ 68, 268, 223 }, // 0x00011578
{ 202, 0, 71 }, // 0x0001157E
{ 202, 100, 71 }, // 0x00011584
{ 159, 93, 91 }, // 0x0001158A
{ 159, 0, 91 }, // 0x00011590
{ 126, 0, 91 }, // 0x00011596
{ 64, 90, 212 }, // 0x0001159C
{ -78, 90, 240 }, // 0x000115A2
{ -47, 0, 204 }, // 0x000115A8
{ 173, 246, -47 }, // 0x000115AE
{ 228, 74, -105 }, // 0x000115B4
{ 207, 0, -160 }, // 0x000115BA
{ 216, 423, -27 }, // 0x000115C0
{ 270, 681, -81 }, // 0x000115C6
{ -153, 0, -171 }, // 0x000115CC
{ -150, 86, -197 }, // 0x000115D2
{ -84, 0, -240 }, // 0x000115D8
{ -203, 74, -116 }, // 0x000115DE
{ 2, 419, -121 }, // 0x000115E4
{ -179, 246, -47 }, // 0x000115EA
{ 159, 86, -197 }, // 0x000115F0
{ 138, 0, -240 }, // 0x000115F6
{ -216, 423, -27 }, // 0x000115FC
{ -270, 681, -81 }, // 0x00011602
{ -224, 90, 171 }, // 0x00011608
{ -175, 0, 171 }, // 0x0001160E
{ -208, 180, 171 }, // 0x00011614
{ -542, 400, 143 }, // 0x0001161A
{ -542, 0, 143 }, // 0x00011620
{ -505, 0, 208 }, // 0x00011626
{ -505, 400, 208 }, // 0x0001162C
{ -141, 0, -2 }, // 0x00011632
{ -141, 400, -2 }, // 0x00011638
{ 136, 0, -2 }, // 0x0001163E
{ 500, 0, 208 }, // 0x00011644
{ 500, 400, 208 }, // 0x0001164A
{ 136, 400, -2 }, // 0x00011650
{ 537, 0, 143 }, // 0x00011656
{ 537, 400, 143 }, // 0x0001165C
{ 173, 0, -67 }, // 0x00011662
{ 173, 400, -67 }, // 0x00011668
{ -179, 0, -67 }, // 0x0001166E
{ -179, 400, -67 }, // 0x00011674

}; 

CollisionHeader gCobraCol = { -542, 0, -249, 537, 1159, 302, 75, gCobraCol_vtx_000114B8, 119, gCobraCol_polygons_00010D48, gCobraCol_polygonTypes_00010D38, &gCobraCol_camDataList_00010D30, 0, 0 }; 

static u32 pad116A8 = 0;
static u32 pad116AC = 0;

Vtx object_jya_objVtx_0116B0[] = {
    VTX(-205, 168, 0, 1968, -84, 255, 255, 255, 140),
    VTX(-205, 168, 1955, 1968, 4012, 255, 255, 255, 140),
    VTX(-205, -118, 1955, 2559, 4155, 255, 255, 255, 140),
    VTX(-205, -118, 0, 2559, 58, 255, 255, 255, 140),
    VTX(-120, 253, 0, 1752, -125, 255, 255, 255, 140),
    VTX(-120, 253, 1955, 1752, 3971, 255, 255, 255, 140),
    VTX(120, 253, 0, 1320, -125, 255, 255, 255, 140),
    VTX(120, 253, 1955, 1320, 3971, 255, 255, 255, 140),
    VTX(205, 168, 0, 1104, -84, 255, 255, 255, 140),
    VTX(205, 168, 1955, 1104, 4012, 255, 255, 255, 140),
    VTX(205, -118, 0, 513, 58, 255, 255, 255, 140),
    VTX(205, -118, 1955, 513, 4155, 255, 255, 255, 140),
    VTX(68, -303, 0, 109, 150, 255, 255, 255, 140),
    VTX(68, -303, 1955, 109, 4246, 255, 255, 255, 140),
    VTX(-68, -303, 0, 2963, 150, 255, 255, 255, 140),
    VTX(-68, -303, 1955, 2963, 4246, 255, 255, 255, 140),
    VTX(68, -303, 1955, 3181, 4246, 255, 255, 255, 140),
    VTX(68, -303, 0, 3181, 150, 255, 255, 255, 140),
}; 

Gfx gCobraDlist3[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gBigMirrorGradientTex, 0, 0, G_IM_FMT_IA, G_IM_SIZ_16b, 8, 128, 0, 1, 3, 3, 7, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, TEXEL0, 0, SHADE, 0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, COMBINED, 0, PRIMITIVE, 0),
    gsSPSetOtherMode(0xE2, 3, 29, 0x0C1849D8),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_FOG | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK),
    gsSPVertex(object_jya_objVtx_0116B0, 18, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 1, 0, 4, 1, 0, 0),
    gsSP2Triangles(6, 7, 5, 0, 6, 5, 4, 0),
    gsSP2Triangles(8, 9, 7, 0, 8, 7, 6, 0),
    gsSP2Triangles(10, 11, 9, 0, 10, 9, 8, 0),
    gsSP2Triangles(12, 13, 11, 0, 12, 11, 10, 0),
    gsSP2Triangles(14, 15, 16, 0, 14, 16, 17, 0),
    gsSP2Triangles(3, 2, 15, 0, 3, 15, 14, 0),
    gsSPEndDisplayList(),
}; 

Vtx object_jya_objVtx_011890[] = {
    VTX(-35, -334, -734, 1024, 4020, 255, 255, 255, 76),
    VTX(-385, -13, -503, 1024, 0, 255, 255, 255, 255),
    VTX(-360, -36, -601, 401, -906, 255, 255, 255, 255),
    VTX(-53, -298, -907, 280, 2311, 255, 255, 255, 255),
    VTX(-233, 374, -411, 463, -748, 255, 255, 255, 255),
    VTX(188, 82, -619, 373, 1289, 255, 255, 255, 255),
    VTX(-9, -122, -505, 553, 2222, 255, 255, 255, 76),
    VTX(-415, 205, -363, 744, -374, 255, 255, 255, 255),
    VTX(-35, -334, -734, 1024, 2943, 255, 255, 255, 76),
    VTX(-9, -122, -505, 831, 2793, 255, 255, 255, 255),
    VTX(-52, -689, -564, 1024, 4020, 255, 255, 255, 76),
    VTX(-445, -176, -413, 1024, 0, 255, 255, 255, 255),
    VTX(-385, -13, -503, 401, -906, 255, 255, 255, 255),
    VTX(-35, -334, -734, 280, 2311, 255, 255, 255, 255),
    VTX(136, -254, -340, 1024, 4020, 255, 255, 255, 76),
    VTX(-314, 132, -274, 1024, 0, 255, 255, 255, 255),
    VTX(-415, 205, -363, 401, -906, 255, 255, 255, 255),
    VTX(-9, -122, -505, 280, 2311, 255, 255, 255, 255),
}; 

Gfx gBombchuiwaDlist2[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(gBombiwaLightTex1, 0, 0, G_IM_FMT_IA, G_IM_SIZ_16b, 32, 64, 0, 1, 3, 5, 6, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, TEXEL0, 0, PRIMITIVE, 0,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, TEXEL1, 0, 1, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC81049D8),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 76),
    gsSPVertex(object_jya_objVtx_011890, 18, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSP2Triangles(8, 1, 7, 0, 8, 7, 9, 0),
    gsSP2Triangles(10, 11, 12, 0, 10, 12, 13, 0),
    gsSP2Triangles(14, 15, 16, 0, 14, 16, 17, 0),
    gsSPEndDisplayList(),
}; 

u64 object_jya_objTex_011A60[] = {
#include "assets/objects/object_jya_obj/object_jya_objTex_011A60.rgb5a1.inc.c"
};

u64 object_jya_objTex_011A80[] = {
#include "assets/objects/object_jya_obj/object_jya_objTex_011A80.ci8.inc.c"
};

Vtx object_jya_objVtx_012280[] = {
    VTX(1000, 0, 0, 6144, -1829, 158, 142, 111, 255),
    VTX(1000, 1000, 0, 6144, -4901, 158, 142, 111, 255),
    VTX(-1000, 1000, 0, 0, -4901, 158, 142, 111, 255),
    VTX(-1000, 0, 0, 0, -1829, 158, 142, 111, 255),
}; 

Vtx object_jya_objVtx_0122C0[] = {
    VTX(-1000, 1000, 0, 2048, -1024, 158, 142, 111, 255),
    VTX(-5000, 1000, 0, -2048, -1024, 158, 142, 111, 255),
    VTX(-5000, 0, 0, -2048, 0, 158, 142, 111, 255),
    VTX(-1000, 0, 0, 2048, 0, 158, 142, 111, 255),
    VTX(1000, 1000, 0, 2048, -1024, 158, 142, 111, 255),
    VTX(1000, 0, 0, 2048, 0, 158, 142, 111, 255),
    VTX(5000, 0, 0, -2048, 0, 158, 142, 111, 255),
    VTX(5000, 1000, 0, -2048, -1024, 158, 142, 111, 255),
}; 

Gfx gZurerukabeDlist[] = {
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_NONE),
    gsSPTexture(65535, 65535, 0, 0, G_ON),
    gsDPLoadMultiBlock(object_jya_objTex_016140, 0, 0, G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, 0, 0, 6, 5, 0, 0),
    gsDPSetCombineLERP(TEXEL0, K5, SHADE, COMBINED_ALPHA, 0, 0, 0, 1,
                       COMBINED, K5, PRIMITIVE, COMBINED_ALPHA, 0, 0, 0, COMBINED),
    gsSPSetOtherMode(0xE2, 3, 29, 0xC8112078),
    gsSPClearGeometryMode(G_TEXTURE_ENABLE | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
    gsSPSetGeometryMode(G_TEXTURE_ENABLE | G_CULL_BACK | G_FOG),
    gsDPSetPrimColor(0, 0, 255, 255, 255, 255),
    gsSPVertex(object_jya_objVtx_012280, 4, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsDPPipeSync(),
    gsDPSetTextureLUT(G_TT_RGBA16),
    gsDPLoadTextureBlock_4b(object_jya_objTex_011A80, G_IM_FMT_CI, 64, 64, 0, 0, 0, 6, 6, 0, 0),
    gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, object_jya_objTex_011A60),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_RGBA, G_IM_SIZ_4b, 0, 256, 7, 0, 0, 0, 0, 0, 0, 0),
    gsDPLoadSync(),
    gsDPLoadTLUTCmd(7, 15),
    gsDPPipeSync(),
    gsSPVertex(object_jya_objVtx_0122C0, 8, 0),
    gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
    gsSP2Triangles(4, 5, 6, 0, 4, 6, 7, 0),
    gsSPEndDisplayList(),
}; 

CamData gZurerukabeCol_camDataList_00012460[1] = {
	{ 0x0000, 0, 0x00000000 }, // 0x00012460

}; 

u32 gZurerukabeCol_polygonTypes_00012468[] = {
	 0x00800000, 0x000007C0, 
	 0x00000000, 0x000007C0, 

}; 

RoomPoly gZurerukabeCol_polygons_00012478[] = {
	{ 0x0000, 0x0000, 0x0001, 0x0002, 0x0000, 0x0000, 0x7FFF, 0x0000 }, // 0x00012478
	{ 0x0000, 0x0000, 0x0002, 0x0003, 0x0000, 0x0000, 0x7FFF, 0x0000 }, // 0x00012488
	{ 0x0001, 0x0002, 0x0004, 0x0005, 0x0000, 0x0000, 0x7FFF, 0x0000 }, // 0x00012498
	{ 0x0001, 0x0002, 0x0005, 0x0003, 0x0000, 0x0000, 0x7FFF, 0x0000 }, // 0x000124A8
	{ 0x0001, 0x0001, 0x0000, 0x0006, 0x0000, 0x0000, 0x7FFF, 0x0000 }, // 0x000124B8
	{ 0x0001, 0x0001, 0x0006, 0x0007, 0x0000, 0x0000, 0x7FFF, 0x0000 }, // 0x000124C8

}; 

Vec3s gZurerukabeCol_vtx_000124D8[] = {
{ 1000, 0, 0 }, // 0x000124D8
{ 1000, 1000, 0 }, // 0x000124DE
{ -1000, 1000, 0 }, // 0x000124E4
{ -1000, 0, 0 }, // 0x000124EA
{ -5000, 1000, 0 }, // 0x000124F0
{ -5000, 0, 0 }, // 0x000124F6
{ 5000, 0, 0 }, // 0x000124FC
{ 5000, 1000, 0 }, // 0x00012502

}; 

CollisionHeader gZurerukabeCol = { -5000, 0, 0, 5000, 1000, 0, 8, gZurerukabeCol_vtx_000124D8, 6, gZurerukabeCol_polygons_00012478, gZurerukabeCol_polygonTypes_00012468, &gZurerukabeCol_camDataList_00012460, 0, 0 }; 

static u32 pad12534 = 0;
static u32 pad12538 = 0;
static u32 pad1253C = 0;

u64 gKanaamiTopTex[] = {
#include "assets/objects/object_jya_obj/gKanaamiTopTex.rgb5a1.inc.c"
};

u64 gKanaamiMiddleTex[] = {
#include "assets/objects/object_jya_obj/gKanaamiMiddleTex.rgb5a1.inc.c"
};

u64 gCobraMirrorStoneTex[] = {
#include "assets/objects/object_jya_obj/gCobraMirrorStoneTex.rgb5a1.inc.c"
};

u64 gCobraMirrorMirrorTex[] = {
#include "assets/objects/object_jya_obj/gCobraMirrorMirrorTex.ia16.inc.c"
};

u64 gCobraMirrorToothTex[] = {
#include "assets/objects/object_jya_obj/gCobraMirrorToothTex.ia16.inc.c"
};

u64 gCobraMirrorEyeTex[] = {
#include "assets/objects/object_jya_obj/gCobraMirrorEyeTex.rgb5a1.inc.c"
};

u64 gCobraMirrorBorderTex[] = {
#include "assets/objects/object_jya_obj/gCobraMirrorBorderTex.rgb5a1.inc.c"
};

u64 gCobraMirrorHandleTex[] = {
#include "assets/objects/object_jya_obj/gCobraMirrorHandleTex.rgb5a1.inc.c"
};

u64 object_jya_objTex_016140[] = {
#include "assets/objects/object_jya_obj/object_jya_objTex_016140.rgb5a1.inc.c"
};

u64 object_jya_objTex_017140[] = {
#include "assets/objects/object_jya_obj/object_jya_objTex_017140.rgb5a1.inc.c"
};

u64 g1fLiftBottomTex[] = {
#include "assets/objects/object_jya_obj/g1fLiftBottomTex.rgb5a1.inc.c"
};

u64 gLiftChainTex[] = {
#include "assets/objects/object_jya_obj/gLiftChainTex.rgb5a1.inc.c"
};

u64 gLiftTopTex[] = {
#include "assets/objects/object_jya_obj/gLiftTopTex.rgb5a1.inc.c"
};

u64 gLiftUpperChainTex[] = {
#include "assets/objects/object_jya_obj/gLiftUpperChainTex.rgb5a1.inc.c"
};

u64 gBombiwaRockTex[] = {
#include "assets/objects/object_jya_obj/gBombiwaRockTex.rgb5a1.inc.c"
};

u64 gBombiwaLightTex1[] = {
#include "assets/objects/object_jya_obj/gBombiwaLightTex1.ia16.inc.c"
};

u64 gBigMirrorGradientTex[] = {
#include "assets/objects/object_jya_obj/gBigMirrorGradientTex.ia16.inc.c"
};

u64 object_jya_objTex_01B340[] = {
#include "assets/objects/object_jya_obj/object_jya_objTex_01B340.ia16.inc.c"
};

u64 object_jya_objTex_01B740[] = {
#include "assets/objects/object_jya_obj/object_jya_objTex_01B740.rgb5a1.inc.c"
};

u64 g1f1fiftTopTex[] = {
#include "assets/objects/object_jya_obj/g1f1fiftTopTex.rgb5a1.inc.c"
};


